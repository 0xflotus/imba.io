/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		__webpack_require__(1);
		
		// need to use webpack for this include to work as intended
		Scrimbla = __webpack_require__(14);
		
		var App = __webpack_require__(57).App;
		APP = new App();
		APP.schedule();
		
		__webpack_require__(59);
		
		// awaken pages etc
		q$('._page').map(function(el) { return el; });
		return q$('.awaken').map(function(el) { return el; });
	
	})()

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		
		if (typeof Imba === 'undefined') {
			__webpack_require__(2);
			
			Imba.CLIENT = true;
			
			__webpack_require__(3);
			__webpack_require__(4);
			__webpack_require__(5);
			__webpack_require__(6);
			__webpack_require__(7);
			__webpack_require__(8);
			__webpack_require__(9);
			__webpack_require__(10);
			__webpack_require__(11);
			__webpack_require__(12);
			return __webpack_require__(13);
		} else {
			return console.warn("Imba is already loaded");
		};
	
	})()

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function(){
		// externs;
		
		if (true) {
			global = window;
		};
		
		/*
		Imba is the namespace for all runtime related utilities
		@namespace
		*/
		
		Imba = {
			VERSION: '0.14.1',
			DEBUG: false
		};
		
		var reg = /-./g;
		
		/*
		True if running in client environment.
		@return {bool}
		*/
		
		Imba.isClient = function (){
			return Imba.CLIENT === true;
		};
		
		/*
		True if running in server environment.
		@return {bool}
		*/
		
		Imba.isServer = function (){
			return (false) === true;
		};
		
		Imba.subclass = function (obj,sup){
			;
			for (var k in sup){
				if (sup.hasOwnProperty(k)) { obj[k] = sup[k] };
			};
			
			obj.prototype = Object.create(sup.prototype);
			obj.__super__ = obj.prototype.__super__ = sup.prototype;
			obj.prototype.initialize = obj.prototype.constructor = obj;
			return obj;
		};
		
		/*
		Lightweight method for making an object iterable in imbas for/in loops.
		If the compiler cannot say for certain that a target in a for loop is an
		array, it will cache the iterable version before looping.
		
		```imba
		# this is the whole method
		def Imba.iterable o
			return o ? (o:toArray ? o.toArray : o) : []
		
		class CustomIterable
			def toArray
				[1,2,3]
		
		# will return [2,4,6]
		for x in CustomIterable.new
			x * 2
		
		```
		*/
		
		Imba.iterable = function (o){
			return o ? ((o.toArray ? (o.toArray()) : (o))) : ([]);
		};
		
		/*
		Coerces a value into a promise. If value is array it will
		call `Promise.all(value)`, or if it is not a promise it will
		wrap the value in `Promise.resolve(value)`. Used for experimental
		await syntax.
		@return {Promise}
		*/
		
		Imba.await = function (value){
			if (value instanceof Array) {
				return Promise.all(value);
			} else if (value && value.then) {
				return value;
			} else {
				return Promise.resolve(value);
			};
		};
		
		Imba.toCamelCase = function (str){
			return str.replace(reg,function(m) { return m.charAt(1).toUpperCase(); });
		};
		
		Imba.toCamelCase = function (str){
			return str.replace(reg,function(m) { return m.charAt(1).toUpperCase(); });
		};
		
		Imba.indexOf = function (a,b){
			return (b && b.indexOf) ? (b.indexOf(a)) : ([].indexOf.call(a,b));
		};
		
		Imba.prop = function (scope,name,opts){
			if (scope.defineProperty) {
				return scope.defineProperty(name,opts);
			};
			return;
		};
		
		return Imba.attr = function (scope,name,opts){
			if (scope.defineAttribute) {
				return scope.defineAttribute(name,opts);
			};
			
			var getName = Imba.toCamelCase(name);
			var setName = Imba.toCamelCase('set-' + name);
			
			scope.prototype[getName] = function() {
				return this.getAttribute(name);
			};
			
			scope.prototype[setName] = function(value) {
				this.setAttribute(name,value);
				return this;
			};
			
			return;
		};
	
	})()
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports) {

	(function(){
		
		
		function emit__(event,args,node){
			// var node = cbs[event]
			var prev,cb,ret;
			
			while ((prev = node) && (node = node.next)){
				if (cb = node.listener) {
					if (node.path && cb[node.path]) {
						ret = args ? (cb[node.path].apply(cb,args)) : (cb[node.path]());
					} else {
						// check if it is a method?
						ret = args ? (cb.apply(node,args)) : (cb.call(node));
					};
				};
				
				if (node.times && --node.times <= 0) {
					prev.next = node.next;
					node.listener = null;
				};
			};
			return;
		};
		
		// method for registering a listener on object
		Imba.listen = function (obj,event,listener,path){
			var $1;
			var cbs,list,tail;
			cbs = obj.__listeners__ || (obj.__listeners__ = {});
			list = cbs[($1 = event)] || (cbs[$1] = {});
			tail = list.tail || (list.tail = (list.next = {}));
			tail.listener = listener;
			tail.path = path;
			list.tail = tail.next = {};
			return tail;
		};
		
		Imba.once = function (obj,event,listener){
			var tail = Imba.listen(obj,event,listener);
			tail.times = 1;
			return tail;
		};
		
		Imba.unlisten = function (obj,event,cb,meth){
			var node,prev;
			var meta = obj.__listeners__;
			if (!meta) { return };
			
			if (node = meta[event]) {
				while ((prev = node) && (node = node.next)){
					if (node == cb || node.listener == cb) {
						prev.next = node.next;
						// check for correct path as well?
						node.listener = null;
						break;
					};
				};
			};
			return;
		};
		
		Imba.emit = function (obj,event,params){
			var cb;
			if (cb = obj.__listeners__) {
				if (cb[event]) { emit__(event,params,cb[event]) };
				if (cb.all) { emit__(event,[event,params],cb.all) }; // and event != 'all'
			};
			return;
		};
		
		return Imba.observeProperty = function (observer,key,trigger,target,prev){
			if (prev && typeof prev == 'object') {
				Imba.unlisten(prev,'all',observer,trigger);
			};
			if (target && typeof target == 'object') {
				Imba.listen(target,'all',observer,trigger);
			};
			return this;
		};
	
	})()

/***/ },
/* 4 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		
		var raf; // very simple raf polyfill
		raf || (raf = global.requestAnimationFrame);
		raf || (raf = global.webkitRequestAnimationFrame);
		raf || (raf = global.mozRequestAnimationFrame);
		raf || (raf = function(blk) { return setTimeout(blk,1000 / 60); });
		
		Imba.tick = function (d){
			if (this._scheduled) { raf(Imba.ticker()) };
			this.emit(this,'tick',[d]);
			return;
		};
		
		Imba.ticker = function (){
			var self = this;
			return self._ticker || (self._ticker = function(e) { return self.tick(e); });
		};
		
		/*
		
		Global alternative to requestAnimationFrame. Schedule a target
		to tick every frame. You can specify which method to call on the
		target (defaults to tick).
		
		*/
		
		Imba.schedule = function (target,method){
			if(method === undefined) method = 'tick';
			this.listen(this,'tick',target,method);
			// start scheduling now if this was the first one
			if (!this._scheduled) {
				this._scheduled = true;
				raf(Imba.ticker());
			};
			return this;
		};
		
		/*
		
		Unschedule a previously scheduled target
		
		*/
		
		Imba.unschedule = function (target,method){
			this.unlisten(this,'tick',target,method);
			var cbs = this.__listeners__ || (this.__listeners__ = {});
			if (!cbs.tick || !cbs.tick.next || !cbs.tick.next.listener) {
				this._scheduled = false;
			};
			return this;
		};
		
		/*
		
		Light wrapper around native setTimeout that expects the block / function
		as last argument (instead of first). It also triggers an event to Imba
		after the timeout to let schedulers update (to rerender etc) afterwards.
		
		*/
		
		Imba.setTimeout = function (delay,block){
			return setTimeout(function() {
				block();
				return Imba.emit(Imba,'timeout',[block]);
			},delay);
		};
		
		/*
		
		Light wrapper around native setInterval that expects the block / function
		as last argument (instead of first). It also triggers an event to Imba
		after every interval to let schedulers update (to rerender etc) afterwards.
		
		*/
		
		Imba.setInterval = function (interval,block){
			return setInterval(function() {
				block();
				return Imba.emit(Imba,'interval',[block]);
			},interval);
		};
		
		/*
		Clear interval with specified id
		*/
		
		Imba.clearInterval = function (interval){
			return clearInterval(interval);
		};
		
		/*
		Clear timeout with specified id
		*/
		
		Imba.clearTimeout = function (timeout){
			return clearTimeout(timeout);
		};
		
		// should add an Imba.run / setImmediate that
		// pushes listener onto the tick-queue with times - once
		
		
		/*
		
		Instances of Imba.Scheduler manages when to call `tick()` on their target,
		at a specified framerate or when certain events occur. Root-nodes in your
		applications will usually have a scheduler to make sure they rerender when
		something changes. It is also possible to make inner components use their
		own schedulers to control when they render.
		
		@iname scheduler
		
		*/
		
		Imba.Scheduler = function Scheduler(target){
			var self = this;
			self._target = target;
			self._marked = false;
			self._active = false;
			self._marker = function() { return self.mark(); };
			self._ticker = function(e) { return self.tick(e); };
			
			self._events = true;
			self._fps = 1;
			
			self._dt = 0;
			self._timestamp = 0;
			self._ticks = 0;
			self._flushes = 0;
		};
		
		/*
			Create a new Imba.Scheduler for specified target
			@return {Imba.Scheduler}
			*/
		
		/*
			Check whether the current scheduler is active or not
			@return {bool}
			*/
		
		Imba.Scheduler.prototype.active = function (){
			return this._active;
		};
		
		/*
			Delta time between the two last ticks
			@return {Number}
			*/
		
		Imba.Scheduler.prototype.dt = function (){
			return this._dt;
		};
		
		/*
			Delta time between the two last ticks
			@return {Number}
			*/
		
		Imba.Scheduler.prototype.configure = function (pars){
			if(!pars||pars.constructor !== Object) pars = {};
			var fps = pars.fps !== undefined ? pars.fps : 1;
			var events = pars.events !== undefined ? pars.events : true;
			if (events != null) { this._events = events };
			if (fps != null) { this._fps = fps };
			return this;
		};
		
		// def reschedule
		// 	raf(@ticker)
		// 	self
		
		/*
			Mark the scheduler as dirty. This will make sure that
			the scheduler calls `target.tick` on the next frame
			@return {self}
			*/
		
		Imba.Scheduler.prototype.mark = function (){
			this._marked = true;
			return this;
		};
		
		/*
			Instantly trigger target.tick and mark scheduler as clean (not dirty/marked).
			This is called implicitly from tick, but can also be called manually if you
			really want to force a tick without waiting for the next frame.
			@return {self}
			*/
		
		Imba.Scheduler.prototype.flush = function (){
			this._marked = false;
			this._flushes++;
			this._target.tick();
			return this;
		};
		
		/*
			@fixme this expects raf to run at 60 fps 
		
			Called automatically on every frame while the scheduler is active.
			It will only call `target.tick` if the scheduler is marked dirty,
			or when according to @fps setting.
		
			If you have set up a scheduler with an fps of 1, tick will still be
			called every frame, but `target.tick` will only be called once every
			second, and it will *make sure* each `target.tick` happens in separate
			seconds according to Date. So if you have a node that renders a clock
			based on Date.now (or something similar), you can schedule it with 1fps,
			never needing to worry about two ticks happening within the same second.
			The same goes for 4fps, 10fps etc.
		
			@protected
			@return {self}
			*/
		
		Imba.Scheduler.prototype.tick = function (delta){
			this._ticks++;
			this._dt = delta;
			
			var fps = this._fps;
			
			if (fps == 60) {
				this._marked = true;
			} else if (fps == 30) {
				if (this._ticks % 2) { this._marked = true };
			} else if (fps) {
				// if it is less round - we trigger based
				// on date, for consistent rendering.
				// ie, if you want to render every second
				// it is important that no two renders
				// happen during the same second (according to Date)
				var period = ((60 / fps) / 60) * 1000;
				var beat = Math.floor(Date.now() / period);
				
				if (this._beat != beat) {
					this._beat = beat;
					this._marked = true;
				};
			};
			
			if (this._marked) this.flush();
			// reschedule if @active
			return this;
		};
		
		/*
			Start the scheduler if it is not already active.
			**While active**, the scheduler will override `target.commit`
			to do nothing. By default Imba.tag#commit calls render, so
			that rendering is cascaded through to children when rendering
			a node. When a scheduler is active (for a node), Imba disables
			this automatic rendering.
			*/
		
		Imba.Scheduler.prototype.activate = function (){
			if (!this._active) {
				this._active = true;
				// override target#commit while this is active
				this._commit = this._target.commit;
				this._target.commit = function() { return this; };
				Imba.schedule(this);
				if (this._events) { Imba.listen(Imba,'event',this,'onevent') };
				this._target && this._target.flag  &&  this._target.flag('scheduled_');
				this.tick(0); // start ticking
			};
			return this;
		};
		
		/*
			Stop the scheduler if it is active.
			*/
		
		Imba.Scheduler.prototype.deactivate = function (){
			if (this._active) {
				this._active = false;
				this._target.commit = this._commit;
				Imba.unschedule(this);
				Imba.unlisten(Imba,'event',this);
				this._target && this._target.unflag  &&  this._target.unflag('scheduled_');
			};
			return this;
		};
		
		Imba.Scheduler.prototype.track = function (){
			return this._marker;
		};
		
		Imba.Scheduler.prototype.onevent = function (event){
			var $1;
			if (this._marked) { return this };
			
			if (this._events instanceof Function) {
				if (this._events(event)) this.mark();
			} else if (this._events instanceof Array) {
				if (idx$(($1 = event) && $1.type  &&  $1.type(),this._events) >= 0) this.mark();
			} else if (this._events) {
				if (event._responder) this.mark();
			};
			return this;
		};
		return Imba.Scheduler;
	
	})()
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports) {

	(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		Imba.static = function (items,nr){
			items.static = nr;
			return items;
		};
		
		/*
		This is the baseclass that all tags in imba inherit from.
		@iname node
		*/
		
		Imba.Tag = function Tag(dom){
			this.setDom(dom);
		};
		
		Imba.Tag.createNode = function (){
			throw "Not implemented";
		};
		
		Imba.Tag.build = function (){
			return new this(this.createNode());
		};
		
		
		
		Imba.Tag.prototype.object = function(v){ return this._object; }
		Imba.Tag.prototype.setObject = function(v){ this._object = v; return this; };
		
		Imba.Tag.prototype.dom = function (){
			return this._dom;
		};
		
		Imba.Tag.prototype.setDom = function (dom){
			dom._tag = this;
			this._dom = dom;
			return this;
		};
		
		/*
			Setting references for tags like
			`<div@header>` will compile to `tag('div').setRef('header',this).end()`
			By default it adds the reference as a className to the tag.
			@return {self}
			*/
		
		Imba.Tag.prototype.setRef = function (ref,ctx){
			this.flag(this._ref = ref);
			return this;
		};
		
		/*
			Method that is called by the compiled tag-chains, for
			binding events on tags to methods etc.
			`<a :tap=fn>` compiles to `tag('a').setHandler('tap',fn,this).end()`
			where this refers to the context in which the tag is created.
			@return {self}
			*/
		
		Imba.Tag.prototype.setHandler = function (event,handler,ctx){
			var key = 'on' + event;
			
			if (handler instanceof Function) {
				this[key] = handler;
			} else if (handler instanceof Array) {
				var fn = handler.shift();
				this[key] = function(e) { return ctx[fn].apply(ctx,handler.concat(e)); };
			} else {
				this[key] = function(e) { return ctx[handler](e); };
			};
			return this;
		};
		
		Imba.Tag.prototype.setId = function (id){
			this.dom().id = id;
			return this;
		};
		
		Imba.Tag.prototype.id = function (){
			return this.dom().id;
		};
		
		/*
			Adds a new attribute or changes the value of an existing attribute
			on the specified tag. If the value is null or false, the attribute
			will be removed.
			@return {self}
			*/
		
		Imba.Tag.prototype.setAttribute = function (name,value){
			// should this not return self?
			var old = this.dom().getAttribute(name);
			
			if (old == value) {
				return value;
			} else if (value != null && value !== false) {
				return this.dom().setAttribute(name,value);
			} else {
				return this.dom().removeAttribute(name);
			};
		};
		
		/*
			removes an attribute from the specified tag
			*/
		
		Imba.Tag.prototype.removeAttribute = function (name){
			return this.dom().removeAttribute(name);
		};
		
		/*
			returns the value of an attribute on the tag.
			If the given attribute does not exist, the value returned
			will either be null or "" (the empty string)
			*/
		
		Imba.Tag.prototype.getAttribute = function (name){
			return this.dom().getAttribute(name);
		};
		
		/*
			Override this to provide special wrapping etc.
			@return {self}
			*/
		
		Imba.Tag.prototype.setContent = function (content,type){
			this.setChildren(content,type);
			return this;
		};
		
		/*
			Set the children of node. type param is optional,
			and should only be used by Imba when compiling tag trees. 
			@return {self}
			*/
		
		Imba.Tag.prototype.setChildren = function (nodes,type){
			throw "Not implemented";
		};
		
		/*
			Get text of node. Uses textContent behind the scenes (not innerText)
			[https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent]()
			@return {string} inner text of node
			*/
		
		Imba.Tag.prototype.text = function (v){
			return this._dom.textContent;
		};
		
		/*
			Set text of node. Uses textContent behind the scenes (not innerText)
			[https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent]()
			*/
		
		Imba.Tag.prototype.setText = function (txt){
			this._empty = false;
			this._dom.textContent = txt == null ? (txt = "") : (txt);
			return this;
		};
		
		
		/*
			Method for getting and setting data-attributes. When called with zero
			arguments it will return the actual dataset for the tag.
		
				var node = <div data-name='hello'>
				# get the whole dataset
				node.dataset # {name: 'hello'}
				# get a single value
				node.dataset('name') # 'hello'
				# set a single value
				node.dataset('name','newname') # self
		
		
			*/
		
		Imba.Tag.prototype.dataset = function (key,val){
			throw "Not implemented";
		};
		
		/*
			Empty placeholder. Override to implement custom render behaviour.
			Works much like the familiar render-method in React.
			@return {self}
			*/
		
		Imba.Tag.prototype.render = function (){
			return this;
		};
		
		/*
			Called implicitly through Imba.Tag#end, upon creating a tag. All
			properties will have been set before build is called, including
			setContent.
			@return {self}
			*/
		
		Imba.Tag.prototype.build = function (){
			this.render();
			return this;
		};
		
		/*
			Called implicitly through Imba.Tag#end, for tags that are part of
			a tag tree (that are rendered several times).
			@return {self}
			*/
		
		Imba.Tag.prototype.commit = function (){
			this.render();
			return this;
		};
		
		/*
		
			Called by the tag-scheduler (if this tag is scheduled)
			By default it will call this.render. Do not override unless
			you really understand it.
		
			*/
		
		Imba.Tag.prototype.tick = function (){
			this.render();
			return this;
		};
		
		/*
			
			A very important method that you will practically never manually.
			The tag syntax of Imba compiles to a chain of setters, which always
			ends with .end. `<a.large>` compiles to `tag('a').flag('large').end()`
			
			You are highly adviced to not override its behaviour. The first time
			end is called it will mark the tag as built and call Imba.Tag#build,
			and call Imba.Tag#commit on subsequent calls.
			@return {self}
			*/
		
		Imba.Tag.prototype.end = function (){
			if (this._built) {
				this.commit();
			} else {
				this._built = true;
				this.build();
			};
			return this;
		};
		
		/*
			This is called instead of Imba.Tag#end for `<self>` tag chains.
			Defaults to noop
			@return {self}
			*/
		
		Imba.Tag.prototype.synced = function (){
			return this;
		};
		
		// called when the node is awakened in the dom - either automatically
		// upon attachment to the dom-tree, or the first time imba needs the
		// tag for a domnode that has been rendered on the server
		Imba.Tag.prototype.awaken = function (){
			return this;
		};
		
		/*
			List of flags for this node. 
			*/
		
		Imba.Tag.prototype.flags = function (){
			return this._dom.classList;
		};
		
		/*
			Add speficied flag to current node.
			If a second argument is supplied, it will be coerced into a Boolean,
			and used to indicate whether we should remove the flag instead.
			@return {self}
			*/
		
		Imba.Tag.prototype.flag = function (name,toggler){
			// it is most natural to treat a second undefined argument as a no-switch
			// so we need to check the arguments-length
			if (arguments.length == 2 && !toggler) {
				this._dom.classList.remove(name);
			} else {
				this._dom.classList.add(name);
			};
			return this;
		};
		
		/*
			Remove specified flag from node
			@return {self}
			*/
		
		Imba.Tag.prototype.unflag = function (name){
			this._dom.classList.remove(name);
			return this;
		};
		
		/*
			Toggle specified flag on node
			@return {self}
			*/
		
		Imba.Tag.prototype.toggleFlag = function (name){
			this._dom.classList.toggle(name);
			return this;
		};
		
		/*
			Check whether current node has specified flag
			@return {bool}
			*/
		
		Imba.Tag.prototype.hasFlag = function (name){
			return this._dom.classList.contains(name);
		};
		
		/*
			Get the scheduler for this node. A new scheduler will be created
			if it does not already exist.
		
			@return {Imba.Scheduler}
			*/
		
		Imba.Tag.prototype.scheduler = function (){
			return this._scheduler == null ? (this._scheduler = new Imba.Scheduler(this)) : (this._scheduler);
		};
		
		/*
		
			Shorthand to start scheduling a node. The method will basically
			proxy the arguments through to scheduler.configure, and then
			activate the scheduler.
			
			@return {self}
			*/
		
		Imba.Tag.prototype.schedule = function (options){
			if(options === undefined) options = {};
			this.scheduler().configure(options).activate();
			return this;
		};
		
		/*
			Shorthand for deactivating scheduler (if tag has one).
			@deprecated
			*/
		
		Imba.Tag.prototype.unschedule = function (){
			if (this._scheduler) { this.scheduler().deactivate() };
			return this;
		};
		
		
		/*
			Get the parent of current node
			@return {Imba.Tag} 
			*/
		
		Imba.Tag.prototype.parent = function (){
			return tag$wrap(this.dom().parentNode);
		};
		
		/*
			Shorthand for console.log on elements
			@return {self}
			*/
		
		Imba.Tag.prototype.log = function (){
			var $0 = arguments, i = $0.length;
			var args = new Array(i>0 ? i : 0);
			while(i>0) args[i-1] = $0[--i];
			args.unshift(console);
			Function.prototype.call.apply(console.log,args);
			return this;
		};
		
		
		Imba.Tag.prototype.initialize = Imba.Tag;
		
		HTML_TAGS = "a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hr html i iframe img input ins kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr".split(" ");
		HTML_TAGS_UNSAFE = "article aside header section".split(" ");
		SVG_TAGS = "circle defs ellipse g line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan".split(" ");
		
		
		function extender(obj,sup){
			for (var i = 0, keys = Object.keys(sup), l = keys.length; i < l; i++){
				obj[($1 = keys[i])] == null ? (obj[$1] = sup[keys[i]]) : (obj[$1]);
			};
			
			obj.prototype = Object.create(sup.prototype);
			obj.__super__ = obj.prototype.__super__ = sup.prototype;
			obj.prototype.initialize = obj.prototype.constructor = obj;
			if (sup.inherit) { sup.inherit(obj) };
			return obj;
		};
		
		function Tag(){
			return function(dom) {
				this.setDom(dom);
				return this;
			};
		};
		
		function TagSpawner(type){
			return function() { return type.build(); };
		};
		
		Imba.Tags = function Tags(){
			this;
		};
		
		Imba.Tags.prototype.__clone = function (ns){
			var clone = Object.create(this);
			clone._parent = this;
			return clone;
		};
		
		Imba.Tags.prototype.defineNamespace = function (name){
			var clone = Object.create(this);
			clone._parent = this;
			clone._ns = name;
			this[name.toUpperCase()] = clone;
			return clone;
		};
		
		Imba.Tags.prototype.baseType = function (name){
			return idx$(name,HTML_TAGS) >= 0 ? ('htmlelement') : ('div');
		};
		
		Imba.Tags.prototype.defineTag = function (name,supr,body){
			if(body==undefined && typeof supr == 'function') body = supr,supr = '';
			if(supr==undefined) supr = '';
			supr || (supr = this.baseType(name));
			var supertype = this[supr];
			var tagtype = Tag();
			var norm = name.replace(/\-/g,'_');
			
			
			tagtype._name = name;
			extender(tagtype,supertype);
			
			if (name[0] == '#') {
				this[name] = tagtype;
				Imba.SINGLETONS[name.slice(1)] = tagtype;
			} else {
				this[name] = tagtype;
				this['$' + norm] = TagSpawner(tagtype);
			};
			
			if (body) {
				if (body.length == 2) {
					// create clone
					if (!tagtype.hasOwnProperty('TAGS')) {
						tagtype.TAGS = (supertype.TAGS || this).__clone();
					};
				};
				
				body.call(tagtype,tagtype,tagtype.TAGS || this);
			};
			
			return tagtype;
		};
		
		Imba.Tags.prototype.defineSingleton = function (name,supr,body){
			return this.defineTag(name,supr,body);
		};
		
		Imba.Tags.prototype.extendTag = function (name,supr,body){
			if(body==undefined && typeof supr == 'function') body = supr,supr = '';
			if(supr==undefined) supr = '';
			var klass = ((typeof name=='string'||name instanceof String) ? (this[name]) : (name));
			// allow for private tags here as well?
			if (body) { body && body.call(klass,klass,klass.prototype) };
			return klass;
		};
		
		
		Imba.TAGS = new Imba.Tags();
		Imba.TAGS.element = Imba.Tag;
		
		var svg = Imba.TAGS.defineNamespace('svg');
		
		svg.baseType = function (name){
			return 'svgelement';
		};
		
		
		Imba.SINGLETONS = {};
		
		
		Imba.defineTag = function (name,supr,body){
			if(body==undefined && typeof supr == 'function') body = supr,supr = '';
			if(supr==undefined) supr = '';
			return Imba.TAGS.defineTag(name,supr,body);
		};
		
		Imba.defineSingletonTag = function (id,supr,body){
			if(body==undefined && typeof supr == 'function') body = supr,supr = 'div';
			if(supr==undefined) supr = 'div';
			return Imba.TAGS.defineTag(this.name(),supr,body);
		};
		
		Imba.extendTag = function (name,body){
			return Imba.TAGS.extendTag(name,body);
		};
		
		Imba.tag = function (name){
			var typ = Imba.TAGS[name];
			if (!typ) { throw new Error(("tag " + name + " is not defined")) };
			return new typ(typ.createNode());
		};
		
		Imba.tagWithId = function (name,id){
			var typ = Imba.TAGS[name];
			if (!typ) { throw new Error(("tag " + name + " is not defined")) };
			var dom = typ.createNode();
			dom.id = id;
			return new typ(dom);
		};
		
		// TODO: Can we move these out and into dom.imba in a clean way?
		// These methods depends on Imba.document.getElementById
		
		Imba.getTagSingleton = function (id){
			var klass;
			var dom,node;
			
			if (klass = Imba.SINGLETONS[id]) {
				if (klass && klass.Instance) { return klass.Instance };
				
				// no instance - check for element
				if (dom = Imba.document().getElementById(id)) {
					// we have a live instance - when finding it through a selector we should awake it, no?
					// console.log('creating the singleton from existing node in dom?',id,type)
					node = klass.Instance = new klass(dom);
					node.awaken(dom); // should only awaken
					return node;
				};
				
				dom = klass.createNode();
				dom.id = id;
				node = klass.Instance = new klass(dom);
				node.end().awaken(dom);
				return node;
			} else if (dom = Imba.document().getElementById(id)) {
				return Imba.getTagForDom(dom);
			};
		};
		
		var svgSupport = typeof SVGElement !== 'undefined';
		
		Imba.getTagForDom = function (dom){
			var m;
			if (!dom) { return null };
			if (dom._dom) { return dom }; // could use inheritance instead
			if (dom._tag) { return dom._tag };
			if (!dom.nodeName) { return null };
			
			var ns = null;
			var id = dom.id;
			var type = dom.nodeName.toLowerCase();
			var tags = Imba.TAGS;
			var native$ = type;
			var cls = dom.className;
			
			if (id && Imba.SINGLETONS[id]) {
				// FIXME control that it is the same singleton?
				// might collide -- not good?
				return Imba.getTagSingleton(id);
			};
			// look for id - singleton
			
			// need better test here
			if (svgSupport && (dom instanceof SVGElement)) {
				ns = "svg";
				cls = dom.className.baseVal;
				tags = tags.SVG;
			};
			
			var spawner;
			
			if (cls) {
				// there can be several matches here - should choose the last
				// should fall back to less specific later? - otherwise things may fail
				// TODO rework this
				if (m = cls.match(/\b_([a-z\-]+)\b(?!\s*_[a-z\-]+)/)) {
					type = m[1]; // .replace(/-/g,'_')
				};
				
				if (m = cls.match(/\b([A-Z\-]+)_\b/)) {
					ns = m[1];
				};
			};
			
			
			spawner = tags[type] || tags[native$];
			return spawner ? (new spawner(dom).awaken(dom)) : (null);
		};
		
		tag$ = Imba.TAGS;
		t$ = Imba.tag;
		tc$ = Imba.tagWithFlags;
		ti$ = Imba.tagWithId;
		tic$ = Imba.tagWithIdAndFlags;
		id$ = Imba.getTagSingleton;
		return tag$wrap = Imba.getTagForDom;
		
	
	})()

/***/ },
/* 6 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		Imba.document = function (){
			return window.document;
		};
		
		/*
		Returns the body element wrapped in an Imba.Tag
		*/
		
		Imba.root = function (){
			return tag$wrap(Imba.document().body);
		};
		
		tag$.defineTag('htmlelement', 'element', function(tag){
			
			/*
				Called when a tag type is being subclassed.
				*/
			
			tag.inherit = function (child){
				child.prototype._empty = true;
				child._protoDom = null;
				
				if (this._nodeType) {
					child._nodeType = this._nodeType;
					
					var className = "_" + child._name.replace(/_/g,'-');
					if (child._name[0] != '#') { return child._classes = this._classes.concat(className) };
				} else {
					child._nodeType = child._name;
					return child._classes = [];
				};
			};
			
			tag.buildNode = function (){
				var dom = Imba.document().createElement(this._nodeType);
				var cls = this._classes.join(" ");
				if (cls) { dom.className = cls };
				return dom;
			};
			
			tag.createNode = function (){
				var proto = (this._protoDom || (this._protoDom = this.buildNode()));
				return proto.cloneNode(false);
			};
			
			tag.dom = function (){
				return this._protoDom || (this._protoDom = this.buildNode());
			};
			
			
			
			tag.prototype.id = function(v){ return this.getAttribute('id'); }
			tag.prototype.setId = function(v){ this.setAttribute('id',v); return this; };
			
			
			tag.prototype.tabindex = function(v){ return this.getAttribute('tabindex'); }
			tag.prototype.setTabindex = function(v){ this.setAttribute('tabindex',v); return this; };
			
			
			tag.prototype.title = function(v){ return this.getAttribute('title'); }
			tag.prototype.setTitle = function(v){ this.setAttribute('title',v); return this; };
			
			
			tag.prototype.role = function(v){ return this.getAttribute('role'); }
			tag.prototype.setRole = function(v){ this.setAttribute('role',v); return this; };
			
			tag.prototype.width = function (){
				return this._dom.offsetWidth;
			};
			
			tag.prototype.height = function (){
				return this._dom.offsetHeight;
			};
			
			tag.prototype.setChildren = function (nodes,type){
				this._empty ? (this.append(nodes)) : (this.empty().append(nodes));
				this._children = null;
				return this;
			};
			
			/*
				Set inner html of node
				*/
			
			tag.prototype.setHtml = function (html){
				this._dom.innerHTML = html;
				return this;
			};
			
			/*
				Get inner html of node
				*/
			
			tag.prototype.html = function (){
				return this._dom.innerHTML;
			};
			
			/*
				Remove all content inside node
				*/
			
			tag.prototype.empty = function (){
				while (this._dom.firstChild){
					this._dom.removeChild(this._dom.firstChild);
				};
				this._children = null;
				this._empty = true;
				return this;
			};
			
			/*
				Remove specified child from current node.
				*/
			
			tag.prototype.remove = function (child){
				var par = this.dom();
				var el = child && child.dom();
				if (el && el.parentNode == par) { par.removeChild(el) };
				return this;
			};
			
			tag.prototype.emit = function (name,pars){
				if(!pars||pars.constructor !== Object) pars = {};
				var data = pars.data !== undefined ? pars.data : null;
				var bubble = pars.bubble !== undefined ? pars.bubble : true;
				Imba.Events.trigger(name,this,{data: data,bubble: bubble});
				return this;
			};
			
			tag.prototype.css = function (key,val){
				if (key instanceof Object) {
					for (var i = 0, keys = Object.keys(key), l = keys.length; i < l; i++){
						this.css(keys[i],key[keys[i]]);
					};
				} else if (val == null) {
					this.dom().style.removeProperty(key);
				} else if (val == undefined) {
					return this.dom().style[key];
				} else {
					if ((typeof val=='number'||val instanceof Number) && key.match(/width|height|left|right|top|bottom/)) {
						val = val + "px";
					};
					this.dom().style[key] = val;
				};
				return this;
			};
			
			tag.prototype.dataset = function (key,val){
				if (key instanceof Object) {
					for (var i = 0, keys = Object.keys(key), l = keys.length; i < l; i++){
						this.dataset(keys[i],key[keys[i]]);
					};
					return this;
				};
				
				if (arguments.length == 2) {
					this.setAttribute(("data-" + key),val);
					return this;
				};
				
				if (key) {
					return this.getAttribute(("data-" + key));
				};
				
				var dataset = this.dom().dataset;
				
				if (!dataset) {
					dataset = {};
					for (var i1 = 0, ary = iter$(this.dom().attributes), len = ary.length, atr; i1 < len; i1++) {
						atr = ary[i1];
						if (atr.name.substr(0,5) == 'data-') {
							dataset[Imba.toCamelCase(atr.name.slice(5))] = atr.value;
						};
					};
				};
				
				return dataset;
			};
			
			/*
				Get descendants of current node, optionally matching selector
				@return {Imba.Selector}
				*/
			
			tag.prototype.find = function (sel){
				return new Imba.Selector(sel,this);
			};
			
			/*
				Get the first matching child of node
			
				@return {Imba.Tag}
				*/
			
			tag.prototype.first = function (sel){
				return sel ? (this.find(sel).first()) : (tag$wrap(this.dom().firstElementChild));
			};
			
			/*
				Get the last matching child of node
			
					node.last # returns the last child of node
					node.last %span # returns the last span inside node
					node.last do |el| el.text == 'Hi' # return last node with text Hi
			
				@return {Imba.Tag}
				*/
			
			tag.prototype.last = function (sel){
				return sel ? (this.find(sel).last()) : (tag$wrap(this.dom().lastElementChild));
			};
			
			/*
				Get the child at index
				*/
			
			tag.prototype.child = function (i){
				return tag$wrap(this.dom().children[i || 0]);
			};
			
			tag.prototype.children = function (sel){
				var nodes = new Imba.Selector(null,this,this._dom.children);
				return sel ? (nodes.filter(sel)) : (nodes);
			};
			
			tag.prototype.orphanize = function (){
				var par;
				if (par = this.dom().parentNode) { par.removeChild(this._dom) };
				return this;
			};
			
			tag.prototype.matches = function (sel){
				var fn;
				if (sel instanceof Function) {
					return sel(this);
				};
				
				if (sel.query) { sel = sel.query() };
				if (fn = (this._dom.webkitMatchesSelector || this._dom.matches)) { return fn.call(this._dom,sel) };
				// TODO support other browsers etc?
			};
			
			/*
				Get the first element matching supplied selector / filter
				traversing upwards, but including the node itself.
				@return {Imba.Tag}
				*/
			
			tag.prototype.closest = function (sel){
				if (!sel) { return this.parent() }; // should return self?!
				var node = this;
				if (sel.query) { sel = sel.query() };
				
				while (node){
					if (node.matches(sel)) { return node };
					node = node.parent();
				};
				return null;
			};
			
			/*
				Get the closest ancestor of node that matches
				specified selector / matcher.
			
				@return {Imba.Tag}
				*/
			
			tag.prototype.up = function (sel){
				if (!sel) { return this.parent() };
				return this.parent() && this.parent().closest(sel);
			};
			
			tag.prototype.path = function (sel){
				var node = this;
				var nodes = [];
				if (sel && sel.query) { sel = sel.query() };
				
				while (node){
					if (!sel || node.matches(sel)) { nodes.push(node) };
					node = node.parent();
				};
				return nodes;
			};
			
			tag.prototype.parents = function (sel){
				var par = this.parent();
				return par ? (par.path(sel)) : ([]);
			};
			
			
			
			tag.prototype.siblings = function (sel){
				var par, self = this;
				if (!(par = this.parent())) { return [] }; // FIXME
				var ary = this.dom().parentNode.children;
				var nodes = new Imba.Selector(null,this,ary);
				return nodes.filter(function(n) { return n != self && (!sel || n.matches(sel)); });
			};
			
			/*
				Get the immediately following sibling of node.
				*/
			
			tag.prototype.next = function (sel){
				if (sel) {
					var el = this;
					while (el = el.next()){
						if (el.matches(sel)) { return el };
					};
					return null;
				};
				return tag$wrap(this.dom().nextElementSibling);
			};
			
			/*
				Get the immediately preceeding sibling of node.
				*/
			
			tag.prototype.prev = function (sel){
				if (sel) {
					var el = this;
					while (el = el.prev()){
						if (el.matches(sel)) { return el };
					};
					return null;
				};
				return tag$wrap(this.dom().previousElementSibling);
			};
			
			tag.prototype.contains = function (node){
				return this.dom().contains(node && node._dom || node);
			};
			
			tag.prototype.index = function (){
				var i = 0;
				var el = this.dom();
				while (el.previousSibling){
					el = el.previousSibling;
					i++;
				};
				return i;
			};
			
			
			/*
				
				@deprecated
				*/
			
			tag.prototype.insert = function (node,pars){
				if(!pars||pars.constructor !== Object) pars = {};
				var before = pars.before !== undefined ? pars.before : null;
				var after = pars.after !== undefined ? pars.after : null;
				if (after) { before = after.next() };
				if (node instanceof Array) {
					node = (tag$.$fragment().setContent(node,0).end());
				};
				if (before) {
					this.dom().insertBefore(node.dom(),before.dom());
				} else {
					this.append(node);
				};
				return this;
			};
			
			/*
				Focus on current node
				@return {self}
				*/
			
			tag.prototype.focus = function (){
				this.dom().focus();
				return this;
			};
			
			/*
				Remove focus from current node
				@return {self}
				*/
			
			tag.prototype.blur = function (){
				this.dom().blur();
				return this;
			};
			
			tag.prototype.template = function (){
				return null;
			};
			
			/*
				@todo Should support multiple arguments like append
			
				The .prepend method inserts the specified content as the first
				child of the target node. If the content is already a child of 
				node it will be moved to the start.
				
			    	node.prepend <div.top> # prepend node
			    	node.prepend "some text" # prepend text
			    	node.prepend [<ul>,<ul>] # prepend array
			
				*/
			
			tag.prototype.prepend = function (item){
				var first = this._dom.childNodes[0];
				first ? (this.insertBefore(item,first)) : (this.appendChild(item));
				return this;
			};
			
			/*
				The .append method inserts the specified content as the last child
				of the target node. If the content is already a child of node it
				will be moved to the end.
				
				# example
				    var root = <div.root>
				    var item = <div.item> "This is an item"
				    root.append item # appends item to the end of root
			
				    root.prepend "some text" # append text
				    root.prepend [<ul>,<ul>] # append array
				*/
			
			tag.prototype.append = function (item){
				// possible to append blank
				// possible to simplify on server?
				if (!item) { return this };
				
				if (item instanceof Array) {
					for (var i = 0, ary = iter$(item), len = ary.length, member; i < len; i++) {
						member = ary[i];
						member && this.append(member);
					};
				} else if ((typeof item=='string'||item instanceof String) || (typeof item=='number'||item instanceof Number)) {
					var node = Imba.document().createTextNode(item);
					this._dom.appendChild(node);
					if (this._empty) { this._empty = false };
				} else {
					this._dom.appendChild(item._dom || item);
					if (this._empty) { this._empty = false };
				};
				
				return this;
			};
			
			/*
				Insert a node into the current node (self), before another.
				The relative node must be a child of current node. 
				*/
			
			tag.prototype.insertBefore = function (node,rel){
				if ((typeof node=='string'||node instanceof String)) { node = Imba.document().createTextNode(node) };
				if (node && rel) { this.dom().insertBefore((node._dom || node),(rel._dom || rel)) };
				return this;
			};
			
			/*
				Append a single item (node or string) to the current node.
				If supplied item is a string it will automatically. This is used
				by Imba internally, but will practically never be used explicitly.
				*/
			
			tag.prototype.appendChild = function (node){
				if ((typeof node=='string'||node instanceof String)) { node = Imba.document().createTextNode(node) };
				if (node) { this.dom().appendChild(node._dom || node) };
				return this;
			};
			
			/*
				Remove a single child from the current node.
				Used by Imba internally.
				*/
			
			tag.prototype.removeChild = function (node){
				if (node) { this.dom().removeChild(node._dom || node) };
				return this;
			};
			
			tag.prototype.toString = function (){
				return this._dom.toString(); // really?
			};
			
			/*
				@deprecated
				*/
			
			tag.prototype.classes = function (){
				console.log('Imba.Tag#classes is deprecated');
				return this._dom.classList;
			};
		});
		
		return tag$.defineTag('svgelement', 'htmlelement');
	
	})()

/***/ },
/* 7 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// Extending Imba.Tag#css to work without prefixes by inspecting
		// the properties of a CSSStyleDeclaration and creating a map
		
		// var prefixes = ['-webkit-','-ms-','-moz-','-o-','-blink-']
		// var props = ['transform','transition','animation']
		
		var styles = window.getComputedStyle(document.documentElement,'');
		
		Imba.CSSKeyMap = {};
		
		for (var i = 0, ary = iter$(styles), len = ary.length, prefixed; i < len; i++) {
			prefixed = ary[i];
			var unprefixed = prefixed.replace(/^-(webkit|ms|moz|o|blink)-/,'');
			var camelCase = unprefixed.replace(/-(\w)/g,function(m,a) { return a.toUpperCase(); });
			
			// if there exists an unprefixed version -- always use this
			if (prefixed != unprefixed) {
				if (styles.hasOwnProperty(unprefixed)) { continue; };
			};
			
			// register the prefixes
			Imba.CSSKeyMap[unprefixed] = Imba.CSSKeyMap[camelCase] = prefixed;
		};
		
		return tag$.extendTag('htmlelement', function(tag){
			
			// override the original css method
			tag.prototype.css = function (key,val){
				if (key instanceof Object) {
					for (var i = 0, keys = Object.keys(key), l = keys.length; i < l; i++){
						this.css(keys[i],key[keys[i]]);
					};
					return this;
				};
				
				key = Imba.CSSKeyMap[key] || key;
				
				if (val == null) {
					this.dom().style.removeProperty(key);
				} else if (val == undefined) {
					return this.dom().style[key];
				} else {
					if ((typeof val=='number'||val instanceof Number) && key.match(/width|height|left|right|top|bottom/)) {
						val = val + "px";
					};
					this.dom().style[key] = val;
				};
				return this;
			};
		});
	
	})()

/***/ },
/* 8 */
/***/ function(module, exports) {

	(function(){
		
		// predefine all supported html tags
		tag$.defineTag('fragment', 'htmlelement', function(tag){
			
			tag.createNode = function (){
				return Imba.document().createDocumentFragment();
			};
		});
		
		tag$.defineTag('a', function(tag){
			
			
			tag.prototype.href = function(v){ return this.getAttribute('href'); }
			tag.prototype.setHref = function(v){ this.setAttribute('href',v); return this; };
		});
		
		tag$.defineTag('abbr');
		tag$.defineTag('address');
		tag$.defineTag('area');
		tag$.defineTag('article');
		tag$.defineTag('aside');
		tag$.defineTag('audio');
		tag$.defineTag('b');
		tag$.defineTag('base');
		tag$.defineTag('bdi');
		tag$.defineTag('bdo');
		tag$.defineTag('big');
		tag$.defineTag('blockquote');
		tag$.defineTag('body');
		tag$.defineTag('br');
		
		tag$.defineTag('button', function(tag){
			
			
			tag.prototype.autofocus = function(v){ return this.getAttribute('autofocus'); }
			tag.prototype.setAutofocus = function(v){ this.setAttribute('autofocus',v); return this; };
			
			
			tag.prototype.type = function(v){ return this.getAttribute('type'); }
			tag.prototype.setType = function(v){ this.setAttribute('type',v); return this; };
			
			
			tag.prototype.disabled = function(v){ return this.getAttribute('disabled'); }
			tag.prototype.setDisabled = function(v){ this.setAttribute('disabled',v); return this; };
		});
		
		tag$.defineTag('canvas', function(tag){
			tag.prototype.setWidth = function (val){
				if (this.width() != val) { this.dom().width = val };
				return this;
			};
			
			tag.prototype.setHeight = function (val){
				if (this.height() != val) { this.dom().height = val };
				return this;
			};
			
			tag.prototype.width = function (){
				return this.dom().width;
			};
			
			tag.prototype.height = function (){
				return this.dom().height;
			};
			
			tag.prototype.context = function (type){
				if(type === undefined) type = '2d';
				return this.dom().getContext(type);
			};
		});
		
		tag$.defineTag('caption');
		tag$.defineTag('cite');
		tag$.defineTag('code');
		tag$.defineTag('col');
		tag$.defineTag('colgroup');
		tag$.defineTag('data');
		tag$.defineTag('datalist');
		tag$.defineTag('dd');
		tag$.defineTag('del');
		tag$.defineTag('details');
		tag$.defineTag('dfn');
		tag$.defineTag('div');
		tag$.defineTag('dl');
		tag$.defineTag('dt');
		tag$.defineTag('em');
		tag$.defineTag('embed');
		tag$.defineTag('fieldset');
		tag$.defineTag('figcaption');
		tag$.defineTag('figure');
		tag$.defineTag('footer');
		
		tag$.defineTag('form', function(tag){
			
			
			tag.prototype.method = function(v){ return this.getAttribute('method'); }
			tag.prototype.setMethod = function(v){ this.setAttribute('method',v); return this; };
			
			
			tag.prototype.action = function(v){ return this.getAttribute('action'); }
			tag.prototype.setAction = function(v){ this.setAttribute('action',v); return this; };
		});
		
		tag$.defineTag('h1');
		tag$.defineTag('h2');
		tag$.defineTag('h3');
		tag$.defineTag('h4');
		tag$.defineTag('h5');
		tag$.defineTag('h6');
		tag$.defineTag('head');
		tag$.defineTag('header');
		tag$.defineTag('hr');
		tag$.defineTag('html');
		tag$.defineTag('i');
		
		tag$.defineTag('iframe', function(tag){
			
			
			tag.prototype.src = function(v){ return this.getAttribute('src'); }
			tag.prototype.setSrc = function(v){ this.setAttribute('src',v); return this; };
		});
		
		tag$.defineTag('img', function(tag){
			
			
			tag.prototype.src = function(v){ return this.getAttribute('src'); }
			tag.prototype.setSrc = function(v){ this.setAttribute('src',v); return this; };
		});
		
		tag$.defineTag('input', function(tag){
			// can use attr instead
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			
			tag.prototype.type = function(v){ return this.getAttribute('type'); }
			tag.prototype.setType = function(v){ this.setAttribute('type',v); return this; };
			
			
			tag.prototype.required = function(v){ return this.getAttribute('required'); }
			tag.prototype.setRequired = function(v){ this.setAttribute('required',v); return this; };
			
			
			tag.prototype.disabled = function(v){ return this.getAttribute('disabled'); }
			tag.prototype.setDisabled = function(v){ this.setAttribute('disabled',v); return this; };
			
			
			tag.prototype.autofocus = function(v){ return this.getAttribute('autofocus'); }
			tag.prototype.setAutofocus = function(v){ this.setAttribute('autofocus',v); return this; };
			
			tag.prototype.value = function (){
				return this.dom().value;
			};
			
			tag.prototype.setValue = function (v){
				if (v != this.dom().value) { this.dom().value = v };
				return this;
			};
			
			tag.prototype.setPlaceholder = function (v){
				if (v != this.dom().placeholder) { this.dom().placeholder = v };
				return this;
			};
			
			tag.prototype.placeholder = function (){
				return this.dom().placeholder;
			};
			
			tag.prototype.checked = function (){
				return this.dom().checked;
			};
			
			tag.prototype.setChecked = function (bool){
				if (bool != this.dom().checked) { this.dom().checked = bool };
				return this;
			};
		});
		
		tag$.defineTag('ins');
		tag$.defineTag('kbd');
		tag$.defineTag('keygen');
		tag$.defineTag('label');
		tag$.defineTag('legend');
		tag$.defineTag('li');
		
		tag$.defineTag('link', function(tag){
			
			
			tag.prototype.rel = function(v){ return this.getAttribute('rel'); }
			tag.prototype.setRel = function(v){ this.setAttribute('rel',v); return this; };
			
			
			tag.prototype.type = function(v){ return this.getAttribute('type'); }
			tag.prototype.setType = function(v){ this.setAttribute('type',v); return this; };
			
			
			tag.prototype.href = function(v){ return this.getAttribute('href'); }
			tag.prototype.setHref = function(v){ this.setAttribute('href',v); return this; };
			
			
			tag.prototype.media = function(v){ return this.getAttribute('media'); }
			tag.prototype.setMedia = function(v){ this.setAttribute('media',v); return this; };
		});
		
		tag$.defineTag('main');
		tag$.defineTag('map');
		tag$.defineTag('mark');
		tag$.defineTag('menu');
		tag$.defineTag('menuitem');
		
		tag$.defineTag('meta', function(tag){
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			
			tag.prototype.content = function(v){ return this.getAttribute('content'); }
			tag.prototype.setContent = function(v){ this.setAttribute('content',v); return this; };
			
			
			tag.prototype.charset = function(v){ return this.getAttribute('charset'); }
			tag.prototype.setCharset = function(v){ this.setAttribute('charset',v); return this; };
		});
		
		tag$.defineTag('meter');
		tag$.defineTag('nav');
		tag$.defineTag('noscript');
		tag$.defineTag('object');
		tag$.defineTag('ol');
		tag$.defineTag('optgroup');
		
		tag$.defineTag('option', function(tag){
			
			
			tag.prototype.value = function(v){ return this.getAttribute('value'); }
			tag.prototype.setValue = function(v){ this.setAttribute('value',v); return this; };
		});
		
		tag$.defineTag('output');
		tag$.defineTag('p');
		tag$.defineTag('param');
		tag$.defineTag('pre');
		tag$.defineTag('progress');
		tag$.defineTag('q');
		tag$.defineTag('rp');
		tag$.defineTag('rt');
		tag$.defineTag('ruby');
		tag$.defineTag('s');
		tag$.defineTag('samp');
		
		tag$.defineTag('script', function(tag){
			
			
			tag.prototype.src = function(v){ return this.getAttribute('src'); }
			tag.prototype.setSrc = function(v){ this.setAttribute('src',v); return this; };
			
			
			tag.prototype.type = function(v){ return this.getAttribute('type'); }
			tag.prototype.setType = function(v){ this.setAttribute('type',v); return this; };
		});
		
		tag$.defineTag('section');
		
		tag$.defineTag('select', function(tag){
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			
			tag.prototype.multiple = function(v){ return this.getAttribute('multiple'); }
			tag.prototype.setMultiple = function(v){ this.setAttribute('multiple',v); return this; };
			
			
			tag.prototype.required = function(v){ return this.getAttribute('required'); }
			tag.prototype.setRequired = function(v){ this.setAttribute('required',v); return this; };
			
			
			tag.prototype.disabled = function(v){ return this.getAttribute('disabled'); }
			tag.prototype.setDisabled = function(v){ this.setAttribute('disabled',v); return this; };
			
			tag.prototype.value = function (){
				return this.dom().value;
			};
			
			tag.prototype.setValue = function (v){
				if (v != this.dom().value) { this.dom().value = v };
				return this;
			};
		});
		
		
		tag$.defineTag('small');
		tag$.defineTag('source');
		tag$.defineTag('span');
		tag$.defineTag('strong');
		tag$.defineTag('style');
		tag$.defineTag('sub');
		tag$.defineTag('summary');
		tag$.defineTag('sup');
		tag$.defineTag('table');
		tag$.defineTag('tbody');
		tag$.defineTag('td');
		
		tag$.defineTag('textarea', function(tag){
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			
			tag.prototype.disabled = function(v){ return this.getAttribute('disabled'); }
			tag.prototype.setDisabled = function(v){ this.setAttribute('disabled',v); return this; };
			
			
			tag.prototype.required = function(v){ return this.getAttribute('required'); }
			tag.prototype.setRequired = function(v){ this.setAttribute('required',v); return this; };
			
			
			tag.prototype.rows = function(v){ return this.getAttribute('rows'); }
			tag.prototype.setRows = function(v){ this.setAttribute('rows',v); return this; };
			
			
			tag.prototype.cols = function(v){ return this.getAttribute('cols'); }
			tag.prototype.setCols = function(v){ this.setAttribute('cols',v); return this; };
			
			
			tag.prototype.autofocus = function(v){ return this.getAttribute('autofocus'); }
			tag.prototype.setAutofocus = function(v){ this.setAttribute('autofocus',v); return this; };
			
			tag.prototype.value = function (){
				return this.dom().value;
			};
			
			tag.prototype.setValue = function (v){
				if (v != this.dom().value) { this.dom().value = v };
				return this;
			};
			
			tag.prototype.setPlaceholder = function (v){
				if (v != this.dom().placeholder) { this.dom().placeholder = v };
				return this;
			};
			
			tag.prototype.placeholder = function (){
				return this.dom().placeholder;
			};
		});
		
		tag$.defineTag('tfoot');
		tag$.defineTag('th');
		tag$.defineTag('thead');
		tag$.defineTag('time');
		tag$.defineTag('title');
		tag$.defineTag('tr');
		tag$.defineTag('track');
		tag$.defineTag('u');
		tag$.defineTag('ul');
		tag$.defineTag('video');
		return tag$.defineTag('wbr');
	
	})()

/***/ },
/* 9 */
/***/ function(module, exports) {

	(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		
		tag$.SVG.defineTag('svgelement', function(tag){
			
			tag.namespaceURI = function (){
				return "http://www.w3.org/2000/svg";
			};
			
			var types = "circle defs ellipse g line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan".split(" ");
			
			tag.buildNode = function (){
				var dom = Imba.document().createElementNS(this.namespaceURI(),this._nodeType);
				var cls = this._classes.join(" ");
				if (cls) { dom.className.baseVal = cls };
				return dom;
			};
			
			tag.inherit = function (child){
				child._protoDom = null;
				
				if (idx$(child._name,types) >= 0) {
					child._nodeType = child._name;
					return child._classes = [];
				} else {
					child._nodeType = this._nodeType;
					var className = "_" + child._name.replace(/_/g,'-');
					return child._classes = this._classes.concat(className);
				};
			};
			
			
			Imba.attr(tag,'x');
			Imba.attr(tag,'y');
			
			Imba.attr(tag,'width');
			Imba.attr(tag,'height');
			
			Imba.attr(tag,'stroke');
			Imba.attr(tag,'stroke-width');
		});
		
		tag$.SVG.defineTag('svg', function(tag){
			Imba.attr(tag,'viewbox');
		});
		
		tag$.SVG.defineTag('rect');
		
		tag$.SVG.defineTag('circle', function(tag){
			Imba.attr(tag,'cx');
			Imba.attr(tag,'cy');
			Imba.attr(tag,'r');
		});
		
		tag$.SVG.defineTag('ellipse', function(tag){
			Imba.attr(tag,'cx');
			Imba.attr(tag,'cy');
			Imba.attr(tag,'rx');
			Imba.attr(tag,'ry');
		});
		
		tag$.SVG.defineTag('path', function(tag){
			Imba.attr(tag,'d');
			Imba.attr(tag,'pathLength');
		});
		
		return tag$.SVG.defineTag('line', function(tag){
			Imba.attr(tag,'x1');
			Imba.attr(tag,'x2');
			Imba.attr(tag,'y1');
			Imba.attr(tag,'y2');
		});
	
	})()

/***/ },
/* 10 */
/***/ function(module, exports) {

	(function(){
		if (!document.documentElement.classList) {
			tag$.extendTag('htmlelement', function(tag){
				
				tag.prototype.hasFlag = function (ref){
					return new RegExp('(^|\\s)' + ref + '(\\s|$)').test(this._dom.className);
				};
				
				tag.prototype.addFlag = function (ref){
					if (this.hasFlag(ref)) { return this };
					this._dom.className += (this._dom.className ? (' ') : ('')) + ref;
					return this;
				};
				
				tag.prototype.unflag = function (ref){
					if (!this.hasFlag(ref)) { return this };
					var regex = new RegExp('(^|\\s)*' + ref + '(\\s|$)*','g');
					this._dom.className = this._dom.className.replace(regex,'');
					return this;
				};
				
				tag.prototype.toggleFlag = function (ref){
					return this.hasFlag(ref) ? (this.unflag(ref)) : (this.flag(ref));
				};
				
				tag.prototype.flag = function (ref,bool){
					if (arguments.length == 2 && !!bool === false) {
						return this.unflag(ref);
					};
					return this.addFlag(ref);
				};
			});
			
			return true;
		};
	
	})()

/***/ },
/* 11 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var doc = document;
		var win = window;
		
		var hasTouchEvents = window && window.ontouchstart !== undefined;
		
		Imba.Pointer = function Pointer(){
			this.setButton(-1);
			this.setEvent({x: 0,y: 0,type: 'uninitialized'});
			return this;
		};
		
		
		
		Imba.Pointer.prototype.phase = function(v){ return this._phase; }
		Imba.Pointer.prototype.setPhase = function(v){ this._phase = v; return this; };
		
		
		Imba.Pointer.prototype.prevEvent = function(v){ return this._prevEvent; }
		Imba.Pointer.prototype.setPrevEvent = function(v){ this._prevEvent = v; return this; };
		
		
		Imba.Pointer.prototype.button = function(v){ return this._button; }
		Imba.Pointer.prototype.setButton = function(v){ this._button = v; return this; };
		
		
		Imba.Pointer.prototype.event = function(v){ return this._event; }
		Imba.Pointer.prototype.setEvent = function(v){ this._event = v; return this; };
		
		
		Imba.Pointer.prototype.dirty = function(v){ return this._dirty; }
		Imba.Pointer.prototype.setDirty = function(v){ this._dirty = v; return this; };
		
		
		Imba.Pointer.prototype.events = function(v){ return this._events; }
		Imba.Pointer.prototype.setEvents = function(v){ this._events = v; return this; };
		
		
		Imba.Pointer.prototype.touch = function(v){ return this._touch; }
		Imba.Pointer.prototype.setTouch = function(v){ this._touch = v; return this; };
		
		Imba.Pointer.prototype.update = function (e){
			this.setEvent(e);
			this.setDirty(true);
			return this;
		};
		
		// this is just for regular mouse now
		Imba.Pointer.prototype.process = function (){
			var e1 = this.event();
			
			if (this.dirty()) {
				this.setPrevEvent(e1);
				this.setDirty(false);
				
				// button should only change on mousedown etc
				if (e1.type == 'mousedown') {
					this.setButton(e1.button);
					
					// do not create touch for right click
					if (this.button() == 2 || (this.touch() && this.button() != 0)) {
						return;
					};
					
					// cancel the previous touch
					if (this.touch()) { this.touch().cancel() };
					this.setTouch(new Imba.Touch(e1,this));
					this.touch().mousedown(e1,e1);
				} else if (e1.type == 'mousemove') {
					if (this.touch()) { this.touch().mousemove(e1,e1) };
				} else if (e1.type == 'mouseup') {
					this.setButton(-1);
					
					if (this.touch() && this.touch().button() == e1.button) {
						this.touch().mouseup(e1,e1);
						this.setTouch(null);
					};
					// trigger pointerup
				};
			} else {
				if (this.touch()) { this.touch().idle() };
			};
			return this;
		};
		
		Imba.Pointer.prototype.cleanup = function (){
			return Imba.POINTERS;
		};
		
		Imba.Pointer.prototype.x = function (){
			return this.event().x;
		};
		Imba.Pointer.prototype.y = function (){
			return this.event().y;
		};
		
		// deprecated -- should remove
		Imba.Pointer.update = function (){
			// console.log('update touch')
			for (var i = 0, ary = iter$(Imba.POINTERS), len = ary.length; i < len; i++) {
				ary[i].process();
			};
			// need to be able to prevent the default behaviour of touch, no?
			win.requestAnimationFrame(Imba.Pointer.update);
			return this;
		};
		
		var lastNativeTouchTimeStamp = 0;
		var lastNativeTouchTimeout = 50;
		
		// Imba.Touch
		// Began	A finger touched the screen.
		// Moved	A finger moved on the screen.
		// Stationary	A finger is touching the screen but hasn't moved.
		// Ended	A finger was lifted from the screen. This is the final phase of a touch.
		// Canceled The system cancelled tracking for the touch.
		
		/*
		Consolidates mouse and touch events. Touch objects persist across a touch,
		from touchstart until end/cancel. When a touch starts, it will traverse
		down from the innermost target, until it finds a node that responds to
		ontouchstart. Unless the touch is explicitly redirected, the touch will
		call ontouchmove and ontouchend / ontouchcancel on the responder when appropriate.
		
			tag draggable
				# called when a touch starts
				def ontouchstart touch
					flag 'dragging'
					self
				
				# called when touch moves - same touch object
				def ontouchmove touch
					# move the node with touch
					css top: touch.dy, left: touch.dx
				
				# called when touch ends
				def ontouchend touch
					unflag 'dragging'
		
		@iname touch
		*/
		
		Imba.Touch = function Touch(event,pointer){
			// @native  = false
			this.setEvent(event);
			this.setData({});
			this.setActive(true);
			this._button = event && event.button || 0;
			this._suppress = false; // deprecated
			this._captured = false;
			this.setBubble(false);
			pointer = pointer;
			this.setUpdates(0);
			return this;
		};
		
		var touches = [];
		var count = 0;
		var identifiers = {};
		
		Imba.Touch.count = function (){
			return count;
		};
		
		Imba.Touch.lookup = function (item){
			return item && (item.__touch__ || identifiers[item.identifier]);
		};
		
		Imba.Touch.release = function (item,touch){
			var v_, $1;
			(((v_ = identifiers[item.identifier]),delete identifiers[item.identifier], v_));
			((($1 = item.__touch__),delete item.__touch__, $1));
			return;
		};
		
		Imba.Touch.ontouchstart = function (e){
			for (var i = 0, ary = iter$(e.changedTouches), len = ary.length, t; i < len; i++) {
				t = ary[i];
				if (this.lookup(t)) { continue; };
				var touch = identifiers[t.identifier] = new this(e); // (e)
				t.__touch__ = touch;
				touches.push(touch);
				count++;
				touch.touchstart(e,t);
			};
			return this;
		};
		
		Imba.Touch.ontouchmove = function (e){
			var touch;
			for (var i = 0, ary = iter$(e.changedTouches), len = ary.length, t; i < len; i++) {
				t = ary[i];
				if (touch = this.lookup(t)) {
					touch.touchmove(e,t);
				};
			};
			
			return this;
		};
		
		Imba.Touch.ontouchend = function (e){
			var touch;
			for (var i = 0, ary = iter$(e.changedTouches), len = ary.length, t; i < len; i++) {
				t = ary[i];
				if (touch = this.lookup(t)) {
					touch.touchend(e,t);
					this.release(t,touch);
					count--;
				};
			};
			
			// e.preventDefault
			// not always supported!
			// touches = touches.filter(||)
			return this;
		};
		
		Imba.Touch.ontouchcancel = function (e){
			var touch;
			for (var i = 0, ary = iter$(e.changedTouches), len = ary.length, t; i < len; i++) {
				t = ary[i];
				if (touch = this.lookup(t)) {
					touch.touchcancel(e,t);
					this.release(t,touch);
					count--;
				};
			};
			return this;
		};
		
		Imba.Touch.onmousedown = function (e){
			return this;
		};
		
		Imba.Touch.onmousemove = function (e){
			return this;
		};
		
		Imba.Touch.onmouseup = function (e){
			return this;
		};
		
		
		
		
		Imba.Touch.prototype.phase = function(v){ return this._phase; }
		Imba.Touch.prototype.setPhase = function(v){ this._phase = v; return this; };
		
		
		Imba.Touch.prototype.active = function(v){ return this._active; }
		Imba.Touch.prototype.setActive = function(v){ this._active = v; return this; };
		
		
		Imba.Touch.prototype.event = function(v){ return this._event; }
		Imba.Touch.prototype.setEvent = function(v){ this._event = v; return this; };
		
		
		Imba.Touch.prototype.pointer = function(v){ return this._pointer; }
		Imba.Touch.prototype.setPointer = function(v){ this._pointer = v; return this; };
		
		
		Imba.Touch.prototype.target = function(v){ return this._target; }
		Imba.Touch.prototype.setTarget = function(v){ this._target = v; return this; };
		
		
		Imba.Touch.prototype.handler = function(v){ return this._handler; }
		Imba.Touch.prototype.setHandler = function(v){ this._handler = v; return this; };
		
		
		Imba.Touch.prototype.updates = function(v){ return this._updates; }
		Imba.Touch.prototype.setUpdates = function(v){ this._updates = v; return this; };
		
		
		Imba.Touch.prototype.suppress = function(v){ return this._suppress; }
		Imba.Touch.prototype.setSuppress = function(v){ this._suppress = v; return this; };
		
		
		Imba.Touch.prototype.data = function(v){ return this._data; }
		Imba.Touch.prototype.setData = function(v){ this._data = v; return this; };
		
		Imba.Touch.prototype.__bubble = {chainable: true,name: 'bubble'};
		Imba.Touch.prototype.bubble = function(v){ return v !== undefined ? (this.setBubble(v),this) : this._bubble; }
		Imba.Touch.prototype.setBubble = function(v){ this._bubble = v; return this; };
		
		
		
		Imba.Touch.prototype.gestures = function(v){ return this._gestures; }
		Imba.Touch.prototype.setGestures = function(v){ this._gestures = v; return this; };
		
		/*
			
		
			@internal
			@constructor
			*/
		
		Imba.Touch.prototype.capture = function (){
			this._captured = true;
			this._event && this._event.preventDefault();
			return this;
		};
		
		Imba.Touch.prototype.isCaptured = function (){
			return !!this._captured;
		};
		
		/*
			Extend the touch with a plugin / gesture. 
			All events (touchstart,move etc) for the touch
			will be triggered on the plugins in the order they
			are added.
			*/
		
		Imba.Touch.prototype.extend = function (plugin){
			// console.log "added gesture!!!"
			this._gestures || (this._gestures = []);
			this._gestures.push(plugin);
			return this;
		};
		
		/*
			Redirect touch to specified target. ontouchstart will always be
			called on the new target.
			@return {Number}
			*/
		
		Imba.Touch.prototype.redirect = function (target){
			this._redirect = target;
			return this;
		};
		
		/*
			Suppress the default behaviour. Will call preventDefault for
			all native events that are part of the touch.
			*/
		
		Imba.Touch.prototype.suppress = function (){
			// collision with the suppress property
			this._active = false;
			return this;
		};
		
		Imba.Touch.prototype.setSuppress = function (value){
			console.warn('Imba.Touch#suppress= is deprecated');
			this._supress = value;
			return this;
		};
		
		Imba.Touch.prototype.touchstart = function (e,t){
			this._event = e;
			this._touch = t;
			this._button = 0;
			this._x = t.clientX;
			this._y = t.clientY;
			this.began();
			if (e && this.isCaptured()) { e.preventDefault() };
			return this;
		};
		
		Imba.Touch.prototype.touchmove = function (e,t){
			this._event = e;
			this._x = t.clientX;
			this._y = t.clientY;
			this.update();
			if (e && this.isCaptured()) { e.preventDefault() };
			return this;
		};
		
		Imba.Touch.prototype.touchend = function (e,t){
			this._event = e;
			this._x = t.clientX;
			this._y = t.clientY;
			this.ended();
			
			lastNativeTouchTimeStamp = e.timeStamp;
			
			if (this._maxdr < 20) {
				var tap = new Imba.Event(e);
				tap.setType('tap');
				tap.process();
				if (tap._responder) { e.preventDefault() };
			};
			
			if (e && this.isCaptured()) {
				e.preventDefault();
			};
			
			return this;
		};
		
		Imba.Touch.prototype.touchcancel = function (e,t){
			return this.cancel();
		};
		
		Imba.Touch.prototype.mousedown = function (e,t){
			var self = this;
			self._event = e;
			self._button = e.button;
			self._x = t.clientX;
			self._y = t.clientY;
			self.began();
			
			self._mousemove = function(e) { return self.mousemove(e,e); };
			doc.addEventListener('mousemove',self._mousemove,true);
			return self;
		};
		
		Imba.Touch.prototype.mousemove = function (e,t){
			this._x = t.clientX;
			this._y = t.clientY;
			this._event = e;
			if (this.isCaptured()) { e.preventDefault() };
			this.update();
			this.move();
			return this;
		};
		
		Imba.Touch.prototype.mouseup = function (e,t){
			this._x = t.clientX;
			this._y = t.clientY;
			this.ended();
			doc.removeEventListener('mousemove',this._mousemove,true);
			this._mousemove = null;
			return this;
		};
		
		Imba.Touch.prototype.idle = function (){
			return this.update();
		};
		
		Imba.Touch.prototype.began = function (){
			this._maxdr = this._dr = 0;
			this._x0 = this._x;
			this._y0 = this._y;
			
			var dom = this.event().target;
			var node = null;
			
			this._sourceTarget = dom && tag$wrap(dom);
			
			while (dom){
				node = tag$wrap(dom);
				if (node && node.ontouchstart) {
					this._bubble = false;
					this.setTarget(node);
					this.target().ontouchstart(this);
					if (!this._bubble) { break; };
				};
				dom = dom.parentNode;
			};
			
			this._updates++;
			return this;
		};
		
		Imba.Touch.prototype.update = function (){
			var target_;
			if (!this._active) { return this };
			
			var dr = Math.sqrt(this.dx() * this.dx() + this.dy() * this.dy());
			if (dr > this._dr) { this._maxdr = dr };
			this._dr = dr;
			
			// catching a touch-redirect?!?
			if (this._redirect) {
				if (this._target && this._target.ontouchcancel) {
					this._target.ontouchcancel(this);
				};
				this.setTarget(this._redirect);
				this._redirect = null;
				if (this.target().ontouchstart) { this.target().ontouchstart(this) };
			};
			
			
			this._updates++;
			if (this._gestures) {
				for (var i = 0, ary = iter$(this._gestures), len = ary.length; i < len; i++) {
					ary[i].ontouchupdate(this);
				};
			};
			
			(target_ = this.target()) && target_.ontouchupdate  &&  target_.ontouchupdate(this);
			return this;
		};
		
		Imba.Touch.prototype.move = function (){
			var target_;
			if (!this._active) { return this };
			
			if (this._gestures) {
				for (var i = 0, ary = iter$(this._gestures), len = ary.length, g; i < len; i++) {
					g = ary[i];
					if (g.ontouchmove) { g.ontouchmove(this,this._event) };
				};
			};
			
			(target_ = this.target()) && target_.ontouchmove  &&  target_.ontouchmove(this,this._event);
			return this;
		};
		
		Imba.Touch.prototype.ended = function (){
			var target_;
			if (!this._active) { return this };
			
			this._updates++;
			
			if (this._gestures) {
				for (var i = 0, ary = iter$(this._gestures), len = ary.length; i < len; i++) {
					ary[i].ontouchend(this);
				};
			};
			
			(target_ = this.target()) && target_.ontouchend  &&  target_.ontouchend(this);
			
			return this;
		};
		
		Imba.Touch.prototype.cancel = function (){
			if (!this._cancelled) {
				this._cancelled = true;
				this.cancelled();
				if (this._mousemove) { doc.removeEventListener('mousemove',this._mousemove,true) };
			};
			return this;
		};
		
		Imba.Touch.prototype.cancelled = function (){
			var target_;
			if (!this._active) { return this };
			
			this._cancelled = true;
			this._updates++;
			
			if (this._gestures) {
				for (var i = 0, ary = iter$(this._gestures), len = ary.length, g; i < len; i++) {
					g = ary[i];
					if (g.ontouchcancel) { g.ontouchcancel(this) };
				};
			};
			
			(target_ = this.target()) && target_.ontouchcancel  &&  target_.ontouchcancel(this);
			return this;
		};
		
		/*
			The absolute distance the touch has moved from starting position 
			@return {Number}
			*/
		
		Imba.Touch.prototype.dr = function (){
			return this._dr;
		};
		
		/*
			The distance the touch has moved horizontally
			@return {Number}
			*/
		
		Imba.Touch.prototype.dx = function (){
			return this._x - this._x0;
		};
		
		/*
			The distance the touch has moved vertically
			@return {Number}
			*/
		
		Imba.Touch.prototype.dy = function (){
			return this._y - this._y0;
		};
		
		/*
			Initial horizontal position of touch
			@return {Number}
			*/
		
		Imba.Touch.prototype.x0 = function (){
			return this._x0;
		};
		
		/*
			Initial vertical position of touch
			@return {Number}
			*/
		
		Imba.Touch.prototype.y0 = function (){
			return this._y0;
		};
		
		/*
			Horizontal position of touch
			@return {Number}
			*/
		
		Imba.Touch.prototype.x = function (){
			return this._x;
		};
		
		/*
			Vertical position of touch
			@return {Number}
			*/
		
		Imba.Touch.prototype.y = function (){
			return this._y;
		};
		
		/*
			Horizontal position of touch relative to target
			@return {Number}
			*/
		
		Imba.Touch.prototype.tx = function (){
			this._targetBox || (this._targetBox = this._target.dom().getBoundingClientRect());
			return this._x - this._targetBox.left;
		};
		
		/*
			Vertical position of touch relative to target
			@return {Number}
			*/
		
		Imba.Touch.prototype.ty = function (){
			this._targetBox || (this._targetBox = this._target.dom().getBoundingClientRect());
			return this._y - this._targetBox.top;
		};
		
		/*
			Button pressed in this touch. Native touches defaults to left-click (0)
			@return {Number}
			*/
		
		Imba.Touch.prototype.button = function (){
			return this._button;
		}; // @pointer ? @pointer.button : 0
		
		Imba.Touch.prototype.sourceTarget = function (){
			return this._sourceTarget;
		};
		
		
		Imba.TouchGesture = function TouchGesture(){ };
		
		
		Imba.TouchGesture.prototype.__active = {'default': false,name: 'active'};
		Imba.TouchGesture.prototype.active = function(v){ return this._active; }
		Imba.TouchGesture.prototype.setActive = function(v){ this._active = v; return this; }
		Imba.TouchGesture.prototype._active = false;
		
		Imba.TouchGesture.prototype.ontouchstart = function (e){
			return this;
		};
		
		Imba.TouchGesture.prototype.ontouchupdate = function (e){
			return this;
		};
		
		Imba.TouchGesture.prototype.ontouchend = function (e){
			return this;
		};
		
		
		// A Touch-event is created on mousedown (always)
		// and while it exists, mousemove and mouseup will
		// be delegated to this active event.
		Imba.POINTER = new Imba.Pointer();
		Imba.POINTERS = [Imba.POINTER];
		
		
		// regular event stuff
		Imba.KEYMAP = {
			"8": 'backspace',
			"9": 'tab',
			"13": 'enter',
			"16": 'shift',
			"17": 'ctrl',
			"18": 'alt',
			"19": 'break',
			"20": 'caps',
			"27": 'esc',
			"32": 'space',
			"35": 'end',
			"36": 'home',
			"37": 'larr',
			"38": 'uarr',
			"39": 'rarr',
			"40": 'darr',
			"45": 'insert',
			"46": 'delete',
			"107": 'plus',
			"106": 'mult',
			"91": 'meta'
		};
		
		Imba.CHARMAP = {
			"%": 'modulo',
			"*": 'multiply',
			"+": 'add',
			"-": 'sub',
			"/": 'divide',
			".": 'dot'
		};
		
		/*
		Imba handles all events in the dom through a single manager,
		listening at the root of your document. If Imba finds a tag
		that listens to a certain event, the event will be wrapped 
		in an `Imba.Event`, which normalizes some of the quirks and 
		browser differences.
		
		@iname event
		*/
		
		Imba.Event = function Event(e){
			this.setEvent(e);
			this.setBubble(true);
		};
		
		/* reference to the native event */
		
		
		
		Imba.Event.prototype.event = function(v){ return this._event; }
		Imba.Event.prototype.setEvent = function(v){ this._event = v; return this; };
		
		/* reference to the native event */
		
		
		
		Imba.Event.prototype.prefix = function(v){ return this._prefix; }
		Imba.Event.prototype.setPrefix = function(v){ this._prefix = v; return this; };
		
		
		
		Imba.Event.prototype.data = function(v){ return this._data; }
		Imba.Event.prototype.setData = function(v){ this._data = v; return this; };
		
		/*
			should remove this alltogether?
			@deprecated
			*/
		
		
		
		Imba.Event.prototype.source = function(v){ return this._source; }
		Imba.Event.prototype.setSource = function(v){ this._source = v; return this; };
		
		/* A {Boolean} indicating whether the event bubbles up or not */
		
		
		Imba.Event.prototype.__bubble = {type: Boolean,chainable: true,name: 'bubble'};
		Imba.Event.prototype.bubble = function(v){ return v !== undefined ? (this.setBubble(v),this) : this._bubble; }
		Imba.Event.prototype.setBubble = function(v){ this._bubble = v; return this; };
		
		Imba.Event.wrap = function (e){
			return new this(e);
		};
		
		Imba.Event.prototype.setType = function (type){
			this._type = type;
			return this;
		};
		
		/*
			@return {String} The name of the event (case-insensitive)
			*/
		
		Imba.Event.prototype.type = function (){
			return this._type || this.event().type;
		};
		
		Imba.Event.prototype.name = function (){
			return this._name || (this._name = this.type().toLowerCase().replace(/\:/g,''));
		};
		
		// mimc getset
		Imba.Event.prototype.bubble = function (v){
			if (v != undefined) {
				this.setBubble(v);
				return this;
			};
			return this._bubble;
		};
		
		/*
			Prevents further propagation of the current event.
			@return {self}
			*/
		
		Imba.Event.prototype.halt = function (){
			this.setBubble(false);
			return this;
		};
		
		/*
			Cancel the event (if cancelable). In the case of native events it
			will call `preventDefault` on the wrapped event object.
			@return {self}
			*/
		
		Imba.Event.prototype.cancel = function (){
			if (this.event().preventDefault) { this.event().preventDefault() };
			this._cancel = true;
			return this;
		};
		
		/*
			Indicates whether or not event.cancel has been called.
		
			@return {Boolean}
			*/
		
		Imba.Event.prototype.isPrevented = function (){
			return this.event() && this.event().defaultPrevented || this._cancel;
		};
		
		/*
			A reference to the initial target of the event.
			*/
		
		Imba.Event.prototype.target = function (){
			return tag$wrap(this.event()._target || this.event().target);
		};
		
		/*
			A reference to the object responding to the event.
			*/
		
		Imba.Event.prototype.responder = function (){
			return this._responder;
		};
		
		/*
			Redirect the event to new target
			*/
		
		Imba.Event.prototype.redirect = function (node){
			this._redirect = node;
			return this;
		};
		
		/*
			Get the normalized character for KeyboardEvent/TextEvent
			@return {String}
			*/
		
		Imba.Event.prototype.keychar = function (){
			if (this.event() instanceof TextEvent) {
				return this.event().data;
			};
			
			if (this.event() instanceof KeyboardEvent) {
				var ki = this.event().keyIdentifier;
				var sym = Imba.KEYMAP[this.event().keyCode];
				
				// p 'keysym!',ki,sym
				
				if (!sym && ki.substr(0,2) == "U+") {
					sym = String.fromCharCode(parseInt(ki.substr(2),16));
				};
				return sym;
			};
			
			return null;
		};
		
		/*
			@deprecated
			*/
		
		Imba.Event.prototype.keycombo = function (){
			var sym;
			if (!(sym = this.keychar())) { return };
			sym = Imba.CHARMAP[sym] || sym;
			var combo = [],e = this.event();
			if (e.ctrlKey) { combo.push('ctrl') };
			if (e.shiftKey) { combo.push('shift') };
			if (e.altKey) { combo.push('alt') };
			if (e.metaKey) { combo.push('cmd') };
			combo.push(sym);
			return combo.join("_").toLowerCase();
		};
		
		
		Imba.Event.prototype.process = function (){
			var node;
			var meth = ("on" + (this._prefix || '') + this.name());
			var args = null;
			var domtarget = this.event()._target || this.event().target;
			// var node = <{domtarget:_responder or domtarget}>
			// need to clean up and document this behaviour
			
			var domnode = domtarget._responder || domtarget;
			// @todo need to stop infinite redirect-rules here
			
			var $1;while (domnode){
				this._redirect = null;
				if (node = tag$wrap(domnode)) { // not only tag 
					
					if ((typeof node[($1 = meth)]=='string'||node[$1] instanceof String)) {
						// should remember the receiver of the event
						meth = node[meth];
						continue; // should not continue?
					};
					
					if (node[meth] instanceof Array) {
						args = node[meth].concat(node);
						meth = args.shift();
						continue; // should not continue?
					};
					
					if (node[meth] instanceof Function) {
						this._responder || (this._responder = node);
						// should autostop bubble here?
						args ? (node[meth].apply(node,args)) : (node[meth](this,this.data()));
					};
				};
				
				// add node.nextEventResponder as a separate method here?
				if (!(this.bubble() && (domnode = (this._redirect || (node ? (node.parent()) : (domnode.parentNode)))))) {
					break;
				};
			};
			
			this.processed();
			return this;
		};
		
		
		Imba.Event.prototype.processed = function (){
			Imba.emit(Imba,'event',[this]);
			return this;
		};
		
		/*
			Return the x/left coordinate of the mouse / pointer for this event
			@return {Number} x coordinate of mouse / pointer for event
			*/
		
		Imba.Event.prototype.x = function (){
			return this.event().x;
		};
		
		/*
			Return the y/top coordinate of the mouse / pointer for this event
			@return {Number} y coordinate of mouse / pointer for event
			*/
		
		Imba.Event.prototype.y = function (){
			return this.event().y;
		};
		
		/*
			Returns a Number representing a system and implementation
			dependent numeric code identifying the unmodified value of the
			pressed key; this is usually the same as keyCode.
		
			For mouse-events, the returned value indicates which button was
			pressed on the mouse to trigger the event.
		
			@return {Number}
			*/
		
		Imba.Event.prototype.which = function (){
			return this.event().which;
		};
		
		
		/*
		
		Manager for listening to and delegating events in Imba. A single instance
		is always created by Imba (as `Imba.Events`), which handles and delegates all
		events at the very root of the document. Imba does not capture all events
		by default, so if you want to make sure exotic or custom DOMEvents are delegated
		in Imba you will need to register them in `Imba.Events.register(myCustomEventName)`
		
		@iname manager
		
		*/
		
		Imba.EventManager = function EventManager(node,pars){
			var self = this;
			if(!pars||pars.constructor !== Object) pars = {};
			var events = pars.events !== undefined ? pars.events : [];
			self.setRoot(node);
			self.setCount(0);
			self.setListeners([]);
			self.setDelegators({});
			self.setDelegator(function(e) {
				// console.log "delegating event?! {e}"
				self.delegate(e);
				return true;
			});
			
			for (var i = 0, ary = iter$(events), len = ary.length; i < len; i++) {
				self.register(ary[i]);
			};
			
			return self;
		};
		
		
		
		Imba.EventManager.prototype.root = function(v){ return this._root; }
		Imba.EventManager.prototype.setRoot = function(v){ this._root = v; return this; };
		
		
		Imba.EventManager.prototype.count = function(v){ return this._count; }
		Imba.EventManager.prototype.setCount = function(v){ this._count = v; return this; };
		
		Imba.EventManager.prototype.__enabled = {'default': false,watch: 'enabledDidSet',name: 'enabled'};
		Imba.EventManager.prototype.enabled = function(v){ return this._enabled; }
		Imba.EventManager.prototype.setEnabled = function(v){
			var a = this.enabled();
			if(v != a) { this._enabled = v; }
			if(v != a) { this.enabledDidSet && this.enabledDidSet(v,a,this.__enabled) }
			return this;
		}
		Imba.EventManager.prototype._enabled = false;
		
		
		Imba.EventManager.prototype.listeners = function(v){ return this._listeners; }
		Imba.EventManager.prototype.setListeners = function(v){ this._listeners = v; return this; };
		
		
		Imba.EventManager.prototype.delegators = function(v){ return this._delegators; }
		Imba.EventManager.prototype.setDelegators = function(v){ this._delegators = v; return this; };
		
		
		Imba.EventManager.prototype.delegator = function(v){ return this._delegator; }
		Imba.EventManager.prototype.setDelegator = function(v){ this._delegator = v; return this; };
		
		Imba.EventManager.prototype.enabledDidSet = function (bool){
			bool ? (this.onenable()) : (this.ondisable());
			return this;
		};
		
		/*
		
			Tell the current EventManager to intercept and handle event of a certain name.
			By default, Imba.Events will register interceptors for: *keydown*, *keyup*, 
			*keypress*, *textInput*, *input*, *change*, *submit*, *focusin*, *focusout*, 
			*blur*, *contextmenu*, *dblclick*, *mousewheel*, *wheel*
		
			*/
		
		Imba.EventManager.prototype.register = function (name,handler){
			if(handler === undefined) handler = true;
			if (name instanceof Array) {
				for (var i = 0, ary = iter$(name), len = ary.length; i < len; i++) {
					this.register(ary[i],handler);
				};
				return this;
			};
			
			if (this.delegators()[name]) { return this };
			// console.log("register for event {name}")
			var fn = this.delegators()[name] = handler instanceof Function ? (handler) : (this.delegator());
			if (this.enabled()) { return this.root().addEventListener(name,fn,true) };
		};
		
		Imba.EventManager.prototype.listen = function (name,handler,capture){
			if(capture === undefined) capture = true;
			this.listeners().push([name,handler,capture]);
			if (this.enabled()) { this.root().addEventListener(name,handler,capture) };
			return this;
		};
		
		Imba.EventManager.prototype.delegate = function (e){
			this.setCount(this.count() + 1);
			var event = Imba.Event.wrap(e);
			event.process();
			return this;
		};
		
		Imba.EventManager.prototype.create = function (type,target,pars){
			if(!pars||pars.constructor !== Object) pars = {};
			var data = pars.data !== undefined ? pars.data : null;
			var source = pars.source !== undefined ? pars.source : null;
			var event = Imba.Event.wrap({type: type,target: target});
			if (data) { (event.setData(data),data) };
			if (source) { (event.setSource(source),source) };
			return event;
		};
		
		// use create instead?
		Imba.EventManager.prototype.trigger = function (){
			return this.create.apply(this,arguments).process();
		};
		
		Imba.EventManager.prototype.onenable = function (){
			for (var o = this.delegators(), i = 0, keys = Object.keys(o), l = keys.length; i < l; i++){
				this.root().addEventListener(keys[i],o[keys[i]],true);
			};
			
			for (var j = 0, ary = iter$(this.listeners()), len = ary.length, item; j < len; j++) {
				item = ary[j];
				this.root().addEventListener(item[0],item[1],item[2]);
			};
			return this;
		};
		
		Imba.EventManager.prototype.ondisable = function (){
			for (var o = this.delegators(), i = 0, keys = Object.keys(o), l = keys.length; i < l; i++){
				this.root().removeEventListener(keys[i],o[keys[i]],true);
			};
			
			for (var j = 0, ary = iter$(this.listeners()), len = ary.length, item; j < len; j++) {
				item = ary[j];
				this.root().removeEventListener(item[0],item[1],item[2]);
			};
			return this;
		};
		
		
		ED = Imba.Events = new Imba.EventManager(document,{events: [
			'keydown','keyup','keypress','textInput','input','change','submit',
			'focusin','focusout','blur','contextmenu','dblclick',
			'mousewheel','wheel'
		]});
		
		// should set these up inside the Imba.Events object itself
		// so that we can have different EventManager for different roots
		
		if (hasTouchEvents) {
			Imba.Events.listen('touchstart',function(e) {
				var Events_, v_;
				(((Events_ = Imba.Events).setCount(v_ = Events_.count() + 1),v_)) - 1;
				return Imba.Touch.ontouchstart(e);
			});
			
			Imba.Events.listen('touchmove',function(e) {
				var Events_, v_;
				(((Events_ = Imba.Events).setCount(v_ = Events_.count() + 1),v_)) - 1;
				return Imba.Touch.ontouchmove(e);
			});
			
			Imba.Events.listen('touchend',function(e) {
				var Events_, v_;
				(((Events_ = Imba.Events).setCount(v_ = Events_.count() + 1),v_)) - 1;
				return Imba.Touch.ontouchend(e);
			});
			
			Imba.Events.listen('touchcancel',function(e) {
				var Events_, v_;
				(((Events_ = Imba.Events).setCount(v_ = Events_.count() + 1),v_)) - 1;
				return Imba.Touch.ontouchcancel(e);
			});
		};
		
		Imba.Events.register('click',function(e) {
			// Only for main mousebutton, no?
			if ((e.timeStamp - lastNativeTouchTimeStamp) > lastNativeTouchTimeout) {
				var tap = new Imba.Event(e);
				tap.setType('tap');
				tap.process();
				if (tap._responder) {
					return e.preventDefault();
				};
			};
			// delegate the real click event
			return Imba.Events.delegate(e);
		});
		
		Imba.Events.listen('mousedown',function(e) {
			if ((e.timeStamp - lastNativeTouchTimeStamp) > lastNativeTouchTimeout) {
				if (Imba.POINTER) { return Imba.POINTER.update(e).process() };
			};
		});
		
		// Imba.Events.listen(:mousemove) do |e|
		// 	# console.log 'mousemove',e:timeStamp
		// 	if (e:timeStamp - lastNativeTouchTimeStamp) > lastNativeTouchTimeout
		// 		Imba.POINTER.update(e).process if Imba.POINTER # .process if touch # should not happen? We process through 
		
		Imba.Events.listen('mouseup',function(e) {
			// console.log 'mouseup',e:timeStamp
			if ((e.timeStamp - lastNativeTouchTimeStamp) > lastNativeTouchTimeout) {
				if (Imba.POINTER) { return Imba.POINTER.update(e).process() };
			};
		});
		
		
		Imba.Events.register(['mousedown','mouseup']);
		return (Imba.Events.setEnabled(true),true);
	
	})()

/***/ },
/* 12 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var ImbaTag = Imba.TAGS.element;
		
		function removeNested(root,node,caret){
			// if node/nodes isa String
			// 	we need to use the caret to remove elements
			// 	for now we will simply not support this
			if (node instanceof ImbaTag) {
				root.removeChild(node);
			} else if (node instanceof Array) {
				for (var i = 0, ary = iter$(node), len = ary.length; i < len; i++) {
					removeNested(root,ary[i],caret);
				};
			} else {
				// what if this is not null?!?!?
				// take a chance and remove a text-elementng
				var next = caret ? (caret.nextSibling) : (root._dom.firstChild);
				if ((next instanceof Text) && next.textContent == node) {
					root.removeChild(next);
				} else {
					throw 'cannot remove string';
				};
			};
			
			return caret;
		};
		
		function appendNested(root,node){
			if (node instanceof ImbaTag) {
				root.appendChild(node);
			} else if (node instanceof Array) {
				for (var i = 0, ary = iter$(node), len = ary.length; i < len; i++) {
					appendNested(root,ary[i]);
				};
			} else if (node != null && node !== false) {
				root.appendChild(Imba.document().createTextNode(node));
			};
			
			return;
		};
		
		
		// insert nodes before a certain node
		// does not need to return any tail, as before
		// will still be correct there
		// before must be an actual domnode
		function insertNestedBefore(root,node,before){
			if (node instanceof ImbaTag) {
				root.insertBefore(node,before);
			} else if (node instanceof Array) {
				for (var i = 0, ary = iter$(node), len = ary.length; i < len; i++) {
					insertNestedBefore(root,ary[i],before);
				};
			} else if (node != null && node !== false) {
				root.insertBefore(Imba.document().createTextNode(node),before);
			};
			
			return before;
		};
		
		// after must be an actual domnode
		function insertNestedAfter(root,node,after){
			var before = after ? (after.nextSibling) : (root._dom.firstChild);
			
			if (before) {
				insertNestedBefore(root,node,before);
				return before.previousSibling;
			} else {
				appendNested(root,node);
				return root._dom.lastChild;
			};
		};
		
		function reconcileCollectionChanges(root,new$,old,caret){
			
			var newLen = new$.length;
			var lastNew = new$[newLen - 1];
			
			// This re-order algorithm is based on the following principle:
			// 
			// We build a "chain" which shows which items are already sorted.
			// If we're going from [1, 2, 3] -> [2, 1, 3], the tree looks like:
			//
			// 	3 ->  0 (idx)
			// 	2 -> -1 (idx)
			// 	1 -> -1 (idx)
			//
			// This tells us that we have two chains of ordered items:
			// 
			// 	(1, 3) and (2)
			// 
			// The optimal re-ordering then becomes two keep the longest chain intact,
			// and move all the other items.
			
			var newPosition = [];
			
			// The tree/graph itself
			var prevChain = [];
			// The length of the chain
			var lengthChain = [];
			
			// Keep track of the longest chain
			var maxChainLength = 0;
			var maxChainEnd = 0;
			
			for (var idx = 0, ary = iter$(old), len = ary.length, node; idx < len; idx++) {
				node = ary[idx];
				var newPos = new$.indexOf(node);
				newPosition.push(newPos);
				
				if (newPos == -1) {
					root.removeChild(node);
					prevChain.push(-1);
					lengthChain.push(-1);
					continue;
				};
				
				var prevIdx = newPosition.length - 2;
				
				// Build the chain:
				while (prevIdx >= 0){
					if (newPosition[prevIdx] == -1) {
						prevIdx--;
					} else if (newPos > newPosition[prevIdx]) {
						// Yay, we're bigger than the previous!
						break;
					} else {
						// Nope, let's walk back the chain
						prevIdx = prevChain[prevIdx];
					};
				};
				
				prevChain.push(prevIdx);
				
				var currLength = (prevIdx == -1) ? (0) : (lengthChain[prevIdx] + 1);
				
				if (currLength > maxChainLength) {
					maxChainLength = currLength;
					maxChainEnd = idx;
				};
				
				lengthChain.push(currLength);
			};
			
			var stickyNodes = [];
			
			// Now we can walk the longest chain backwards and mark them as "sticky",
			// which implies that they should not be moved
			var cursor = newPosition.length - 1;
			while (cursor >= 0){
				if (cursor == maxChainEnd && newPosition[cursor] != -1) {
					stickyNodes[newPosition[cursor]] = true;
					maxChainEnd = prevChain[maxChainEnd];
				};
				
				cursor -= 1;
			};
			
			// And let's iterate forward, but only move non-sticky nodes
			for (var idx1 = 0, ary = iter$(new$), len = ary.length; idx1 < len; idx1++) {
				if (!stickyNodes[idx1]) {
					var after = new$[idx1 - 1];
					insertNestedAfter(root,ary[idx1],(after && after._dom) || caret);
				};
			};
			
			// should trust that the last item in new list is the caret
			return lastNew && lastNew._dom || caret;
		};
		
		
		// expects a flat non-sparse array of nodes in both new and old, always
		function reconcileCollection(root,new$,old,caret){
			var k = new$.length;
			var i = k;
			var last = new$[k - 1];
			
			
			if (k == old.length && new$[0] === old[0]) {
				// running through to compare
				while (i--){
					if (new$[i] !== old[i]) { break; };
				};
			};
			
			if (i == -1) {
				return last && last._dom || caret;
			} else {
				return reconcileCollectionChanges(root,new$,old,caret);
			};
		};
		
		// the general reconciler that respects conditions etc
		// caret is the current node we want to insert things after
		function reconcileNested(root,new$,old,caret){
			
			// if new == null or new === false or new === true
			// 	if new === old
			// 		return caret
			// 	if old && new != old
			// 		removeNested(root,old,caret) if old
			// 
			// 	return caret
			
			// var skipnew = new == null or new === false or new === true
			var newIsNull = new$ == null || new$ === false;
			var oldIsNull = old == null || old === false;
			
			
			if (new$ === old) {
				// remember that the caret must be an actual dom element
				// we should instead move the actual caret? - trust
				if (newIsNull) {
					return caret;
				} else if (new$ && new$._dom) {
					return new$._dom;
				} else {
					return caret ? (caret.nextSibling) : (root._dom.firstChild);
				};
			} else if (new$ instanceof Array) {
				if (old instanceof Array) {
					if (new$.static || old.static) {
						// if the static is not nested - we could get a hint from compiler
						// and just skip it
						if (new$.static == old.static) {
							for (var i = 0, ary = iter$(new$), len = ary.length; i < len; i++) {
								// this is where we could do the triple equal directly
								caret = reconcileNested(root,ary[i],old[i],caret);
							};
							return caret;
						} else {
							removeNested(root,old,caret);
						};
						
						// if they are not the same we continue through to the default
					} else {
						return reconcileCollection(root,new$,old,caret);
					};
				} else if (old instanceof ImbaTag) {
					root.removeChild(old);
				} else if (!oldIsNull) {
					// old was a string-like object?
					root.removeChild(caret ? (caret.nextSibling) : (root._dom.firstChild));
				};
				
				return insertNestedAfter(root,new$,caret);
				// remove old
			} else if (new$ instanceof ImbaTag) {
				if (!oldIsNull) { removeNested(root,old,caret) };
				insertNestedAfter(root,new$,caret);
				return new$;
			} else if (newIsNull) {
				if (!oldIsNull) { removeNested(root,old,caret) };
				return caret;
			} else {
				// if old did not exist we need to add a new directly
				var nextNode;
				// if old was array or imbatag we need to remove it and then add
				if (old instanceof Array) {
					removeNested(root,old,caret);
				} else if (old instanceof ImbaTag) {
					root.removeChild(old);
				} else if (!oldIsNull) {
					// ...
					nextNode = caret ? (caret.nextSibling) : (root._dom.firstChild);
					if ((nextNode instanceof Text) && nextNode.textContent != new$) {
						nextNode.textContent = new$;
						return nextNode;
					};
				};
				
				// now add the textnode
				return insertNestedAfter(root,new$,caret);
			};
		};
		
		
		return tag$.extendTag('htmlelement', function(tag){
			
			tag.prototype.setChildren = function (new$,typ){
				var old = this._children;
				// var isArray = nodes isa Array
				if (new$ === old) {
					return this;
				};
				
				if (!old) {
					this.empty();
					appendNested(this,new$);
				} else if (typ == 2) {
					return this;
				} else if (typ == 1) {
					// here we _know _that it is an array with the same shape
					// every time
					var caret = null;
					for (var i = 0, ary = iter$(new$), len = ary.length; i < len; i++) {
						// prev = old[i]
						caret = reconcileNested(this,ary[i],old[i],caret);
					};
				} else if (typ == 3) {
					// this is possibly fully dynamic. It often is
					// but the old or new could be static while the other is not
					// this is not handled now
					// what if it was previously a static array? edgecase - but must work
					if (new$ instanceof ImbaTag) {
						this.empty();
						this.appendChild(new$);
					} else if (new$ instanceof Array) {
						if (old instanceof Array) {
							// is this not the same as setting staticChildren now but with the
							reconcileCollection(this,new$,old,null);
						} else {
							this.empty();
							appendNested(this,new$);
						};
					} else {
						this.setText(new$);
						return this;
					};
				} else if ((new$ instanceof Array) && (old instanceof Array)) {
					reconcileCollection(this,new$,old,null);
				} else {
					this.empty();
					appendNested(this,new$);
				};
				
				this._children = new$;
				return this;
			};
			
			
			// only ever called with array as argument
			tag.prototype.setStaticChildren = function (new$){
				var old = this._children;
				
				var caret = null;
				for (var i = 0, ary = iter$(new$), len = ary.length; i < len; i++) {
					// prev = old[i]
					caret = reconcileNested(this,ary[i],old[i],caret);
				};
				
				this._children = new$;
				return this;
			};
			
			tag.prototype.content = function (){
				return this._content || this.children().toArray();
			};
			
			tag.prototype.setText = function (text){
				if (text != this._children) {
					this._children = text;
					this.dom().textContent = text == null || text === false ? ('') : (text);
				};
				return this;
			};
		});
	
	})()

/***/ },
/* 13 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		/*
		The special syntax for selectors in Imba creates Imba.Selector
		instances.
		*/
		
		Imba.Selector = function Selector(sel,scope,nodes){
			
			this._query = sel instanceof Imba.Selector ? (sel.query()) : (sel);
			this._context = scope;
			
			if (nodes) {
				for (var i = 0, ary = iter$(nodes), len = ary.length, res = []; i < len; i++) {
					res.push(tag$wrap(ary[i]));
				};
				this._nodes = res;
			};
			
			this._lazy = !nodes;
			return this;
		};
		
		Imba.Selector.one = function (sel,scope){
			var el = (scope || Imba.document()).querySelector(sel);
			return el && tag$wrap(el) || null;
		};
		
		Imba.Selector.all = function (sel,scope){
			return new Imba.Selector(sel,scope);
		};
		
		
		
		Imba.Selector.prototype.query = function(v){ return this._query; }
		Imba.Selector.prototype.setQuery = function(v){ this._query = v; return this; };
		
		Imba.Selector.prototype.reload = function (){
			this._nodes = null;
			return this;
		};
		
		Imba.Selector.prototype.scope = function (){
			var ctx;
			if (this._scope) { return this._scope };
			if (!(ctx = this._context)) { return Imba.document() };
			return this._scope = ctx.toScope ? (ctx.toScope()) : (ctx);
		};
		
		/*
			@returns {Imba.Tag} first node matching this selector
			*/
		
		Imba.Selector.prototype.first = function (){
			if (this._lazy) { return tag$wrap(this._first || (this._first = this.scope().querySelector(this.query()))) } else {
				return this.nodes()[0];
			};
		};
		
		/*
			@returns {Imba.Tag} last node matching this selector
			*/
		
		Imba.Selector.prototype.last = function (){
			return this.nodes()[this._nodes.length - 1];
		};
		
		/*
			@returns [Imba.Tag] all nodes matching this selector
			*/
		
		Imba.Selector.prototype.nodes = function (){
			if (this._nodes) { return this._nodes };
			var items = this.scope().querySelectorAll(this.query());
			for (var i = 0, ary = iter$(items), len = ary.length, res = []; i < len; i++) {
				res.push(tag$wrap(ary[i]));
			};
			this._nodes = res;
			this._lazy = false;
			return this._nodes;
		};
		
		/*
			The number of nodes matching this selector
			*/
		
		Imba.Selector.prototype.count = function (){
			return this.nodes().length;
		};
		
		Imba.Selector.prototype.len = function (){
			return this.nodes().length;
		};
		
		/*
			@todo Add support for block or selector?
			*/
		
		Imba.Selector.prototype.some = function (){
			return this.count() >= 1;
		};
		
		/*
			Get node at index
			*/
		
		Imba.Selector.prototype.at = function (idx){
			return this.nodes()[idx];
		};
		
		/*
			Loop through nodes
			*/
		
		Imba.Selector.prototype.forEach = function (block){
			this.nodes().forEach(block);
			return this;
		};
		
		/*
			Map nodes
			*/
		
		Imba.Selector.prototype.map = function (block){
			return this.nodes().map(block);
		};
		
		/*
			Returns a plain array containing nodes. Implicitly called
			when iterating over a selector in Imba `(node for node in $(selector))`
			*/
		
		Imba.Selector.prototype.toArray = function (){
			return this.nodes();
		};
		
		// Get the first element that matches the selector, 
		// beginning at the current element and progressing up through the DOM tree
		Imba.Selector.prototype.closest = function (sel){
			// seems strange that we alter this selector?
			this._nodes = this.map(function(node) { return node.closest(sel); });
			return this;
		};
		
		// Get the siblings of each element in the set of matched elements, 
		// optionally filtered by a selector.
		// TODO remove duplicates?
		Imba.Selector.prototype.siblings = function (sel){
			this._nodes = this.map(function(node) { return node.siblings(sel); });
			return this;
		};
		
		// Get the descendants of each element in the current set of matched 
		// elements, filtered by a selector.
		Imba.Selector.prototype.find = function (sel){
			this._nodes = this.__query__(sel.query(),this.nodes());
			return this;
		};
		
		Imba.Selector.prototype.reject = function (blk){
			return this.filter(blk,false);
		};
		
		/*
			Filter the nodes in selector by a function or other selector
			*/
		
		Imba.Selector.prototype.filter = function (blk,bool){
			if(bool === undefined) bool = true;
			var fn = (blk instanceof Function) && blk || function(n) { return n.matches(blk); };
			var ary = this.nodes().filter(function(n) { return fn(n) == bool; });
			// if we want to return a new selector for this, we should do that for
			// others as well
			return new Imba.Selector("",this._scope,ary);
		};
		
		Imba.Selector.prototype.__query__ = function (query,contexts){
			var nodes = [];
			var i = 0;
			var l = contexts.length;
			
			while (i < l){
				nodes.push.apply(nodes,contexts[i++].querySelectorAll(query));
			};
			return nodes;
		};
		
		Imba.Selector.prototype.__matches__ = function (){
			return true;
		};
		
		/*
			Add specified flag to all nodes in selector
			*/
		
		Imba.Selector.prototype.flag = function (flag){
			return this.forEach(function(n) { return n.flag(flag); });
		};
		
		/*
			Remove specified flag from all nodes in selector
			*/
		
		Imba.Selector.prototype.unflag = function (flag){
			return this.forEach(function(n) { return n.unflag(flag); });
		};
		
		
		// def Imba.querySelectorAll
		q$ = function(sel,scope) { return new Imba.Selector(sel,scope); };
		
		// def Imba.Selector.one
		q$$ = function(sel,scope) {
			var el = (scope || Imba.document()).querySelector(sel);
			return el && tag$wrap(el) || null;
		};
		
		
		// extending tags with query-methods
		// must be a better way to reopen classes
		return tag$.extendTag('element', function(tag){
			tag.prototype.querySelectorAll = function (q){
				return this._dom.querySelectorAll(q);
			};
			tag.prototype.querySelector = function (q){
				return this._dom.querySelector(q);
			};
			
			// should be moved to Imba.Tag instead?
			// or we should implement all of them here
			tag.prototype.find = function (sel){
				return new Imba.Selector(sel,this);
			};
		});
		
	
	})()

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		var util;
		IMDEBUG = true;
		
		// wtf er alt dette?
		IM = {};
		IM.NEWLINE = '\n';
		IM.CHAR = 0;
		IM.WORD_START = 1;
		IM.WORD_END = 2;
		IM.PUNCTUATION_START = 3;
		IM.PUNCTUATION_END = 4;
		IM.SUB_WORD_START = 5;
		IM.SUB_WORD_END = 6;
		IM.LINE_START = 7;
		IM.LINE_END = 8;
		IM.EMPTY_LINE = 9;
		
		IM.FS = __webpack_require__(15);
		
		var SourceMap = __webpack_require__(16);
		
		// if global:require
		var Region = __webpack_require__(27).Region;
		
		__webpack_require__(28);
		
		__webpack_require__(35);
		__webpack_require__(36);
		__webpack_require__(37);
		
		__webpack_require__(38);
		__webpack_require__(39);
		__webpack_require__(45);
		
		var Highlighter = __webpack_require__(29).Highlighter;
		var ImbacWorker = __webpack_require__(46).ImbacWorker;
		
		IM.worker = function (){
			return this._worker || (this._worker = new ImbacWorker());
		};
		
		module.exports.util = util = __webpack_require__(34);
		// nodes
		__webpack_require__(47);
		
		
		function worker(){
			return IM.worker();
		}; exports.worker = worker;
		
		module.exports.SourceMap = SourceMap;
		module.exports.Region = Region;
		return module.exports.Highlighter = Highlighter;
	
	})()

/***/ },
/* 15 */
/***/ function(module, exports) {

	(function(){
		// externs;
		function save(path,content,encoding,cb){
			if(cb==undefined && typeof encoding == 'function') cb = encoding,encoding = 'utf-8';
			if(encoding==undefined) encoding = 'utf-8';
			console.log('save',path,content,encoding);
			
			return xr.post(path,{body: content}).then(function() {
				console.log('responded');
				return cb && cb(arguments);
			});
		}; exports.save = save;
		
		function readFileAsync(path,encoding,cb){
			if(cb==undefined && typeof encoding == 'function') cb = encoding,encoding = 'utf-8';
			if(encoding==undefined) encoding = 'utf-8';
			console.log('save',path,encoding);
			
			return xr.get(path).then(function(res) {
				console.log('responded',res);
				cb && cb(arguments);
				return res;
			});
		}; exports.readFileAsync = readFileAsync;; return readFileAsync;
	
	})()

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(17).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(23).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(26).SourceNode;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var base64VLQ = __webpack_require__(18);
	  var util = __webpack_require__(20);
	  var ArraySet = __webpack_require__(21).ArraySet;
	  var MappingList = __webpack_require__(22).MappingList;
	
	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }
	
	  SourceMapGenerator.prototype._version = 3;
	
	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };
	
	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }
	
	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };
	
	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }
	
	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };
	
	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);
	
	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }
	
	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }
	
	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }
	
	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };
	
	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }
	
	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };
	
	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();
	
	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }
	
	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }
	
	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }
	
	      }, this);
	      this._sources = newSources;
	      this._names = newNames;
	
	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };
	
	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };
	
	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;
	      var nameIdx;
	      var sourceIdx;
	
	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];
	
	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }
	
	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;
	
	        if (mapping.source != null) {
	          sourceIdx = this._sources.indexOf(mapping.source);
	          result += base64VLQ.encode(sourceIdx - previousSource);
	          previousSource = sourceIdx;
	
	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;
	
	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;
	
	          if (mapping.name != null) {
	            nameIdx = this._names.indexOf(mapping.name);
	            result += base64VLQ.encode(nameIdx - previousName);
	            previousName = nameIdx;
	          }
	        }
	      }
	
	      return result;
	    };
	
	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };
	
	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }
	
	      return map;
	    };
	
	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };
	
	  exports.SourceMapGenerator = SourceMapGenerator;
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	{
	  var base64 = __webpack_require__(19);
	
	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011
	
	  var VLQ_BASE_SHIFT = 5;
	
	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }
	
	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }
	
	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;
	
	    var vlq = toVLQSigned(aValue);
	
	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);
	
	    return encoded;
	  };
	
	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;
	
	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }
	
	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }
	
	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);
	
	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };
	}


/***/ },
/* 19 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	
	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + number);
	  };
	
	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'
	
	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'
	
	    var zero = 48;     // '0'
	    var nine = 57;     // '9'
	
	    var plus = 43;     // '+'
	    var slash = 47;    // '/'
	
	    var littleOffset = 26;
	    var numberOffset = 52;
	
	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }
	
	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }
	
	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }
	
	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }
	
	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }
	
	    // Invalid base64 digit.
	    return -1;
	  };
	}


/***/ },
/* 20 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;
	
	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;
	
	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;
	
	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;
	
	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = exports.isAbsolute(path);
	
	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');
	
	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }
	
	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;
	
	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }
	
	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }
	
	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }
	
	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }
	
	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	
	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;
	
	  exports.isAbsolute = function (aPath) {
	    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	  };
	
	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	
	    aRoot = aRoot.replace(/\/$/, '');
	
	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }
	
	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }
	
	      ++level;
	    }
	
	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;
	
	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;
	
	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;
	
	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByOriginalPositions = compareByOriginalPositions;
	
	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }
	
	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	
	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }
	
	    if (aStr1 > aStr2) {
	      return 1;
	    }
	
	    return -1;
	  }
	
	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return strcmp(mappingA.name, mappingB.name);
	  }
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(20);
	
	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }
	
	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };
	
	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };
	
	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var sStr = util.toSetString(aStr);
	    var isDuplicate = this._set.hasOwnProperty(sStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[sStr] = idx;
	    }
	  };
	
	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    var sStr = util.toSetString(aStr);
	    return this._set.hasOwnProperty(sStr);
	  };
	
	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    var sStr = util.toSetString(aStr);
	    if (this._set.hasOwnProperty(sStr)) {
	      return this._set[sStr];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };
	
	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };
	
	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };
	
	  exports.ArraySet = ArraySet;
	}


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(20);
	
	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }
	
	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }
	
	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };
	
	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };
	
	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };
	
	  exports.MappingList = MappingList;
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(20);
	  var binarySearch = __webpack_require__(24);
	  var ArraySet = __webpack_require__(21).ArraySet;
	  var base64VLQ = __webpack_require__(18);
	  var quickSort = __webpack_require__(25).quickSort;
	
	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }
	
	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;
	
	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.
	
	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }
	
	      return this.__generatedMappings;
	    }
	  });
	
	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }
	
	      return this.__originalMappings;
	    }
	  });
	
	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };
	
	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;
	
	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	
	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	
	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }
	
	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };
	
	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');
	
	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };
	
	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);
	
	      var mappings = [];
	
	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	
	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;
	
	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });
	
	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;
	
	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });
	
	            mapping = this._originalMappings[++index];
	          }
	        }
	      }
	
	      return mappings;
	    };
	
	  exports.SourceMapConsumer = SourceMapConsumer;
	
	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);
	
	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }
	
	    sources = sources
	      // Some source maps produce relative source paths like "./foo.js" instead of
	      // "foo.js".  Normalize these first so that future comparisons will succeed.
	      // See bugzil.la/1090768.
	      .map(util.normalize)
	      // Always ensure that absolute sources are internally stored relative to
	      // the source root, if the source root is absolute. Not doing this would
	      // be particularly problematic when the source root is a prefix of the
	      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	      .map(function (source) {
	        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	          ? util.relative(sourceRoot, source)
	          : source;
	      });
	
	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);
	
	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }
	
	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	
	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);
	
	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;
	
	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.
	
	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];
	
	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;
	
	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;
	
	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }
	
	          destOriginalMappings.push(destMapping);
	        }
	
	        destGeneratedMappings.push(destMapping);
	      }
	
	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	
	      return smc;
	    };
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;
	
	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });
	
	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;
	
	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;
	
	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);
	
	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }
	
	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }
	
	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }
	
	            cachedSegments[str] = segment;
	          }
	
	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;
	
	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];
	
	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;
	
	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;
	
	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }
	
	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }
	
	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;
	
	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };
	
	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.
	
	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }
	
	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };
	
	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];
	
	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];
	
	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }
	
	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };
	
	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };
	
	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );
	
	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];
	
	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }
	
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };
	
	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };
	
	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }
	
	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }
	
	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }
	
	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }
	
	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }
	
	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };
	
	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);
	
	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };
	
	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );
	
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	
	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }
	
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };
	
	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	
	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');
	
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }
	
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	
	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');
	
	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;
	
	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }
	
	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;
	
	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      }
	      return sources;
	    }
	  });
	
	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };
	
	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }
	
	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];
	
	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }
	
	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };
	
	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };
	
	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	
	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };
	
	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	
	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }
	
	      return {
	        line: null,
	        column: null
	      };
	    };
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[j];
	
	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);
	
	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	
	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.generatedColumn +
	              (section.generatedOffset.generatedLine === mapping.generatedLine
	              ? section.generatedOffset.generatedColumn - 1
	              : 0),
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };
	
	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        }
	      }
	
	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };
	
	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	}


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;
	
	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }
	
	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }
	
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }
	
	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }
	
	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }
	
	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }
	
	    return index;
	  };
	}


/***/ },
/* 25 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.
	
	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }
	
	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }
	
	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.
	
	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.
	
	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;
	
	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];
	
	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }
	
	      swap(ary, i + 1, j);
	      var q = i + 1;
	
	      // (2) Recurse on each half.
	
	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }
	
	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };
	}


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var SourceMapGenerator = __webpack_require__(17).SourceMapGenerator;
	  var util = __webpack_require__(20);
	
	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;
	
	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;
	
	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";
	
	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }
	
	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();
	
	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };
	
	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	
	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;
	
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }
	
	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });
	
	      return node;
	
	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };
	
	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };
	
	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };
	
	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };
	
	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };
	
	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };
	
	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };
	
	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }
	
	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };
	
	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };
	
	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });
	
	    return { code: generated.code, map: map };
	  };
	
	  exports.SourceNode = SourceNode;
	}


/***/ },
/* 27 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		
		function Region(a,b,root,view){
			this._a = a;
			this._b = b;
			this._root = root;
			this._view = view;
			return this;
		};
		
		exports.Region = Region; // export class 
		
		
		Region.prototype.a = function(v){ return this._a; }
		Region.prototype.setA = function(v){ this._a = v; return this; };
		
		
		Region.prototype.b = function(v){ return this._b; }
		Region.prototype.setB = function(v){ this._b = v; return this; };
		
		
		Region.prototype.view = function(v){ return this._view; }
		Region.prototype.setView = function(v){ this._view = v; return this; };
		
		
		Region.prototype.root = function(v){ return this._root; }
		Region.prototype.setRoot = function(v){ this._root = v; return this; };
		
		// remove root from region
		
		Region.normalize = function (val,view){
			var line_;
			if (val instanceof Region) { return val };
			if (val instanceof Array) { return new Region(val[0],val[1],null,view) };
			if ((typeof val=='number'||val instanceof Number)) { return new Region(val,val,null,view) };
			
			if ((val instanceof Object) && (typeof (line_ = val.line)=='number'||line_ instanceof Number)) {
				var lines = view._buffer.lines();
				var loc = 0;
				for (var i = 0, ary = iter$(lines), len = ary.length; i < len; i++) {
					if (i < (val.line - 1)) {
						loc += ary[i].length + 1;
					} else {
						break;
					};
				};
				
				loc += (val.column || 0);
				return new Region(loc,loc,null,view);
			};
		};
		
		
		Region.prototype.start = function (){
			return Math.min(this._a,this._b);
		};
		
		Region.prototype.end = function (){
			return Math.max(this._a,this._b);
		};
		
		Region.prototype.clone = function (ad,bd){
			if(ad === undefined) ad = 0;
			if(bd === undefined) bd = 0;
			return new Region(this._a + ad,this._b + bd,this._root,this._view);
		};
		
		Region.prototype.contains = function (rel){
			if (rel instanceof Region) {
				return this.start() <= rel.start() && this.end() >= rel.end();
			} else if ((typeof rel=='number'||rel instanceof Number)) {
				return this.start() <= rel && this.end() >= rel;
			};
		};
		
		Region.prototype.adjust = function (rel,add){
			if(add === undefined) add = true;
			if (rel.end() < this.start()) {
				add ? (this.move(rel.size())) : (this.move(-rel.size()));
			};
			return this;
		};
		
		Region.prototype.intersects = function (rel){
			// is this decent?
			rel = Region.normalize(rel);
			var a = Math.max(this.start(),rel.start());
			var b = Math.min(this.end(),rel.end());
			return b >= a;
		};
		
		Region.prototype.relativeTo = function (rel){
			// could use move instead
			return new Region(this._a - rel.start(),this._b - rel.start(),this._root,this._view);
		};
		
		Region.prototype.intersection = function (region){
			return this;
		};
		
		Region.prototype.equals = function (region){
			return this.start() == region.start() && this.end() == region.end();
		};
		
		Region.prototype.same = function (region){
			return region && region.a() == this.a() && region.b() == this.b();
		};
		
		Region.prototype.size = function (){
			return this.end() - this.start();
		};
		
		Region.prototype.move = function (num){
			if(num === undefined) num = 1;
			this._a += num;
			this._b += num;
			return this;
		};
		
		Region.prototype.collapsed = function (){
			return this.size() == 0;
		};
		
		Region.prototype.reverse = function (){
			var a = this._a,b = this._b;
			this._a = b;
			this._b = a;
			return this;
		};
		
		Region.prototype.reversed = function (){
			return this._a > this._b;
		};
		
		Region.prototype.normalize = function (){
			var a = this.start();
			var b = this.end();
			this._a = a;
			this._b = b;
			return this;
		};
		
		Region.prototype.collapse = function (forward){
			if(forward === undefined) forward = true;
			if (forward) {
				this._a = this._b = this.end();
				// @a = @b
			} else {
				this._b = this._a;
				this._a = this._b = this.start();
			};
			return this;
		};
		
		// expand to closest /n
		Region.prototype.expand = function (atStart,atEnd){
			if (this.b() < this.a()) {
				this._b += atStart;
				this._a += atEnd;
			} else {
				this._a += atStart;
				this._b += atEnd;
			};
			return this;
		};
		
		Region.prototype.text = function (){
			return this.view().substr(this);
		};
		
		Region.prototype.toString = function (){
			return ("[" + (this._a) + "," + (this._b) + "]");
		};
		
		Region.prototype.insert = function (node){
			return this;
		};
		
		Region.prototype.nodes = function (includeEnds){
			if(includeEnds === undefined) includeEnds = true;
			return this.view().nodesInRegion(this,includeEnds);
		};
		
		Region.prototype.prevNode = function (query){
			var nodes = this.nodes(false);
			var node = nodes.lft;
			if ((query instanceof Imba.Selector) || (typeof query=='string'||query instanceof String)) {
				var $1;while (node){
					if (node.matches(query)) { return node };
					node = ($1 = node) && $1.isLast  &&  $1.isLast() ? (node.parent()) : (null);
				};
				return null;
			};
			return node;
		};
		
		Region.prototype.nextNode = function (query){
			var nodes = this.nodes(false);
			var node = nodes.rgt;
			if ((query instanceof Imba.Selector) || (typeof query=='string'||query instanceof String)) {
				var $1;while (node){
					if (node.matches(query)) { return node };
					node = ($1 = node) && $1.isFirst  &&  $1.isFirst() ? (node.parent()) : (null);
				};
				return null;
			};
			return node;
		};
		
		Region.prototype.scope = function (query){
			var nodes = this.nodes(false);
			var node;
			if (nodes.lft) {
				node = nodes.lft.up(query);
			} else if (nodes.rgt) {
				node || (node = nodes.rgt.up(query));
			} else if (nodes[0]) {
				node || (node = nodes[0].node.closest(query));
			};
			return node;
		};
		
		Region.prototype.buffer = function (){
			return this._root.code();
		};
		
		Region.prototype.startAtLine = function (){
			this.normalize();
			var buffer = this.buffer();
			var a = this.start();
			
			if (buffer[a] == '\n' && this.size() == 0) {
				a--; // if we are at the end of a line
			};
			
			while (a >= 0 && buffer[a] != '\n'){
				a--;
			};
			this._a = a;
			return this;
		};
		
		Region.prototype.endAtLine = function (){
			this.normalize();
			var buffer = this.buffer();
			var b = (this.end() - 1);
			while (b >= 0 && buffer[b] && buffer[b] != '\n'){
				b++;
			};
			this._b = b;
			return this;
		};
		
		Region.prototype.cell = function (){
			return this.view()._buffer.locToCell(this.a());
		};
		
		Region.prototype.row = function (){
			return this.cell()[0];
		};
		
		Region.prototype.col = function (){
			return this.cell()[1];
		};
		
		Region.prototype.peekbehind = function (len){
			if(len === undefined) len = 1;
			return len == 1 ? (this.buffer()[this.start() - 1]) : (this.buffer().substring(this.start() - len,this.start()));
		};
		
		Region.prototype.peekahead = function (len){
			if(len === undefined) len = 1;
			return len == 1 ? (this.buffer()[this.end()]) : (this.buffer().substr(this.end(),len));
		};
		
		Region.prototype.indent = function (){
			return this.clone().startAtLine().text().match(/^\n?(\t*)/)[1];
		};
		
		Region.prototype.peek = function (before,after){
			if(before === undefined) before = 0;
			if(after === undefined) after = 0;
			return this.clone(before,after).text();
		};
		
		Region.prototype.lloc = function (){
			return {startLine: 0,startCol: 2};
		};
		
		Region.prototype.toJSON = function (){
			return [this.a(),this.b()];
		};
		return Region;
	
	})()

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		
		var KEYWORDS = 'var if elif else for while def in isa while until switch when then return class tag let do and or prop attr in prop'.split(' ');
		var OPS = '+ - * / = ++ -- == === != !== > < >= <= & && | || or . : ?'.split(' ');
		
		var WHITESPACE = /^[ \t\n]+$/;
		
		IM.HL = {
			newline: "<b class='_imnewline'>\n</b>",
			space: function(m) { return ("<b class='_imspace'>" + m + "</b>"); },
			tab: function(m) { return new Array(m.length + 1).join("<b class='_imtab'>\t</b>"); }
		};
		
		
		var Region = __webpack_require__(27).Region;
		var Highlighter = __webpack_require__(29).Highlighter;
		
		var MATCHERS = {
			keyword: function(v) { return KEYWORDS.indexOf(v) >= 0; },
			self: /^(this|self)$/,
			const: function(v) { return (/^[A-Z][\w\_]*$/).test(v); },
			ivar: function(v) { return (/^@[\w\_]+$/).test(v); },
			bool: function(v) { return (/^(true|yes|false|no|null|undefined)$/).test(v); },
			identifier: /^[\$a-z_][\w\_\$]*(\-[\$\w\_]+)*$/,
			float: /^\d+\.\d+$/,
			int: /^\d+$/,
			comment: /^\#([ \t][^\n]*)?$/
		};
		
		var MODES = {
			all: Object.keys(MATCHERS)
		};
		
		
			
			String.prototype.repeat = function (num){
				return new Array(num + 1).join(this);
			};
			
			String.prototype.ins = function (str,region){
				var text = this.toString();
				if (region == 'append') {
					return text + str;
				} else if (region == 'prepend') {
					return "" + str + text;
				} else if (region instanceof Region) {
					return text.substr(0,region.start()) + str + text.slice(region.end());
				};
			};
		
		
		function isWhitespace(str){
			return WHITESPACE.test(str);
		}; exports.isWhitespace = isWhitespace;
		
		IM.num = function (val){
			return tag$.$imnum().flag('number').setText(val).end();
		};
		
		IM.tab = function (){
			return tag$.$imtab().setText('\t').end();
		};
		
		IM.newline = function (){
			return tag$.$imnewline().setText('\n').end();
		};
		
		IM.op = function (val){
			return tag$.$imop().flag('op').setText(val).end();
		};
		
		
		IM.tok = function (val){
			if (val && val._dom) { return val };
			if (val.match(WHITESPACE)) { return IM.parseWhitespace(val) };
			if (OPS.indexOf(val) >= 0) { return IM.op(val) }; // should use token directly
			// return IM.num(val) if val.match(/^\d+(\.\d+)?$/) # should use token directly
			return tag$.$imtok().setText(val).end();
		};
		
		IM.raw = function (val,ctx){
			return tag$.$imraw().setRaw(val).end();
		};
		
		IM.isWhitespace = function (val){
			return WHITESPACE.test(val);
		};
		
		IM.isOp = function (val){
			return OPS.indexOf(val) >= 0;
		};
		
		IM.parseWhitespace = function (text,rich){
			if(rich === undefined) rich = true;
			var hl = IM.HL;
			
			text = text.replace(/(\n|[ ]+|[\t]+)/g,function(m,l) {
				if (l == '\n') {
					return hl.newline || '\n';
				} else if (l[0] == ' ') {
					return hl.space instanceof Function ? (hl.space(l)) : (l);
				} else if (l[0] == '\t') {
					return hl.tab instanceof Function ? (hl.tab(l)) : (l);
				};
			});
			
			if (rich && text.indexOf('<') >= 0) {
				return tag$.$imfragment().setContent(text,0).end();
			};
			
			return text;
		};
		
		IM.identify = function (val,mode){
			if(mode === undefined) mode = 'all';
			var rules = MODES[mode];
			var res;
			for (var i = 0, ary = iter$(rules), len = ary.length, name; i < len; i++) {
				name = ary[i];
				var rule = MATCHERS[name];
				
				if (rule instanceof Function) {
					res = rule(val,mode);
				} else if (rule instanceof RegExp) {
					res = rule.test(val);
				};
				
				if (res) {
					return res === true ? (name) : (res);
				};
			};
			
			return null;
		};
		
		IM.parse = function (code,context){
			// decide if full?
			// console.log "parse code {code:length} {code.substr(0,20)}"
			if (typeof code != 'string') { return code };
			
			if (WHITESPACE.test(code)) {
				return IM.parseWhitespace(code,false);
			};
			
			var ws = code.match(/^([ \t]*)([^]*?)([ \t]*)$/) || ['','',code,''];
			var hl;
			
			if (ws[1] || ws[3]) {
				code = ws[2];
			};
			
			var id = IM.identify(code);
			
			if (id) {
				var typ = 'span';
				var cls = Highlighter.Mapping[id] || id; // this is the issue, no?
				
				if (cls instanceof Array) {
					typ = cls[0];
					cls = cls[1];
				};
				
				if (!cls.match(/\b_[\w]/)) { cls = '_imtok ' + cls };
				// console.log 'parsed as type',id,cls
				hl = '<' + typ + ' class="' + cls + '">' + code + '</' + typ + '>';
			};
			
			if (!hl) {
				hl = Highlighter.highlight(code);
			};
			
			if (ws) {
				hl = IM.parseWhitespace(ws[1],false) + hl + IM.parseWhitespace(ws[3],false);
			};
			if (hl) {
				return hl;
			} else {
				return code;
			};
		};
		
		
		return IM.textNodes = function (root,mark){
			// console.time('textNodes2')
			if(mark === undefined) mark = false;
			root = root._dom || root;
			var el;
			var nodes = [];
			var pos = 0;
			var walk = document.createTreeWalker(root,NodeFilter.SHOW_TEXT,null,false);
			
			while (el = walk.nextNode()){
				if (mark) {
					var len = el.length;
					el._loc = pos;
					pos += len;
				};
				nodes.push(el);
			};
			return nodes;
		};
	
	})()

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		// var imbac = global.Imbac
		var Lexer = __webpack_require__(30).Lexer;
		
		var util = __webpack_require__(34);
		
		var NODETYPE = 'b';
		var KEYWORDS = [
			'null','this',
			'delete','typeof','in','instanceof',
			'throw','break','continue','debugger',
			'if','else','switch','for','while','do','try','catch','finally',
			'class','extends','super','return',
			'undefined','then','unless','until','loop','of','by',
			'when','def','tag','do','elif','begin','var','let','self','await','import',
			'and','or','is','isnt','not','isa','case','nil'
		];
		
		var classes = {
			'+': '_imop op add math',
			'++': '_imop op incr math',
			'--': '_imop op decr math',
			'-': '_imop op sub math',
			'=': '_imop op eq',
			'/': '_imop op div math',
			'*': '_imop op mult math',
			'?': '_imop op ternary',
			',': '_imop op comma',
			':': '_imop op colon',
			'.': '_imop op dot',
			'.:': '_imop op cdot',
			'!': '_imop op unary',
			'?.': '_imop op qdot',
			'[': '_imopen sb sbl',
			']': '_imclose sb sbr',
			'(': '_imopen rb rbl',
			')': '_imclose rb rbr',
			'{': '_imopen cb cbl',
			'}': '_imclose cb cbr',
			'#': '_imop op hash',
			'call_start': '_imopen call rb rbl',
			'call_end': '_imclose call rb rbr',
			'tag_start': '_imopen tag_open',
			'tag_end': '_imclose tag_close',
			
			'true': '_imbool true',
			'yes': '_imbool true',
			'false': '_imbool false',
			'no': '_imbool false',
			
			'{{': '_imopen',
			'}}': '_imclose',
			
			'"': 'doublequote',
			"'": 'singlequote',
			
			'regex': '_imregex regex',
			'identifier': '_imtok _imidentifier identifier',
			
			'compound_assign': 'op assign compound',
			'str': '_imstr string',
			'num': '_imnum number',
			'string': '_imstr string',
			'number': '_imnum number',
			'math': '_imop op math',
			'unary': '_imop op unary',
			'forin': 'keyword in',
			'forof': 'keyword of',
			'own': 'keyword own',
			'compare': '_imop op compare',
			'herecomment': '_herecomment',
			'relation': 'keyword relation',
			'export': 'keyword export',
			'global': 'keyword global',
			'extern': 'keyword global',
			'extend': 'keyword extend',
			'require': 'keyword require',
			'from': 'keyword from',
			'logic': 'keyword logic',
			'post_if': 'keyword if post_if',
			'post_for': 'keyword for post_for',
			'prop': 'keyword prop',
			'attr': 'keyword attr',
			
			'selector_start': '_imopen _imselopen selector_start',
			'selector_end': '_imclose _imselclose selector_end',
			'index_start': '_imopen index_start',
			'index_end': '_imclose index_end',
			'block_param_start': '_imopen',
			'block_param_end': '_imclose',
			
			'string_start': '_imstrstart string_start',
			'string_end': '_imstrend string_end',
			'neostring': '_imtok _imneostring'
		};
		
		var INTERPOLATING = '_imistring';
		
		var OPEN = {
			'tag_start': '_imtagnode tagnode',
			'call_start': '_imparens call',
			'selector_start': '_imsel selector',
			'string_start': '_imistring',
			'index_start': 'index',
			'block_param_start': '_impair _imblockparams',
			// 'indent': '_indent'
			'(': '_imparens paren',
			'{{': '_imiexpr',
			'{': '_imcurly curly',
			'[': '_imsquare square',
			'("': '_imistring'
		};
		
		
		
		var CLOSE = {
			'tag_end': 'tag',
			'call_end': '_imparens call',
			'string_end': '_imistring',
			'selector_end': 'sel',
			'index_end': 'index',
			'block_param_end': '_impair _imblockparams',
			'}}': '_imiexpr',
			')': 'paren',
			']': 'square',
			'}': 'curly',
			'")': 'string'
		};
		
		var OPS = '+ - * / = ++ -- == === != !== > < >= <= & && | || or . : ?'.split(' ');
		
		var hlo = {
			newline: "<b class='_imnewline'>\n</b>",
			space: function(m) { return ("<b class='_imspace'>" + m + "</b>"); },
			tab: function(m) { return new Array(m.length + 1).join("<b class='_imtab'>\t</b>"); }
		};
		
		function Stack(){
			this._stack = [];
			return this;
		};
		
		Stack.prototype.push = function (val){
			this._stack.push(val);
			this._current = val;
			return this;
		};
		
		Stack.prototype.pop = function (){
			var len = this._stack.pop();
			this._current = this._stack[len - 1];
			return this;
		};
		
		Stack.prototype.toString = function (){
			return this._current;
		};
		
		function Token(type,value,line,loc,len){
			this._type = type;
			this._value = value;
			this._meta = null;
			this._line = line || 0;
			this._col = -1;
			this._loc = loc || 0;
			this._len = len || 0;
			this.generated = false;
			this.newLine = false;
			this.spaced = false;
			return this;
		};
		exports.Token = Token; // export class 
		Token.prototype.type = function (){
			return this._type;
		};
		
		Token.prototype.value = function (){
			return this._value;
		};
		
		Token.prototype.loc = function (){
			return this._loc;
		};
		
		Token.prototype.len = function (){
			return this._len;
		};
		
		
		
		function Highlighter(code,tokens,ast,o){
			var hl_;
			if(o === undefined) o = {};
			this._code = code;
			this._tokens = tokens;
			this._ast = ast;
			
			o.render || (o.render = {});
			o.hl || (o.hl = {});
			(hl_ = o.hl).newline || (hl_.newline = '<b class="_n">\n</b>');
			this._options = o;
			
			this._options.nextVarCounter || (this._options.nextVarCounter = 0);
			this._varRefs = {};
			
			if (o.mode == 'full' && !ast) {
				this._ast = Imbac.parse(this._tokens,{});
			};
			
			return this;
		};
		
		exports.Highlighter = Highlighter; // export class 
		Highlighter.Mapping = classes;
		
		Highlighter.logger = function (){
			return VIEW.logger();
		};
		
		Highlighter.tokenize = function (code,o){
			// console.log 'tokenize using local lexer'
			if(o === undefined) o = {};
			if (global.Imbac) {
				return Imbac.tokenize(code,o);
			};
			
			this._lexer || (this._lexer = new Lexer());
			this._lexer.reset();
			return this._lexer.tokenize(code,o);
		};
		
		Highlighter.reclassify = function (domnode,type,token,newCode,oldCode){
			
			type = type.toLowerCase();
			// console.log 'reclassify node as type',domnode,type,token
			var cls = IM.Types[type] || Imba.TAGS[("im" + type)] || IM.Types.token;
			
			var node = tag$wrap(domnode);
			
			if (node instanceof cls) {
				return node.reuse(token,newCode,oldCode);
			};
			
			if (cls) {
				node = new cls(domnode).setup(token,newCode,oldCode);
			};
			
			return node;
		};
		
		
		Highlighter.nestTokens = function (tokens,offset){
			var pairing = {
				'TAG_START': 'TAG_END',
				'SELECTOR_START': 'SELECTOR_END',
				'CALL_START': 'CALL_END',
				'INDEX_START': 'INDEX_END',
				'STRING_START': 'STRING_END',
				'BLOCK_PARAM_START': 'BLOCK_PARAM_END',
				'{{': '}}',
				'{': '}',
				'[': ']',
				'(': ')'
			};
			
			var naming = {
				'TAG_START': 'tagnode',
				'SELECTOR_START': 'selector',
				'STRING_START': 'istring',
				'CALL_START': 'parens',
				'INDEX_START': 'square',
				'BLOCK_PARAM_START': 'blockparams',
				'{{': 'iexpr',
				'{': 'curly',
				'[': 'square',
				'(': 'parens'
			};
			
			var idx = 0;
			
			var root = {
				_loc: 0,
				_offset: 0,
				_children: []
			};
			
			var stack = [root];
			var ends = [];
			var offset = 0;
			
			var loc,val,typ,ctx,tok;
			
			while (tok = tokens[idx++]){
				loc = tok._loc;
				val = tok._value;
				typ = tok._type;
				
				// normalizing because we dont rewrite tokens (should start with that)
				if (typ == 'IDENTIFIER' && (val == 'prop' || val == 'attr')) { typ = tok._type = 'KEYWORD' }; // not always
				if (typ == 'INDEX_START') { typ = tok._type = '[' };
				if (typ == 'INDEX_END') { typ = tok._type = ']' };
				if (typ == 'CALL_START') { typ = tok._type = '(' };
				if (typ == 'CALL_END') { typ = tok._type = ')' };
				
				ctx = stack[stack.length - 1];
				
				loc -= ctx._offset;
				// offset relative to context
				var closer = pairing[typ];
				
				if (closer) {
					var group = new Token(naming[typ],'',-1,loc);
					group._offset = ctx._offset + loc;
					offset += loc;
					group._children = [];
					ends.push(closer);
					stack.push(group);
					ctx._children.push(group);
					ctx = group;
				};
				
				tok._loc -= ctx._offset;
				
				// update length at all times
				if (tok._len >= 1) {
					ctx._children.push(tok);
					ctx._len = tok._loc + tok._len;
				};
				
				if (ends[ends.length - 1] == typ) {
					ends.pop();
					ctx._len = tok._loc + tok._len;
					stack.pop();
					// offset -= ctx.@offset
				};
			};
			
			// console.log 'children here',root.@children
			return root._children;
		};
		
		Highlighter.normalizeTokens = function (code,tokens,offset){
			if(offset === undefined) offset = 0;
			var idx = 0;
			var caret = 0;
			var new$ = [];
			var tok,next,typ,val;
			var loc = 0;
			
			var stack = new Stack();
			
			var ws = function() {
				var newtok = null;
				
				while (loc > caret){
					var chr = code[caret];
					if (chr == '\t') {
						newtok = new Token('tab',chr,-1,caret,1);
					} else if (chr == '\n') {
						newtok = new Token('newline',chr,-1,caret,1);
					} else if (chr == ';') {
						newtok = new Token('semicolon',chr,-1,caret,1);
					} else if (chr == ' ') {
						if (newtok && newtok._type == 'whitespace') {
							newtok._value += ' ';
							newtok._len += 1;
							caret++;
							continue;
						};
						newtok = new Token('whitespace',chr,-1,caret,1);
					} else if (chr == '#') {
						var startloc = caret;
						var comment = '';
						while (caret < loc && code[caret] != '\n'){
							comment += code[caret];
							caret++;
						};
						new$.push(new Token('comment',comment,-1,startloc,comment.length));
						continue;
					} else {
						newtok = null;
					};
					
					caret++;
					if (newtok) { new$.push(newtok) };
				};
				return;
			};
			
			var skip = ['TERMINATOR','INDENT','OUTDENT',' ',' \t'];
			
			while (tok = tokens[idx++]){
				next = tokens[idx];
				loc = tok._loc;
				val = tok._value;
				typ = tok._type;
				
				if (typ == '#' && next && next._type == 'IDENTIFIER') {
					next._type = 'IDREF';
				};
				
				if (typ == '(' && val == '("') {
					stack.push(val);
				};
				
				if (skip.indexOf(typ) >= 0) { continue; };
				
				if (loc > caret) { ws() };
				caret = tok._loc + tok._len;
				new$.push(tok);
			};
			
			// move to the end to possibly parse more whitespace
			loc = code.length;
			ws();
			// now nest the tokens
			new$ = this.nestTokens(new$);
			return new$;
		};
		
		Highlighter.whitespaceToTokens = function (str){
			var tok;
			var tokens = [];
			var caret = 0;
			var len = str.length;
			
			while (len > caret){
				var loc = caret;
				var chr = str[caret++];
				if (chr == '\t') {
					tokens.push(tok = new Token('tab',chr,-1,loc,1));
				} else if (chr == '\n') {
					tokens.push(tok = new Token('newline',chr,-1,loc,1));
				} else if (chr == ' ') {
					if (tok && tok._type == 'whitespace') {
						tok._value += ' ';
						tok._len += 1;
						continue;
					};
					tokens.push(tok = new Token('whitespace',chr,-1,loc,1));
				};
			};
			
			return tokens;
		};
		
		Highlighter.reparse = function (o){
			
			var $1;
			if (o instanceof Element) {
				var el = tag$wrap(o);
				if (el) { ($1 = el) && $1.mutated  &&  $1.mutated() };
				return;
			};
			
			var nodes = o.nodes;
			var code = o.code;
			var tokens = o.tokens;
			// should use a global logger-instance
			this.logger().groupCollapsed('reparse %s',JSON.stringify(code));
			
			if (util.isWhitespace(code) && !tokens) {
				console.log('using whitespaceToTokens');
				tokens = this.whitespaceToTokens(code);
			};
			// logger.log nodes.slice
			// big hack - adding a space at the end to close up selectors
			// should rather drop inline and let the parser pair up loose ends?
			if (!tokens) {
				tokens = this.tokenize(code + ' ',{inline: true,silent: true,rewrite: false});
				tokens = this.normalizeTokens(code,tokens);
				this.logger().log(tokens.slice());
			};
			
			this.logger().log(nodes.slice());
			this.applyTokens(code,tokens,nodes,o.nested,o.parent);
			this.logger().groupEnd();
			return;
		};
		
		Highlighter.applyTokens = function (code,tokens,nodes,nested,parent){
			// what about len and loc for inner nodes? Should this be set already?
			
			var self = this;
			var node;
			var prevNode;
			
			var addNode = function(nodes,index,after) {
				self.logger().log('addNode',index);
				var el = document.createElement(NODETYPE);
				
				if (after) {
					if (after.nextSibling) {
						after.parentNode.insertBefore(el,after.nextSibling);
					} else if (after.parentNode) {
						after.parentNode.appendChild(el);
					};
				} else if (parent) {
					parent.appendChild(el);
				};
				
				nodes.splice(index,0,el);
				return el;
			};
			
			var removeNode = function(nodes,index) {
				self.logger().log('removeNode',index);
				var el = nodes[index];
				if (el && el.parentNode) {
					el.parentNode.removeChild(el);
				};
				return nodes.splice(index,1);
			};
			
			// loop through to set the locations of the nodes
			var nloc = 0;
			for (var i = 0, ary = iter$(nodes), len = ary.length, node1; i < len; i++) {
				node1 = ary[i];
				node1._loc = nloc;
				nloc += (node1._len = node1.textContent.length);
			};
			
			for (var i = 0, ary = iter$(tokens), len = ary.length, tok; i < len; i++) {
				tok = ary[i];
				node = nodes[i];
				var tloc = tok._loc;
				nloc = node && node._loc;
				
				while (node && node._len == 0){
					self.logger().log('remove node because it is empty',node);
					removeNode(nodes,i);
					node = nodes[i];
				};
				
				if (!node) {
					// need to insert new node here - 
					node = addNode(nodes,i,prevNode);
				} else if (nloc > tloc) {
					node = addNode(nodes,i,prevNode);
				} else if (tloc > nloc) {
					removeNode(nodes,i);
					node = nodes[i];
				};
				
				// need to insert new node here - 
				if (!node) { node = addNode(nodes,i,prevNode) };
				
				if (tok._type == 'STRING' && tok._value.match(/\§{3}/)) {
					if (nested) {
						nested.pop(); // this is the node
						prevNode = node;
						continue;
					};
					
					// want to make sure it is a placeholder for the right thing
				};
				
				var cval = code.substr(tloc,tok._len);
				var cprev = node.textContent;
				var element = self.reclassify(node,tok._type,tok,cval,cprev);
				
				if (tok._children) {
					var cnodes = node.children;
					if (cnodes.length && cnodes.length == node.childNodes.length) {
						self.logger().log('reuse the cnodes(!)',cnodes);
						// otherwise we should remove the textNodes?
						// convert to array
						cnodes = Array.prototype.slice.call(cnodes);
					} else {
						self.logger().log('wrong length');
						for (var j = 0, items = iter$(node.childNodes), len_ = items.length; j < len_; j++) {
							self.logger().log(items[j]);
						};
						// see if previous value is the same?!
						node.innerHTML = '';
						cnodes = [];
					};
					
					// let o =
					// 	code: cval
					// 	nodes: cnodes
					// 	tokens: tok.@children # already parsed
					// 	nested: nested
					// 	parent: node
					
					self.applyTokens(cval,tok._children,cnodes,nested,node);
				} else if (cprev != cval) {
					node.textContent = cval; // tok.@value
					element.reparsed(cval,cprev);
				};
				
				prevNode = node;
				// tok.@len
			};
			
			// loop through tokens? not sure it works due to the issues with whitespace?
			
			// remove excess original nodes
			while (nodes.length > tokens.length){
				node = nodes.pop();
				if (node.parentNode) { node.parentNode.removeChild(node) };
				// node.orphanize
			};
			return self;
		};
		
		// should later be able to rehighlight the text / nodes directly instead
		// probably more efficient
		Highlighter.highlight = function (code,o){
			// first try to parse etc?
			// could highlight single words as well
			if(o === undefined) o = {};
			o.hl || (o.hl = hlo);
			var tokens = o.tokens || null;
			
			if (!tokens) {
				try {
					// sure we dont want to rewrite anything now?
					if (true) { console.time('tokenize') };
					if (o.mode == 'full') {
						tokens = this.tokenize(code,{});
					} else {
						tokens = this.tokenize(code,{inline: true,silent: true,rewrite: false});
					};
					if (true) { console.timeEnd('tokenize') };
				} catch (e) {
					if (e._options) { tokens = e._options.tokens };
				};
			};
			
			var hl = new this(code,tokens,null,o);
			return hl.process();
		};
		
		
		
		Highlighter.prototype.options = function(v){ return this._options; }
		Highlighter.prototype.setOptions = function(v){ this._options = v; return this; };
		
		Highlighter.prototype.varRef = function (variable){
			var $1;
			var i = this._options.nested;
			var pfx = i ? ('i') : ('');
			return this._varRefs[($1 = variable._ref)] || (this._varRefs[$1] = (pfx + this._options.nextVarCounter++));
		};
		
		Highlighter.prototype.parseWhitespace = function (text){
			// parsing comments
			var self = this;
			var hl = this._options.hl;
			var comments = [];
			
			text = text.replace(/(\#)([^\n]*)/g,function(m,s,q) {
				if (self._options.render.comment) {
					m = self._options.render.comment('comment',m);
				};
				var nr = comments.push(("<" + NODETYPE + " class='_im _imcomment'>" + m + "</" + NODETYPE + ">"));
				return ("$" + (nr - 1) + "$");
			});
			
			text = text.replace(/(\n|[ ]+|[\t]+)/g,function(m,l) {
				if (l == '\n') {
					return hl.newline || '\n';
				} else if (l[0] == ' ') {
					return hl.space instanceof Function ? (hl.space(l)) : (l);
				} else if (l[0] == '\t') {
					return hl.tab instanceof Function ? (hl.tab(l)) : (l);
				};
			});
			
			if (comments.length) {
				text = text.replace(/\$(\d+)\$/g,function(m,nr) {
					return comments[parseInt(nr)];
				});
			};
			return text;
		};
		
		Highlighter.prototype.process = function (){
			var tok;
			var o = this.options();
			
			var str = this._code;
			var pos = this._tokens.length;
			
			var stack = [];
			var depth = 0;
			var context = null;
			
			var push = function(ctx) {
				stack.push(ctx);
				depth = stack.length;
				return context = stack[depth - 1];
			};
			
			var pop = function(ctx) {
				stack.pop();
				depth = stack.length;
				return context = stack[depth - 1];
			};
			
			if (this._ast && this._ast.analyze) {
				try {
					this._ast.analyze({});
				} catch (e) {
					null;
				};
			};
			
			var res = "";
			pos = 0;
			var caret = 0;
			
			var open,close;
			
			while (tok = this._tokens[pos++]){
				var next = this._tokens[pos];
				
				if (close) {
					if (!(o.inner && depth == 1)) { res += ("</" + NODETYPE + ">") };
					close = null;
					pop();
				};
				
				var typ = tok._type.toLowerCase();
				var loc = tok._loc;
				var val = tok._value;
				var len = tok._len; // or tok.@value:length
				var meta = tok._meta;
				var attrs = '';
				
				if (loc > caret) {
					var add = str.substring(caret,loc);
					if (context != INTERPOLATING) { add = this.parseWhitespace(add) };
					res += add;
					caret = loc;
				};
				
				close = CLOSE[typ];
				
				if (open = OPEN[typ]) {
					// open = OPEN[val] || open
					push(open);
					if (!(o.inner && depth == 1)) { res += ("<" + NODETYPE + " class='" + open + "'>") };
				};
				
				if (len == 0 || typ == 'terminator' || typ == 'indent' || typ == 'outdent') {
					continue;
				};
				
				if (tok._col == -1 && tok._loc <= 0) {
					continue;
				};
				
				var node = NODETYPE;
				var content = str.substr(loc,len);
				// temporary workaround until we redefine require as an identifier
				if (typ == 'const' && content == 'require') {
					typ = 'require';
				};
				
				
				var cls = classes[typ] || typ;
				
				if (cls instanceof Array) {
					node = cls[0];
					cls = cls[1];
				};
				
				cls = cls.split(" ");
				
				if (KEYWORDS.indexOf(typ) >= 0) {
					cls.unshift('keyword');
				};
				
				caret = loc + len;
				
				if (typ == 'identifier') {
					if (content[0] == '#') {
						cls.push('idref');
					};
					
					if (meta) {
						if (meta.type == 'ACCESS') { cls.push('access') };
					};
					
					if (content == 'log') {
						cls.push('log');
					};
				};
				
				if (tok._variable) {
					
					cls.push('lvar');
					var ref = this.varRef(tok._variable);
					attrs += (" eref='v" + ref + "'");
					// cls.push("ref-"+ref)
				};
				
				if (typ == 'herecomment') {
					var end = ("<" + NODETYPE + ">###</" + NODETYPE + ">");
					content = end + content.slice(3,-3) + end;
				};
				
				if (typ == 'string') {
					if (content.match(/^['"]?\.?\.\//)) { cls.push('pathname') };
				};
				
				var clstr = cls.join(" ");
				if (!clstr.match(/\b\_/)) { clstr = '_imtok ' + clstr };
				res += ("<" + node + " class='" + clstr + "'") + attrs + ">" + content + ("</" + node + ">");
			};
			
			// close after?
			if (close) {
				res += ("</" + NODETYPE + ">");
				close = null;
			};
			
			if (caret < str.length - 1) {
				add = str.slice(caret);
				if (context != INTERPOLATING) { add = this.parseWhitespace(add) };
				res += add;
			};
			
			if (this._tokens.length == 0) {
				res = this._code;
			};
			
			return res;
		};
		return Highlighter;
	
	})()
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// helper for subclassing
		function subclass$(obj,sup) {
			for (var k in sup) {
				if (sup.hasOwnProperty(k)) obj[k] = sup[k];
			};
			// obj.__super__ = sup;
			obj.prototype = Object.create(sup.prototype);
			obj.__super__ = obj.prototype.__super__ = sup.prototype;
			obj.prototype.initialize = obj.prototype.constructor = obj;
		};
		
		var ALL_KEYWORDS;
		
		var T = __webpack_require__(31);
		var Token = T.Token;
		
		var rw = __webpack_require__(32);
		var Rewriter = rw.Rewriter;
		var INVERSES = rw.INVERSES;
		
		var K = 0;
		
		var ERR = __webpack_require__(33);
		
		// Constants
		// ---------
		
		// Keywords that Imba shares in common with JavaScript.
		var JS_KEYWORDS = [
			'true','false','null','this',
			'delete','typeof','in','instanceof',
			'throw','break','continue','debugger',
			'if','else','switch','for','while','do','try','catch','finally',
			'class','extends','super','return'
		];
		
		// new can be used as a keyword in imba, since object initing is done through
		// MyObject.new. new is a very useful varname.
		
		// We want to treat return like any regular call for now
		// Must be careful to throw the exceptions in AST, since the parser
		// wont
		
		// Imba-only keywords. var should move to JS_Keywords
		// some words (like tokid) should be context-specific
		var IMBA_KEYWORDS = [
			'undefined','then','unless','until','loop','of','by',
			'when','def','tag','do','elif','begin','var','let','self','await','import'
		];
		
		var IMBA_CONTEXTUAL_KEYWORDS = ['extend','static','local','export','global','prop'];
		
		var IMBA_ALIAS_MAP = {
			'and': '&&',
			'or': '||',
			'is': '==',
			'isnt': '!=',
			'not': '!',
			'yes': 'true',
			'no': 'false',
			'isa': 'instanceof',
			'case': 'switch',
			'nil': 'null'
		};
		
		var IMBA_ALIASES = Object.keys(IMBA_ALIAS_MAP);
		IMBA_KEYWORDS = IMBA_KEYWORDS.concat(IMBA_ALIASES);
		
		// FixedArray for performance
		// var ALL_KEYWORDS = JS_KEYWORDS.concat(IMBA_KEYWORDS)
		module.exports.ALL_KEYWORDS = ALL_KEYWORDS = [
			'true','false','null','this',
			'delete','typeof','in','instanceof',
			'throw','break','continue','debugger',
			'if','else','switch','for','while','do','try','catch','finally',
			'class','extends','super','return',
			'undefined','then','unless','until','loop','of','by',
			'when','def','tag','do','elif','begin','var','let','self','await','import',
			'and','or','is','isnt','not','yes','no','isa','case','nil'
		];
		
		// The list of keywords that are reserved by JavaScript, but not used, or are
		// used by Imba internally. We throw an error when these are encountered,
		// to avoid having a JavaScript error at runtime.  # 'var', 'let', - not inside here
		var RESERVED = ['case','default','function','void','with','const','enum','native'];
		var STRICT_RESERVED = ['case','function','void','const'];
		
		// The superset of both JavaScript keywords and reserved words, none of which may
		// be used as identifiers or properties.
		var JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED);
		
		var METHOD_IDENTIFIER = /^((([\x23]?[\$A-Za-z_\x7f-\uffff][$\-\w\x7f-\uffff]*)([\=]?))|(<=>|\|(?![\|=])))/;
		// removed ~=|~| |&(?![&=])
		
		// Token matching regexes.
		// added hyphens to identifiers now - to test
		var IDENTIFIER = /^((\$|@@|@|\#)[\wA-Za-z_\-\x7f-\uffff][$\w\x7f-\uffff]*(\-[$\w\x7f-\uffff]+)*|[$A-Za-z_][$\w\x7f-\uffff]*(\-[$\w\x7f-\uffff]+)*)([^\n\S]*:(?![\*\=:$\w\x7f-\uffff]))?/;
		
		var OBJECT_KEY = /^((\$|@@|@|)[$A-Za-z_\x7f-\uffff\-][$\w\x7f-\uffff\-]*)([^\n\S\s]*:(?![\*\=:$\w\x7f-\uffff]))/;
		
		var TAG = /^(\<|%)(?=[A-Za-z\#\.\{\@\>])/;
		
		var TAG_TYPE = /^(\w[\w\d]*:)?(\w[\w\d]*)(-[\w\d]+)*/;
		var TAG_ID = /^#((\w[\w\d]*)(-[\w\d]+)*)/;
		
		var TAG_ATTR = /^([\.\:]?[\w\_]+([\-\:][\w]+)*)(\s)*\=/;
		
		var SELECTOR = /^([%\$]{1,2})([\(\w\#\.\[])/;
		var SELECTOR_PART = /^(\#|\.|:|::)?([\w]+(\-[\w]+)*)/;
		var SELECTOR_COMBINATOR = /^ (\+|\>|\~)*\s*(?=[\w\.\#\:\{\*\[])/;
		
		var SELECTOR_PSEUDO_CLASS = /^(::?)([\w]+(\-[\w]+)*)/;
		var SELECTOR_ATTR_OP = /^(\$=|\~=|\^=|\*=|\|=|=|\!=)/;
		var SELECTOR_ATTR = /^\[([\w\_\-]+)(\$=|\~=|\^=|\*=|\|=|=|\!=)/;
		
		var SYMBOL = /^\:((([\*\@$\w\x7f-\uffff]+)+([\-\\/\\\:][\w\x7f-\uffff]+)*)|==|\<=\>|\[\]|\[\]\=|\*|[\\/,\\])/;
		
		
		var NUMBER = /^0x[\da-f]+|^0b[01]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;
		
		var HEREDOC = /^("""|''')([\s\S]*?)(?:\n[^\n\S]*)?\1/;
		
		var OPERATOR = /^(?:[-=]=>|===|->|!==|[-+*\/%<>&|^!?=]=|=<|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\?\:|\.{2,3}|\*(?=[a-zA-Z\_]))/;
		
		// FIXME splat should only be allowed when the previous thing is spaced or inside call?
		
		var WHITESPACE = /^[^\n\S]+/;
		
		var COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)/;
		// COMMENT    = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)|^(?:\s*(#\s.*|#\s*$))+/
		var INLINE_COMMENT = /^(\s*)(#[ \t\!](.*)|#[ \t]?(?=\n|$))+/;
		
		var CODE = /^[-=]=>/;
		
		var MULTI_DENT = /^(?:\n[^\n\S]*)+/;
		
		var SIMPLESTR = /^'[^\\']*(?:\\.[^\\']*)*'/;
		
		var JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;
		
		// Regex-matching-regexes.
		var REGEX = /^(\/(?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/)([imgy]{0,4})(?!\w)/;
		
		var HEREGEX = /^\/{3}([\s\S]+?)\/{3}([imgy]{0,4})(?!\w)/;
		
		var HEREGEX_OMIT = /\s+(?:#.*)?/g;
		
		// Token cleaning regexes.
		var MULTILINER = /\n/g;
		
		var HEREDOC_INDENT = /\n+([^\n\S]*)/g;
		
		var HEREDOC_ILLEGAL = /\*\//;
		
		// expensive?
		var LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;
		
		var TRAILING_SPACES = /\s+$/;
		
		var CONST_IDENTIFIER = /^[A-Z]/;
		
		var ARGVAR = /^\$\d$/;
		
		// Compound assignment tokens.
		var COMPOUND_ASSIGN = ['-=','+=','/=','*=','%=','||=','&&=','?=','<<=','>>=','>>>=','&=','^=','|=','=<'];
		
		// Unary tokens.
		var UNARY = ['!','~','NEW','TYPEOF','DELETE'];
		
		// Logical tokens.
		var LOGIC = ['&&','||','&','|','^'];
		
		// Bit-shifting tokens.
		var SHIFT = ['<<','>>','>>>'];
		
		// Comparison tokens.
		var COMPARE = ['===','!==','==','!=','<','>','<=','>=','===','!=='];
		
		// Overideable methods
		var OP_METHODS = ['<=>','<<','..'];
		
		// Mathematical tokens.
		var MATH = ['*','/','%','∪','∩','√'];
		
		// Relational tokens that are negatable with `not` prefix.
		var RELATION = ['IN','OF','INSTANCEOF','ISA'];
		
		// Boolean tokens.
		var BOOL = ['TRUE','FALSE','NULL','UNDEFINED'];
		
		// Our list is shorter, due to sans-parentheses method calls.
		var NOT_REGEX = ['NUMBER','REGEX','BOOL','TRUE','FALSE','++','--',']'];
		
		// If the previous token is not spaced, there are more preceding tokens that
		// force a division parse:
		var NOT_SPACED_REGEX = ['NUMBER','REGEX','BOOL','TRUE','FALSE','++','--',']',')','}','THIS','SELF','IDENTIFIER','STRING'];
		
		// Tokens which could legitimately be invoked or indexed. An opening
		// parentheses or bracket following these tokens will be recorded as the start
		// of a function invocation or indexing operation.
		// really?!
		
		var UNFINISHED = ['\\','.','?.','?:','UNARY','MATH','+','-','SHIFT','RELATION','COMPARE','LOGIC','COMPOUND_ASSIGN','THROW','EXTENDS'];
		
		// } should not be callable anymore!!! '}', '::',
		var CALLABLE = ['IDENTIFIER','STRING','REGEX',')',']','THIS','SUPER','TAG_END','IVAR','GVAR','SELF','CONST','NEW','ARGVAR','SYMBOL','RETURN'];
		// var INDEXABLE = CALLABLE.concat 'NUMBER', 'BOOL', 'TAG_SELECTOR', 'IDREF', 'ARGUMENTS','}' # are booleans indexable? really?
		// optimize for FixedArray
		var INDEXABLE = [
			'IDENTIFIER','STRING','REGEX',')',']','THIS','SUPER','TAG_END','IVAR','GVAR','SELF','CONST','NEW','ARGVAR','SYMBOL','RETURN',
			'NUMBER','BOOL','TAG_SELECTOR','IDREF','ARGUMENTS','}','TAG_TYPE'
		];
		
		var GLOBAL_IDENTIFIERS = ['global','exports','require'];
		
		// Tokens that, when immediately preceding a `WHEN`, indicate that the `WHEN`
		// occurs at the start of a line. We disambiguate these from trailing whens to
		// avoid an ambiguity in the grammar.
		var LINE_BREAK = ['INDENT','OUTDENT','TERMINATOR'];
		
		
		function LexerError(message,file,line){
			this.message = message;
			this.file = file;
			this.line = line;
			return this;
		};
		subclass$(LexerError,SyntaxError);
		exports.LexerError = LexerError; // export class 
		
		
		
		function last(array,back){
			if(back === undefined) back = 0;
			return array[array.length - back - 1];
		};
		
		function count(str,substr){
			return str.split(substr).length - 1;
		};
		
		function repeatString(str,times){
			var res = '';
			while (times > 0){
				if (times % 2 == 1) {
					res += str;
				};
				str += str;
				times >>= 1;
			};
			return res;
		};
		
		var tT = T.typ;
		var tV = T.val;
		var tTs = T.setTyp;
		var tVs = T.setVal;
		
		// The Lexer class reads a stream of Imba and divvies it up into tokidged
		// tokens. Some potential ambiguity in the grammar has been avoided by
		// pushing some extra smarts into the Lexer.
		
		// Based on the original lexer.coffee from CoffeeScript
		function Lexer(){
			this.reset();
			this;
		};
		
		exports.Lexer = Lexer; // export class 
		Lexer.prototype.reset = function (){
			this._code = null;
			this._chunk = null; // The remainder of the source code.
			this._opts = null;
			
			this._indent = 0; // The current indentation level.
			this._indebt = 0; // The over-indentation at the current level.
			this._outdebt = 0; // The under-outdentation at the current level.
			
			this._indents = []; // The stack of all current indentation levels.
			this._ends = []; // The stack for pairing up tokens.
			this._contexts = []; // suplements @ends
			this._scopes = [];
			this._nextScope = null; // the scope to add on the next indent
			// should rather make it like a statemachine that moves from CLASS_DEF to CLASS_BODY etc
			// Things should compile differently when you are in a CLASS_BODY than when in a DEF_BODY++
			
			this._tokens = []; // Stream of parsed tokens in the form `['TYPE', value, line]`.
			this._seenFor = false;
			this._loc = 0;
			this._locOffset = 0;
			
			this._end = null;
			this._char = null;
			this._bridge = null;
			this._last = null;
			this._lastTyp = '';
			this._lastVal = null;
			return this;
		};
		
		Lexer.prototype.jisonBridge = function (jison){
			return this._bridge = {
				lex: T.lex,
				setInput: function(tokens) {
					this.tokens = tokens;
					return this.pos = 0;
				},
				
				upcomingInput: function() { return ""; }
			};
		};
		
		
		Lexer.prototype.tokenize = function (code,o){
			
			if(o === undefined) o = {};
			if (code.length == 0) {
				return [];
			};
			
			if (!o.inline) {
				if (WHITESPACE.test(code)) {
					code = ("\n" + code);
					if (code.match(/^\s*$/g)) { return [] };
				};
				
				code = code.replace(/\r/g,'').replace(/[\t ]+$/g,'');
			};
			
			this._last = null;
			this._lastTyp = null;
			this._lastVal = null;
			
			this._code = code;
			this._opts = o;
			this._locOffset = o.loc || 0;
			// add a reference to the options object
			o._tokens = this._tokens;
			// what about col here?
			
			// @indent  = 0 # The current indentation level.
			// @indebt  = 0 # The over-indentation at the current level.
			// @outdebt = 0 # The under-outdentation at the current level.
			// @indents = [] # The stack of all current indentation levels.
			// @ends    = [] # The stack for pairing up tokens.
			// @tokens  = [] # Stream of parsed tokens in the form `['TYPE', value, line]`.
			// @char = nil
			
			if (o.profile) { console.time("tokenize:lexer") };
			this.parse(code);
			if (!o.inline) this.closeIndentation();
			if (!o.silent && this._ends.length) {
				this.error(("missing " + (this._ends.pop())));
			};
			
			if (o.profile) { console.timeEnd("tokenize:lexer") };
			if (o.rewrite == false || o.norewrite) { return this._tokens };
			return new Rewriter().rewrite(this._tokens,o);
		};
		
		Lexer.prototype.parse = function (code){
			var i = 0;
			var pi = 0;
			
			while (this._chunk = code.slice(i)){
				this._loc = this._locOffset + i;
				pi = (this._end == 'TAG' && this.tagDefContextToken()) || (this._inTag && this.tagContextToken()) || this.basicContext();
				i += pi;
			};
			
			return;
		};
		
		Lexer.prototype.basicContext = function (){
			return this.selectorToken() || this.symbolToken() || this.methodNameToken() || this.identifierToken() || this.whitespaceToken() || this.lineToken() || this.commentToken() || this.heredocToken() || this.tagToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken() || 0;
		};
		
		Lexer.prototype.moveCaret = function (i){
			return this._loc += i;
		};
		
		Lexer.prototype.context = function (){
			return this._ends[this._ends.length - 1];
		};
		
		Lexer.prototype.inContext = function (key){
			var o = this._contexts[this._contexts.length - 1];
			return o && o[key];
		};
		
		Lexer.prototype.pushEnd = function (val){
			// console.log "pushing end",val
			this._ends.push(val);
			this._contexts.push(null);
			this._end = val;
			this.refreshScope();
			return this;
		};
		
		Lexer.prototype.popEnd = function (val){
			this._ends.pop();
			this._contexts.pop();
			this._end = this._ends[this._ends.length - 1];
			this.refreshScope();
			return this;
		};
		
		Lexer.prototype.refreshScope = function (){
			var ctx0 = this._ends[this._ends.length - 1];
			var ctx1 = this._ends[this._ends.length - 2];
			return this._inTag = ctx0 == 'TAG_END' || (ctx1 == 'TAG_END' && ctx0 == 'OUTDENT');
		};
		
		
		
		Lexer.prototype.queueScope = function (val){
			// console.log("pushing scope {val} - {@indents} {@indents:length}")
			// @scopes.push(val) # no no
			this._scopes[this._indents.length] = val;
			return this;
		};
		
		Lexer.prototype.popScope = function (val){
			this._scopes.pop();
			return this;
		};
		
		Lexer.prototype.getScope = function (){
			return this._scopes[this._indents.length - 1];
		};
		
		Lexer.prototype.scope = function (sym,opts){
			var len = this._ends.push(this._end = sym);
			this._contexts.push(opts || null);
			return sym;
		};
		
		
		Lexer.prototype.closeSelector = function (){
			if (this._end == '%') {
				this.token('SELECTOR_END','%',0);
				return this.pair('%');
			};
		};
		
		
		Lexer.prototype.openDef = function (){
			return this.pushEnd('DEF');
		};
		
		
		Lexer.prototype.closeDef = function (){
			if (this.context() == 'DEF') {
				var prev = last(this._tokens);
				// console.log "close def {prev}"
				// console.log('closeDef with last>',prev)
				if (tT(prev) == 'DEF_FRAGMENT') {
					true;
				} else if (tT(prev) == 'TERMINATOR') {
					// console.log "here?!??"
					var n = this._tokens.pop();
					// console.log n
					this.token('DEF_BODY','DEF_BODY',0);
					// token('TERMINATOR', '',0) unless n.@value.indexOf('//') >= 0
					this._tokens.push(n);
				} else {
					this.token('DEF_BODY','DEF_BODY',0);
				};
				
				this.pair('DEF');
			};
			return;
		};
		
		Lexer.prototype.tagContextToken = function (){
			var match;
			if (this._chunk[0] == '#') {
				// console.log('found id # in tagContextToken')
				this.token('#','#',1);
				return 1;
			};
			
			if (match = TAG_ATTR.exec(this._chunk)) {
				// console.log 'TAG_SDDSATTR IN tokid',match
				// var prev = last @tokens
				// if the prev is a terminator, we dont really need to care?
				if (this._lastTyp != 'TAG_NAME') {
					if (this._lastTyp == 'TERMINATOR') {
						// console.log('prev was terminator -- drop it?')
						true;
					} else {
						this.token(",",",");
					};
				};
				
				var l = match[0].length;
				
				this.token('TAG_ATTR',match[1],l - 1); // add to loc?
				this._loc += l - 1;
				this.token('=','=',1);
				return l;
			};
			return 0;
		};
		
		Lexer.prototype.tagDefContextToken = function (){
			// console.log "tagContextToken"
			var match;
			if (match = TAG_TYPE.exec(this._chunk)) {
				this.token('TAG_TYPE',match[0],match[0].length);
				return match[0].length;
			};
			
			if (match = TAG_ID.exec(this._chunk)) {
				var input = match[0];
				this.token('TAG_ID',input,input.length);
				return input.length;
			};
			
			return 0;
		};
		
		
		Lexer.prototype.tagToken = function (){
			var match, ary;
			if (!(match = TAG.exec(this._chunk))) { return 0 };
			var ary = iter$(match);var input = ary[0],type = ary[1],identifier = ary[2];
			
			if (type == '<') {
				this.token('TAG_START','<',1);
				this.pushEnd(INVERSES.TAG_START);
				
				if (match = TAG_TYPE.exec(this._chunk.substr(1,40))) {
					// special case should probably be handled in AST
					if (match[0] != 'self') {
						this.token('TAG_TYPE',match[0],match[0].length,1);
						return input.length + match[0].length;
					};
				};
				
				if (identifier) {
					if (identifier.substr(0,1) == '{') {
						return type.length;
					} else {
						this.token('TAG_NAME',input.substr(1),0);
					};
				};
			};
			
			return input.length;
		};
		
		
		Lexer.prototype.selectorToken = function (){
			var ary, string;
			var match;
			
			// special handling if we are in this context
			if (this._end == '%') {
				var chr = this._chunk.charAt(0);
				var open = this.inContext('open');
				
				// should add for +, ~ etc
				// should maybe rather look for the correct type of character?
				
				if (open && (chr == ' ' || chr == '\n' || chr == ',' || chr == '+' || chr == '~' || chr == ')' || chr == ']')) {
					// console.log "close this selector directly"
					this.token('SELECTOR_END','%',0);
					this.pair('%');
					return 0;
				};
				
				if (match = SELECTOR_COMBINATOR.exec(this._chunk)) {
					// spaces between? -- include the whole
					this.token('SELECTOR_COMBINATOR',match[1] || " ",match[0].length);
					return match[0].length;
				} else if (match = SELECTOR_PART.exec(this._chunk)) {
					var type = match[1];
					var id = match[2];
					
					switch (type) {
						case '.':
							tokid = 'SELECTOR_CLASS';break;
						
						case '#':
							tokid = 'SELECTOR_ID';break;
						
						case ':':
							tokid = 'SELECTOR_PSEUDO_CLASS';break;
						
						case '::':
							tokid = 'SELECTOR_PSEUDO_CLASS';break;
						
						default:
						
							var tokid = 'SELECTOR_TAG';
					
					};
					
					this.token(tokid,match[2],match[0].length);
					return match[0].length;
				} else if (chr == '[') {
					this.token('[','[',1);
					this.pushEnd(']');
					if (match = SELECTOR_ATTR.exec(this._chunk)) {
						// fuck this length shit
						var idoffset = match[0].indexOf(match[1]);
						var opoffset = match[0].indexOf(match[2]);
						this.token('IDENTIFIER',match[1],match[1].length,idoffset);
						this.token('SELECTOR_ATTR_OP',match[2],match[2].length,opoffset);
						return match[0].length;
					};
					return 1;
				} else if (chr == '|') {
					var tok = this._tokens[this._tokens.length - 1];
					tTs(tok,'SELECTOR_NS');
					// tok[0] = 'SELECTOR_NS' # FIX
					return 1;
				} else if (chr == ',') {
					this.token('SELECTOR_GROUP',',',1);
					return 1;
				} else if (chr == '*') {
					this.token('UNIVERSAL_SELECTOR','*',1);
					return 1;
				} else if (chr == ')') {
					this.pair('%');
					this.token('SELECTOR_END',')',1);
					return 1;
				} else if (idx$(chr,[')','}',']','']) >= 0) {
					this.pair('%');
					return 0;
				};
			};
			
			if (!(match = SELECTOR.exec(this._chunk))) { return 0 };
			var ary = iter$(match);var input = ary[0],id = ary[1],kind = ary[2];
			
			// this is a closed selector
			if (kind == '(') {
				// token '(','('
				this.token('SELECTOR_START',id,id.length + 1);
				// self.pushEnd(')') # are we so sure about this?
				this.pushEnd('%');
				
				// @ends.push ')'
				// @ends.push '%'
				return id.length + 1;
			} else if (id == '%') {
				// we are already scoped in on a selector
				if (this.context() == '%') { return 1 };
				this.token('SELECTOR_START',id,id.length);
				// this is a separate - scope. Full selector should rather be $, and keep the single selector as %
				
				this.scope('%',{open: true});
				// @ends.push '%'
				// make sure a terminator breaks out
				return id.length;
			} else {
				return 0;
			};
			
			if ((id == '%' || id == '$') && ['%','$','@','(','['].indexOf(chr) >= 0) {
				var idx = 2;
				
				
				// VERY temporary way of solving this
				if ((chr == '%' || chr == '$' || chr == '@')) {
					id += chr;
					idx = 3;
					chr = this._chunk.charAt(2);
				};
				
				
				if (chr == '(') {
					if (!(string = this.balancedSelector(this._chunk,')'))) { return 0 };
					if (0 < string.indexOf('{',1)) {
						this.token('SELECTOR',id);
						// is this even used anymore? If so - we need to fix it
						this.interpolateString(string.slice(idx,-1));
						return string.length;
					} else {
						this.token('SELECTOR',id);
						this.token('(','(');
						this.token('STRING','"' + string.slice(idx,-1) + '"');
						this.token(')',')');
						return string.length;
					};
				} else if (chr == '[') {
					this.token('SELECTOR',id);
					return 1;
					// token '[','['
					// @ends.push ''
				};
			} else {
				return 0;
			};
		};
		
		// is this really needed? Should be possible to
		// parse the identifiers and = etc i jison?
		// what is special about methodNameToken? really?
		Lexer.prototype.methodNameToken = function (){
			// we can optimize this by after a def simply
			// fetching all the way after the def until a space or (
			// and then add this to the def-token itself (as with fragment)
			if (this._chunk.charAt(0) == ' ') { return 0 };
			
			var match;
			
			if (this._end == ')') {
				var outerctx = this._ends[this._ends.length - 2];
				// weird assumption, no?
				// console.log 'context is inside!!!'
				if (outerctx == '%' && (match = TAG_ATTR.exec(this._chunk))) {
					this.token('TAG_ATTR_SET',match[1]);
					return match[0].length;
				};
			};
			
			if (!(match = METHOD_IDENTIFIER.exec(this._chunk))) {
				return 0;
			};
			// var prev = last @tokens
			var length = match[0].length;
			
			var id = match[0];
			var ltyp = this._lastTyp;
			var typ = 'IDENTIFIER';
			var pre = id.charAt(0);
			var space = false;
			
			var m4 = match[4]; // might be out of bounds? should rather check charAt
			// drop match 4??
			
			// should this not quit here in practically all cases?
			if (!((ltyp == '.' || ltyp == 'DEF') || (m4 == '!' || m4 == '?') || match[5])) {
				return 0;
			};
			
			// again, why?
			if (id == 'self' || id == 'this' || id == 'super') { // in ['SELF','THIS']
				return 0;
			};
			
			if (id == 'new') {
				typ = 'NEW';
			};
			
			if (id == '...' && [',','(','CALL_START','BLOCK_PARAM_START','PARAM_START'].indexOf(ltyp) >= 0) {
				return 0;
			};
			
			if (id == '|') {
				// hacky way to implement this
				// with new lexer we'll use { ... } instead, and assume object-context,
				// then go back and correct when we see the context is invalid
				if (ltyp == '(' || ltyp == 'CALL_START') {
					this.token('DO','DO',0);
					this.pushEnd('|');
					// @ends.push '|'
					this.token('BLOCK_PARAM_START',id,1);
					return length;
				} else if (ltyp == 'DO' || ltyp == '{') {
					// @ends.push '|'
					this.pushEnd('|');
					this.token('BLOCK_PARAM_START',id,1);
					return length;
				} else if (this._ends[this._ends.length - 1] == '|') {
					this.token('BLOCK_PARAM_END','|',1);
					this.pair('|');
					return length;
				} else {
					return 0;
				};
			};
			
			// whaat?
			// console.log("method identifier",id)
			if ((['&','^','<<','<<<','>>'].indexOf(id) >= 0 || (id == '|' && this.context() != '|'))) {
				return 0;
			};
			
			if (OP_METHODS.indexOf(id) >= 0) {
				space = true;
			};
			
			// not even anything we should use?!?
			if (pre == '@') {
				typ = 'IVAR';
			} else if (pre == '$') {
				true;
				// typ = 'GVAR'
			} else if (pre == '#') {
				typ = 'TAGID';
			} else if (CONST_IDENTIFIER.test(pre) || id == 'require' || id == 'global' || id == 'exports') {
				// really? seems very strange
				// console.log('global!!',typ,id)
				typ = 'CONST';
			};
			
			// what is this really for?
			if (match[5] && ['IDENTIFIER','CONST','GVAR','CVAR','IVAR','SELF','THIS',']','}',')','NUMBER','STRING','IDREF'].indexOf(ltyp) >= 0) {
				this.token('.','.',0);
			};
			
			this.token(typ,id,length);
			
			if (space) {
				this._last.spaced = true;
			};
			
			return length;
		};
		
		
		Lexer.prototype.inTag = function (){
			var len = this._ends.length;
			if (len > 0) {
				var ctx0 = this._ends[len - 1];
				var ctx1 = len > 1 ? (this._ends[len - 2]) : (ctx0);
				return ctx0 == 'TAG_END' || (ctx1 == 'TAG_END' && ctx0 == 'OUTDENT');
			};
			return false;
		};
		
		Lexer.prototype.isKeyword = function (id){
			if ((id == 'attr' || id == 'prop')) {
				var scop = this.getScope();
				var incls = scop == 'CLASS' || scop == 'TAG';
				// var scopes = @indents.map(|ind,i| @scopes[i] or 'NONE')
				// console.log "id is prop: {scopes.join(" -> ")} | {@indents.join(" -> ")}"
				if (incls) { return true };
			};
			
			return ALL_KEYWORDS.indexOf(id) >= 0;
		};
		
		// Matches identifying literals: variables, keywords, method names, etc.
		// Check to ensure that JavaScript reserved words aren't being used as
		// identifiers. Because Imba reserves a handful of keywords that are
		// allowed in JavaScript, we're careful not to tokid them as keywords when
		// referenced as property names here, so you can still do `jQuery.is()` even
		// though `is` means `===` otherwise.
		Lexer.prototype.identifierToken = function (){
			var ary;
			var match;
			
			var ctx0 = this._ends[this._ends.length - 1];
			var ctx1 = this._ends[this._ends.length - 2];
			var innerctx = ctx0;
			var typ;
			var reserved = false;
			
			var addLoc = false;
			var inTag = ctx0 == 'TAG_END' || (ctx1 == 'TAG_END' && ctx0 == 'OUTDENT');
			
			// console.log ctx1,ctx0
			
			if (inTag && (match = TAG_ATTR.exec(this._chunk))) {
				// console.log 'TAG_ATTR IN tokid',match
				// var prev = last @tokens
				// if the prev is a terminator, we dont really need to care?
				if (this._lastTyp != 'TAG_NAME') {
					if (this._lastTyp == 'TERMINATOR') {
						// console.log('prev was terminator -- drop it?')
						true;
					} else {
						this.token(",",",");
					};
				};
				
				var l = match[0].length;
				
				this.token('TAG_ATTR',match[1],l - 1); // add to loc?
				this._loc += l - 1;
				this.token('=','=',1);
				return l;
			};
			
			// see if this is a plain object-key
			// way too much logic going on here?
			// the ast should normalize whether keys
			// are accessable as keys or strings etc
			if (match = OBJECT_KEY.exec(this._chunk)) {
				var id = match[1];
				typ = 'IDENTIFIER';
				
				// FIXME loc of key includes colon
				// moveCaret(id:length)
				// console.log "ok"
				if (true) {
					// console.log "got here? {match}"
					this.token(typ,id,id.length);
					this.moveCaret(id.length);
					this.token(':',':',match[3].length);
					this.moveCaret(-id.length);
					// moveCaret(match[3]:length)
					return match[0].length;
				};
				
				// moveCaret(match[2]:length)
				// return 0
				console.log(match[3].length);
				this.token(typ,id,match[0].length);
				this.token(':',':',1);
				return match[0].length;
			};
			
			if (!(match = IDENTIFIER.exec(this._chunk))) {
				return 0;
			};
			
			var ary = iter$(match);var input = ary[0],id = ary[1],typ = ary[2],m3 = ary[3],m4 = ary[4],colon = ary[5];
			var idlen = id.length;
			
			// What is the logic here?
			if (id == 'own' && this.lastTokenType() == 'FOR') {
				this.token('OWN',id,id.length);
				return id.length;
			};
			
			var prev = last(this._tokens);
			var lastTyp = this._lastTyp;
			
			// should we force this to be an identifier even if it is a reserved word?
			// this should only happen for when part of object etc
			// will prev ever be @???
			var forcedIdentifier;
			
			// again
			forcedIdentifier = colon || lastTyp == '.' || lastTyp == '?.'; // in ['.', '?.'
			
			
			// temp hack! need to solve for other keywords etc as well
			// problem appears with ternary conditions.
			
			// well -- it should still be an indentifier if in object?
			// forcedIdentifier = no if id in ['undefined','break']
			
			if (colon && lastTyp == '?') { forcedIdentifier = false }; // for ternary
			
			// if we are not at the top level? -- hacky
			if (id == 'tag' && this._chunk.indexOf("tag(") == 0) { // @chunk.match(/^tokid\(/)
				forcedIdentifier = true;
			};
			
			var isKeyword = false;
			
			// console.log "match",match
			// console.log "typ is {typ}"
			// little reason to check for this right here? but I guess it is only a simple check
			if (typ == '$' && ARGVAR.test(id)) { // id.match(/^\$\d$/)
				// console.log "TYP $"
				if (id == '$0') {
					typ = 'ARGUMENTS';
				} else {
					typ = 'ARGVAR';
					id = id.substr(1);
				};
			} else if (typ == '@') {
				typ = 'IVAR';
				
				// id:reserved = yes if colon
			} else if (typ == '#') {
				// we are trying to move to generic tokens,
				// so we are starting to splitting up the symbols and the items
				// we'll see if that works
				typ = 'IDENTIFIER';
				this.token('#','#');
				id = id.substr(1);
			} else if (typ == '@@') {
				typ = 'CVAR';
			} else if (typ == '$' && !colon) {
				typ = 'IDENTIFIER';
				// typ = 'GVAR'
			} else if (CONST_IDENTIFIER.test(id) || id == 'require' || id == 'global' || id == 'exports') {
				// thous should really be handled by the ast instead
				typ = 'CONST';
			} else if (id == 'elif') {
				this.token('ELSE','elif',id.length);
				this.token('IF','if');
				return id.length;
			} else {
				typ = 'IDENTIFIER';
			};
			
			
			
			// this catches all 
			if (!forcedIdentifier && (isKeyword = this.isKeyword(id))) {
				// (id in JS_KEYWORDS or id in IMBA_KEYWORDS)
				typ = id.toUpperCase();
				addLoc = true;
				
				// clumsy - but testing performance
				if (typ == 'YES') {
					typ = 'TRUE';
				} else if (typ == 'NO') {
					typ = 'FALSE';
				} else if (typ == 'NIL') {
					typ = 'NULL';
				} else if (typ == 'VAR') {
					if (this._lastVal == 'export') {
						tTs(prev,'EXPORT');
					};
				} else if (typ == 'IF' || typ == 'ELSE' || typ == 'TRUE' || typ == 'FALSE' || typ == 'NULL') {
					true;
				} else if (typ == 'TAG') {
					this.pushEnd('TAG');
					// @ends.push('TAG')
				} else if (typ == 'DEF') {
					// should probably shift context and optimize this
					this.openDef();
				} else if (typ == 'DO') {
					if (this.context() == 'DEF') this.closeDef();
				} else if (typ == 'WHEN' && LINE_BREAK.indexOf(this.lastTokenType()) >= 0) {
					typ = 'LEADING_WHEN';
				} else if (typ == 'FOR') {
					this._seenFor = true;
				} else if (typ == 'UNLESS') {
					typ = 'IF'; // WARN
				} else if (UNARY.indexOf(typ) >= 0) {
					typ = 'UNARY';
				} else if (RELATION.indexOf(typ) >= 0) {
					if (typ != 'INSTANCEOF' && typ != 'ISA' && this._seenFor) {
						typ = 'FOR' + typ; // ?
						this._seenFor = false;
					} else {
						typ = 'RELATION';
						if (String(this.value()) == '!') {
							this._tokens.pop(); // is fucked up??!
							// WARN we need to keep the loc, no?
							id = '!' + id;
						};
					};
				};
			};
			
			if (id == 'super') {
				typ = 'SUPER';
			};
			
			// do we really want to check this here
			if (!forcedIdentifier) {
				// should already have dealt with this
				
				if (isKeyword && IMBA_ALIASES.indexOf(id) >= 0) { id = IMBA_ALIAS_MAP[id] };
				// these really should not go here?!?
				switch (id) {
					case '!':
						typ = 'UNARY';break;
					
					case '==':
					case '!=':
					case '===':
					case '!==':
						typ = 'COMPARE';break;
					
					case '&&':
					case '||':
						typ = 'LOGIC';break;
					
					case 'break':
					case 'continue':
					case 'debugger':
					case 'arguments':
						typ = id.toUpperCase();break;
				
				};
			};
			
			// prev = last @tokens
			var len = input.length;
			
			// should be strict about the order, check this manually instead
			if (typ == 'CLASS' || typ == 'DEF' || typ == 'TAG') {
				this.queueScope(typ);
				
				var i = this._tokens.length;
				
				while (i){
					prev = this._tokens[--i];
					var ctrl = "" + tV(prev);
					// console.log("ctrl is {ctrl}")
					// need to coerce to string because of stupid CS ===
					// console.log("prev is",prev[0],prev[1])
					if (idx$(ctrl,IMBA_CONTEXTUAL_KEYWORDS) >= 0) {
						tTs(prev,ctrl.toUpperCase());
						// prev[0] = ctrl.toUpperCase # FIX
					} else {
						break;
					};
				};
			} else if (typ == 'IF') {
				this.queueScope(typ);
			} else if (typ == 'IMPORT') {
				// could manually parse the whole ting here?
				this.pushEnd('IMPORT');
				// @ends.push 'IMPORT'
			} else if (id == 'from' && ctx0 == 'IMPORT') {
				typ = 'FROM';
				this.pair('IMPORT');
			} else if (id == 'as' && ctx0 == 'IMPORT') {
				typ = 'AS';
				this.pair('IMPORT');
			};
			
			if (typ == 'IDENTIFIER') {
				// see if previous was catch -- belongs in rewriter?
				if (lastTyp == 'CATCH') {
					typ = 'CATCH_VAR';
				};
			};
			
			if (colon) {
				this.token(typ,id,idlen);
				this.moveCaret(idlen);
				// console.log "add colon?"
				this.token(':',':',colon.length);
				this.moveCaret(-idlen);
			} else {
				this.token(typ,id,idlen);
			};
			
			return len;
		};
		
		// Matches numbers, including decimals, hex, and exponential notation.
		// Be careful not to interfere with ranges-in-progress.
		Lexer.prototype.numberToken = function (){
			var binaryLiteral;
			var match,number,lexedLength;
			
			if (!(match = NUMBER.exec(this._chunk))) { return 0 };
			
			number = match[0];
			lexedLength = number.length;
			
			if (binaryLiteral = /0b([01]+)/.exec(number)) {
				
				number = "" + parseInt(binaryLiteral[1],2);
			};
			
			var prev = last(this._tokens);
			
			if (match[0][0] == '.' && prev && !prev.spaced && ['IDENTIFIER',')','}',']','NUMBER'].indexOf(tT(prev)) >= 0) {
				// console.log "got here"
				this.token(".",".");
				number = number.substr(1);
			};
			
			
			this.token('NUMBER',number,lexedLength);
			return lexedLength;
		};
		
		Lexer.prototype.symbolToken = function (){
			var match,symbol,prev;
			
			if (!(match = SYMBOL.exec(this._chunk))) { return 0 };
			symbol = match[0].substr(1);
			prev = last(this._tokens);
			
			// is this a property-access?
			// should invert this -- only allow when prev IS .. 
			
			// : should be a token itself, with a specification of spacing (LR,R,L,NONE)
			
			// FIX
			if (prev && !prev.spaced && idx$(tT(prev),['(','{','[','.','CALL_START','INDEX_START',',','=','INDENT','TERMINATOR']) == -1) {
				this.token('.:',':',1);
				var sym = symbol.split(/[\:\\\/]/)[0]; // really?
				// token 'SYMBOL', "'#{symbol}'"
				this.token('IDENTIFIER',sym,sym.length,1);
				return (sym.length + 1);
			} else {
				// token 'SYMBOL', "'#{symbol}'"
				this.token('SYMBOL',symbol,match[0].length);
				return match[0].length;
			};
		};
		
		Lexer.prototype.escapeStr = function (str,heredoc,q){
			str = str.replace(MULTILINER,(heredoc ? ('\\n') : ('')));
			if (q) {
				var r = RegExp(("\\\\[" + q + "]"),"g");
				str = str.replace(r,q);
				str = str.replace(RegExp(("" + q),"g"),'\\$&');
			};
			return str;
			
			// str = str.replace(MULTILINER, '\\n')
			// str = str.replace(/\t/g, '\\t')
		};
		// Matches strings, including multi-line strings. Ensures that quotation marks
		// are balanced within the string's contents, and within nested interpolations.
		Lexer.prototype.stringToken = function (){
			var match,string;
			
			switch (this._chunk.charAt(0)) {
				case "'":
					if (!(match = SIMPLESTR.exec(this._chunk))) { return 0 };
					string = match[0];
					this.token('STRING',this.escapeStr(string),string.length);
					// token 'STRING', (string = match[0]).replace(MULTILINER, '\\\n'), string:length
					break;
				
				case '"':
					if (!(string = this.balancedString(this._chunk,'"'))) { return 0 };
					// what about tripe quoted strings?
					
					if (string.indexOf('{') >= 0) {
						var len = string.length;
						// if this has no interpolation?
						// we are now messing with locations - beware
						this.token('STRING_START',string.charAt(0),1);
						this.interpolateString(string.slice(1,-1));
						this.token('STRING_END',string.charAt(len - 1),1,string.length - 1);
					} else {
						len = string.length;
						// string = string.replace(MULTILINER, '\\\n')
						this.token('STRING',this.escapeStr(string),len);
					};
					break;
				
				default:
				
					return 0;
			
			};
			
			this.moveHead(string);
			return string.length;
		};
		
		// Matches heredocs, adjusting indentation to the correct level, as heredocs
		// preserve whitespace, but ignore indentation to the left.
		Lexer.prototype.heredocToken = function (){
			var match,heredoc,quote,doc;
			
			if (!(match = HEREDOC.exec(this._chunk))) { return 0 };
			
			heredoc = match[0];
			quote = heredoc.charAt(0);
			doc = this.sanitizeHeredoc(match[2],{quote: quote,indent: null});
			// console.log "found heredoc {match[0]:length} {doc:length}"
			
			if (quote == '"' && doc.indexOf('{') >= 0) {
				var open = match[1];
				// console.log doc.substr(0,3),match[1]
				this.token('STRING_START',open,open.length);
				this.interpolateString(doc,{heredoc: true,offset: open.length,quote: quote});
				this.token('STRING_END',open,open.length,heredoc.length - open.length);
			} else {
				this.token('STRING',this.makeString(doc,quote,true),0);
			};
			
			this.moveHead(heredoc);
			return heredoc.length;
		};
		
		// Matches and consumes comments.
		Lexer.prototype.commentToken = function (){
			var match,length,comment,indent,prev;
			
			var typ = 'HERECOMMENT';
			
			if (match = INLINE_COMMENT.exec(this._chunk)) { // .match(INLINE_COMMENT)
				// console.log "match inline comment"
				length = match[0].length;
				indent = match[1];
				comment = match[2];
				
				prev = last(this._tokens);
				var pt = prev && tT(prev);
				var note = '//' + comment.substr(1);
				
				if (this._last && this._last.spaced) {
					note = ' ' + note;
					// console.log "the previous node was SPACED"
				};
				// console.log "comment {note} - indent({indent}) - {length} {comment:length}"
				
				if ((pt && pt != 'INDENT' && pt != 'TERMINATOR') || !pt) {
					// console.log "skip comment"
					// token 'INLINECOMMENT', comment.substr(2)
					// console.log "adding as terminator"
					this.token('TERMINATOR',note,length); // + '\n'
				} else {
					// console.log "add comment ({note})"
					if (pt == 'TERMINATOR') {
						tVs(prev,tV(prev) + note);
						// prev[1] += note
					} else if (pt == 'INDENT') {
						// console.log "adding comment to INDENT: {note}" # why not add directly here?
						this.addLinebreaks(1,note);
					} else {
						// console.log "comment here"
						// should we ever get here?
						this.token(typ,comment.substr(2),length); // are we sure?
					};
				};
				
				return length; // disable now while compiling
			};
			
			// should use exec?
			if (!(match = COMMENT.exec(this._chunk))) { return 0 };
			
			comment = match[0];
			var here = match[1];
			
			if (here) {
				this.token('HERECOMMENT',this.sanitizeHeredoc(here,{herecomment: true,indent: Array(this._indent + 1).join(' ')}),comment.length);
				this.token('TERMINATOR','\n');
			} else {
				this.token('HERECOMMENT',comment,comment.length);
				this.token('TERMINATOR','\n'); // auto? really?
			};
			
			this.moveHead(comment);
			return comment.length;
		};
		
		// Matches JavaScript interpolated directly into the source via backticks.
		Lexer.prototype.jsToken = function (){
			var match,script;
			
			if (!(this._chunk.charAt(0) == '`' && (match = JSTOKEN.exec(this._chunk)))) { return 0 };
			this.token('JS',(script = match[0]).slice(1,-1));
			return script.length;
		};
		
		// Matches regular expression literals. Lexing regular expressions is difficult
		// to distinguish from division, so we borrow some basic heuristics from
		// JavaScript and Ruby.
		Lexer.prototype.regexToken = function (){
			var ary;
			var match,length,prev;
			
			if (this._chunk.charAt(0) != '/') { return 0 };
			if (match = HEREGEX.exec(this._chunk)) {
				length = this.heregexToken(match);
				this.moveHead(match[0]);
				return length;
			};
			
			prev = last(this._tokens);
			// FIX
			if (prev && (idx$(tT(prev),(prev.spaced ? (
				NOT_REGEX
			) : (
				NOT_SPACED_REGEX
			))) >= 0)) { return 0 };
			if (!(match = REGEX.exec(this._chunk))) { return 0 };
			var ary = iter$(match);var m = ary[0],regex = ary[1],flags = ary[2];
			
			// FIXME
			// if regex[..1] is '/*'
			//	error 'regular expressions cannot begin with `*`'
			
			if (regex == '//') {
				regex = '/(?:)/';
			};
			
			this.token('REGEX',("" + regex + flags),m.length);
			return m.length;
		};
		
		// Matches multiline extended regular expressions.
		// The escaping should rather happen in AST - possibly as an additional flag?
		Lexer.prototype.heregexToken = function (match){
			var ary;
			var ary = iter$(match);var heregex = ary[0],body = ary[1],flags = ary[2];
			
			if (0 > body.indexOf('#{')) {
				
				var re = body.replace(HEREGEX_OMIT,'').replace(/\//g,'\\/');
				
				if (re.match(/^\*/)) {
					this.error('regular expressions cannot begin with `*`');
				};
				
				this.token('REGEX',("/" + (re || '(?:)') + "/" + flags),heregex.length);
				return heregex.length;
			};
			
			// use more basic regex type
			
			this.token('CONST','RegExp');
			this._tokens.push(T.token('CALL_START','(',0));
			var tokens = [];
			
			for (var i = 0, items = iter$(this.interpolateString(body,{regex: true})), len = items.length, pair; i < len; i++) {
				
				pair = items[i];
				var tok = tT(pair); // FIX
				var value = tV(pair); // FIX
				
				if (tok == 'TOKENS') {
					// FIXME what is this?
					tokens.push.apply(tokens,value);
				} else {
					if (!value) {
						console.log("what??");
					};
					
					if (!(value = value.replace(HEREGEX_OMIT,''))) { continue; };
					
					value = value.replace(/\\/g,'\\\\');
					tokens.push(T.token('STRING',this.makeString(value,'"',true),0)); // FIX
				};
				
				tokens.push(T.token('+','+',0)); // FIX
			};
			
			tokens.pop();
			
			// FIX
			if (!(tokens[0] && tT(tokens[0]) == 'STRING')) {
				// FIX
				this._tokens.push(T.token('STRING','""'),T.token('+','+'));
			};
			
			this._tokens.push.apply(this._tokens,tokens); // what is this?
			// FIX
			
			if (flags) {
				this._tokens.push(T.token(',',',',0));
				this._tokens.push(T.token('STRING','"' + flags + '"',0));
			};
			
			this.token(')',')',0);
			
			return heregex.length;
		};
		
		// Matches newlines, indents, and outdents, and determines which is which.
		// If we can detect that the current line is continued onto the the next line,
		// then the newline is suppressed:
		//
		//     elements
		//       .each( ... )
		//       .map( ... )
		//
		// Keeps track of the level of indentation, because a single outdent token
		// can close multiple indents, so we need to know how far in we happen to be.
		Lexer.prototype.lineToken = function (){
			var match;
			
			if (!(match = MULTI_DENT.exec(this._chunk))) { return 0 };
			// should it not pair by itself token('SELECTOR_END','%',0)
			// if @end == '%'
			// 	console.log "pairing selector in lineToken {@chunk.substr(0,10)}"
			// 	# should not need to add anything here?
			// 	pair('%')
			
			var indent = match[0];
			// var brCount = count indent, '\n'
			var brCount = this.moveHead(indent);
			this._seenFor = false;
			// reset column as well?
			
			var prev = last(this._tokens,1);
			var size = indent.length - 1 - indent.lastIndexOf('\n');
			var noNewlines = this.unfinished();
			
			// console.log "noNewlines",noNewlines
			// console.log "lineToken -- ",@chunk.substr(0,10),"--"
			if ((/^\n#\s/).test(this._chunk)) {
				this.addLinebreaks(1);
				return 0;
			};
			
			if (size - this._indebt == this._indent) {
				if (noNewlines) {
					this.suppressNewlines();
				} else {
					this.newlineToken(brCount);
				};
				return indent.length;
			};
			
			if (size > this._indent) {
				if (noNewlines) {
					this._indebt = size - this._indent;
					this.suppressNewlines();
					return indent.length;
				};
				
				if (this.inTag()) {
					// console.log "indent inside tokid?!?"
					// @indebt = size - @indent
					// suppressNewlines()
					return indent.length;
				};
				
				
				var diff = size - this._indent + this._outdebt;
				this.closeDef();
				
				var immediate = last(this._tokens);
				
				if (immediate && tT(immediate) == 'TERMINATOR') {
					tTs(immediate,'INDENT');
					immediate._meta || (immediate._meta = {pre: tV(immediate),post: ''});
					
					// should rather add to meta somehow?!?
					// tVs(immediate,tV(immediate) + '%|%') # crazy
				} else {
					this.token('INDENT',"" + diff,0);
				};
				
				// console.log "indenting", prev, last(@tokens,1)
				// if prev and prev[0] == 'TERMINATOR'
				//   console.log "terminator before indent??"
				
				// check for comments as well ?
				
				this._indents.push(diff);
				this.pushEnd('OUTDENT');
				// @ends.push 'OUTDENT'
				this._outdebt = this._indebt = 0;
				this.addLinebreaks(brCount);
			} else {
				this._indebt = 0;
				this.outdentToken(this._indent - size,noNewlines,brCount);
				this.addLinebreaks(brCount - 1);
				// console.log "outdent",noNewlines,tokid()
			};
			
			this._indent = size;
			return indent.length;
		};
		
		// Record an outdent token or multiple tokens, if we happen to be moving back
		// inwards past several recorded indents.
		Lexer.prototype.outdentToken = function (moveOut,noNewlines,newlineCount){
			// here we should also take care to pop / reset the scope-body
			// or context-type for indentation 
			var dent = 0;
			while (moveOut > 0){
				var len = this._indents.length - 1;
				if (this._indents[len] == undefined) {
					moveOut = 0;
				} else if (this._indents[len] == this._outdebt) {
					moveOut -= this._outdebt;
					this._outdebt = 0;
				} else if (this._indents[len] < this._outdebt) {
					this._outdebt -= this._indents[len];
					moveOut -= this._indents[len];
				} else {
					dent = this._indents.pop() - this._outdebt;
					moveOut -= dent;
					this._outdebt = 0;
					
					if (!noNewlines) { this.addLinebreaks(1) };
					
					this.pair('OUTDENT');
					this.token('OUTDENT',"" + dent,0);
				};
			};
			
			if (dent) { this._outdebt -= moveOut };
			
			while (this.lastTokenValue() == ';'){
				this._tokens.pop();
			};
			
			if (!(this.lastTokenType() == 'TERMINATOR' || noNewlines)) { this.token('TERMINATOR','\n',0) };
			
			// capping scopes so they dont hang around 
			this._scopes.length = this._indents.length;
			
			var ctx = this.context();
			if (ctx == '%' || ctx == 'TAG') { this.pair(ctx) }; // really?
			this.closeDef();
			return this;
		};
		
		// Matches and consumes non-meaningful whitespace. tokid the previous token
		// as being "spaced", because there are some cases where it makes a difference.
		Lexer.prototype.whitespaceToken = function (){
			var match,nline,prev;
			if (!((match = WHITESPACE.exec(this._chunk)) || (nline = this._chunk.charAt(0) == '\n'))) { return 0 };
			prev = last(this._tokens);
			
			// FIX - why oh why?
			if (prev) {
				if (match) {
					prev.spaced = true;
					return match[0].length;
				} else {
					prev.newLine = true;
					return 0;
				};
			};
		};
		
		Lexer.prototype.addNewline = function (){
			return this.token('TERMINATOR','\n');
		};
		
		Lexer.prototype.moveHead = function (str){
			var br = count(str,'\n');
			return br;
		};
		
		
		Lexer.prototype.addLinebreaks = function (count,raw){
			var br;
			
			if (!raw && count == 0) { return this }; // no terminators?
			
			var prev = this._last;
			
			if (!raw) {
				if (count == 1) {
					br = '\n';
				} else if (count == 2) {
					br = '\n\n';
				} else if (count == 3) {
					br = '\n\n\n';
				} else {
					br = repeatString('\n',count);
				};
			};
			// FIX
			if (prev) {
				var t = prev._type; // @lastTyp
				var v = tV(prev);
				
				// we really want to add this
				if (t == 'INDENT') {
					// TODO we want to add to the indent
					// console.log "add the comment to the indent -- pre? {raw} {br}"
					
					var meta = prev._meta || (prev._meta = {pre: '',post: ''});
					meta.post += (raw || br);
					// tVs(v + (raw or br))
					return this;
				} else if (t == 'TERMINATOR') {
					// console.log "already exists terminator {br} {raw}"
					tVs(prev,v + (raw || br));
					return this;
				};
			};
			
			this.token('TERMINATOR',br,0);
			return;
		};
		
		// Generate a newline token. Consecutive newlines get merged together.
		Lexer.prototype.newlineToken = function (lines){
			// console.log "newlineToken"
			while (this.lastTokenValue() == ';'){
				console.log("pop token",this._tokens[this._tokens.length - 1]);
				this._tokens.pop();
			};
			
			this.addLinebreaks(lines);
			
			var ctx = this.context();
			// WARN now import cannot go over multiple lines
			if (ctx == 'TAG' || ctx == 'IMPORT') { this.pair(ctx) };
			this.closeDef(); // close def -- really?
			return this;
		};
		
		// Use a `\` at a line-ending to suppress the newline.
		// The slash is removed here once its job is done.
		Lexer.prototype.suppressNewlines = function (){
			if (this.value() == '\\') { this._tokens.pop() };
			return this;
		};
		
		// We treat all other single characters as a token. E.g.: `( ) , . !`
		// Multi-character operators are also literal tokens, so that Jison can assign
		// the proper order of operations. There are some symbols that we tokid specially
		// here. `;` and newlines are both treated as a `TERMINATOR`, we distinguish
		// parentheses that indicate a method call from regular parentheses, and so on.
		Lexer.prototype.literalToken = function (){
			var match,value;
			if (match = OPERATOR.exec(this._chunk)) {
				value = match[0];
				if (CODE.test(value)) this.tagParameters();
			} else {
				value = this._chunk.charAt(0);
			};
			
			var end1 = this._ends[this._ends.length - 1];
			var end2 = this._ends[this._ends.length - 2];
			
			var inTag = end1 == 'TAG_END' || end1 == 'OUTDENT' && end2 == 'TAG_END';
			
			var tokid = value;
			var prev = last(this._tokens);
			var pt = prev && tT(prev);
			var pv = prev && tV(prev);
			var length = value.length;
			
			// is this needed?
			if (value == '=' && prev) {
				
				if (pv == '||' || pv == '&&') { // in ['||', '&&']
					tTs(prev,'COMPOUND_ASSIGN');
					tVs(prev,pv + '=');
					// prev[0] = 'COMPOUND_ASSIGN'
					// prev[1] += '='
					return value.length;
				};
			};
			
			if (value == ';') {
				this._seenFor = false;
				tokid = 'TERMINATOR';
			} else if (value == '(' && inTag && pt != '=' && prev.spaced) { // FIXed
				// console.log 'spaced before ( in tokid'
				// FIXME - should rather add a special token like TAG_PARAMS_START
				this.token(',',',');
			} else if (value == '->' && inTag) {
				tokid = 'TAG_END';
				this.pair('TAG_END');
			} else if (value == '/>' && inTag) {
				tokid = 'TAG_END';
				this.pair('TAG_END');
			} else if (value == '>' && inTag) {
				tokid = 'TAG_END';
				this.pair('TAG_END');
			} else if (value == '>' && this.context() == 'DEF') {
				// console.log('picked up >!!')
				tokid = 'DEF_FRAGMENT';
				
				// elif value is 'TERMINATOR' and end1 is '%' 
				// 	closeSelector()
			} else if (value == 'TERMINATOR' && end1 == 'DEF') {
				this.closeDef();
			} else if (value == '&' && this.context() == 'DEF') {
				// console.log("okay!")
				tokid = 'BLOCK_ARG';
				// change the next identifier instead?
			} else if (value == '*' && this._chunk.charAt(1).match(/[A-Za-z\_\@\[]/) && (prev.spaced || [',','(','[','{','|','\n','\t'].indexOf(pv) >= 0)) {
				tokid = "SPLAT";
			} else if (value == '√') {
				tokid = 'SQRT';
			} else if (value == 'ƒ') {
				tokid = 'FUNC';
			} else if (idx$(value,MATH) >= 0) {
				tokid = 'MATH';
			} else if (idx$(value,COMPARE) >= 0) {
				tokid = 'COMPARE';
			} else if (idx$(value,COMPOUND_ASSIGN) >= 0) {
				tokid = 'COMPOUND_ASSIGN';
			} else if (idx$(value,UNARY) >= 0) {
				tokid = 'UNARY';
			} else if (idx$(value,SHIFT) >= 0) {
				tokid = 'SHIFT';
			} else if (idx$(value,LOGIC) >= 0) {
				tokid = 'LOGIC'; // or value is '?' and prev?:spaced 
			} else if (prev && !prev.spaced) {
				// need a better way to do these
				if (value == '(' && end1 == '%') {
					tokid = 'TAG_ATTRS_START';
				} else if (value == '(' && idx$(pt,CALLABLE) >= 0) {
					// not using this ???
					// prev[0] = 'FUNC_EXIST' if prev[0] is '?'
					tokid = 'CALL_START';
				} else if (value == '[' && idx$(pt,INDEXABLE) >= 0) {
					tokid = 'INDEX_START';
					if (pt == '?') { tTs(prev,'INDEX_SOAK') };
					// prev[0] = 'INDEX_SOAK' if prev[0] == '?'
				};
			};
			
			switch (value) {
				case '(':
				case '{':
				case '[':
					this.pushEnd(INVERSES[value]);break;
				
				case ')':
				case '}':
				case ']':
					this.pair(value);break;
			
			};
			
			// hacky rule to try to allow for tuple-assignments in blocks
			// if value is ',' and prev[0] is 'IDENTIFIER' and @tokens[@tokens:length - 2][0] in ['TERMINATOR','INDENT']
			//   # token "TUPLE", "tuple" # should rather insert it somewhere else, no?
			//   console.log("found comma")
			
			this.token(tokid,value,value.length);
			return value.length;
		};
		
		// Token Manipulators
		// ------------------
		
		// Sanitize a heredoc or herecomment by
		// erasing all external indentation on the left-hand side.
		Lexer.prototype.sanitizeHeredoc = function (doc,options){
			var match;
			var indent = options.indent;
			var herecomment = options.herecomment;
			
			if (herecomment) {
				if (HEREDOC_ILLEGAL.test(doc)) {
					this.error("block comment cannot contain '*/' starting");
				};
				if (doc.indexOf('\n') <= 0) { return doc };
			} else {
				var length_;while (match = HEREDOC_INDENT.exec(doc)){
					var attempt = match[1];
					if (indent == null || 0 < (length_ = attempt.length) && length_ < indent.length) {
						indent = attempt;
					};
				};
			};
			
			if (indent) { doc = doc.replace(RegExp(("\\n" + indent),"g"),'\n') };
			if (!herecomment) { doc = doc.replace(/^\n/,'') };
			return doc;
		};
		
		// A source of ambiguity in our grammar used to be parameter lists in function
		// definitions versus argument lists in function calls. Walk backwards, tokidging
		// parameters specially in order to make things easier for the parser.
		Lexer.prototype.tagParameters = function (){
			var tok;
			if (this.lastTokenType() != ')') { return this };
			var stack = [];
			var tokens = this._tokens;
			var i = tokens.length;
			
			tTs(tokens[--i],'PARAM_END');
			
			while (tok = tokens[--i]){
				var t = tT(tok);
				switch (t) {
					case ')':
						stack.push(tok);
						break;
					
					case '(':
					case 'CALL_START':
						if (stack.length) {
							stack.pop();
						} else if (t == '(') {
							tTs(tok,'PARAM_START');
							return this;
						} else {
							return this;
						};
						break;
				
				};
			};
			
			return this;
		};
		
		// Close up all remaining open blocks at the end of the file.
		Lexer.prototype.closeIndentation = function (){
			// ctx = context
			// pair(ctx) if ctx in ['%','DEF']
			this.closeDef();
			this.closeSelector();
			return this.outdentToken(this._indent,false,0);
		};
		
		// Matches a balanced group such as a single or double-quoted string. Pass in
		// a series of delimiters, all of which must be nested correctly within the
		// contents of the string. This method allows us to have strings within
		// interpolations within strings, ad infinitum.
		Lexer.prototype.balancedString = function (str,end){
			var match,letter,prev;
			
			// console.log 'balancing string!', str, end
			var stack = [end];
			var i = 0;
			
			// could it not happen here?
			while (i < (str.length - 1)){
				i++;
				letter = str.charAt(i);
				switch (letter) {
					case '\\':
						i++;
						continue;
						break;
					
					case end:
						stack.pop();
						if (!stack.length) {
							var v = str.slice(0,i + 1);
							return v;
						};
						end = stack[stack.length - 1];
						continue;
						break;
				
				};
				
				if (end == '}' && (letter == '"' || letter == "'")) {
					stack.push(end = letter);
				} else if (end == '}' && letter == '/' && (match = (HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i))))) {
					i += match[0].length - 1;
				} else if (end == '}' && letter == '{') {
					stack.push(end = '}');
				} else if (end == '"' && letter == '{') {
					stack.push(end = '}');
				};
				prev = letter;
			};
			
			if (!this._opts.silent) { return this.error(("missing " + (stack.pop()) + ", starting")) };
		};
		
		// Expand variables and expressions inside double-quoted strings using
		// Ruby-like notation for substitution of arbitrary expressions.
		//
		//     "Hello #{name.capitalize()}."
		//
		// If it encounters an interpolation, this method will recursively create a
		// new Lexer, tokenize the interpolated contents, and merge them into the
		// token stream.
		Lexer.prototype.interpolateString = function (str,options){
			// console.log "interpolate string"
			if(options === undefined) options = {};
			var heredoc = options.heredoc;
			var quote = options.quote;
			var regex = options.regex;
			var prefix = options.prefix;
			
			var startLoc = this._loc;
			var tokens = [];
			var pi = 0;
			var i = -1;
			var locOffset = options.offset || 1;
			var strlen = str.length;
			var letter;
			var expr;
			
			var isInterpolated = false;
			// out of bounds
			while (letter = str.charAt(i += 1)){
				if (letter == '\\') {
					i += 1;
					continue;
				};
				
				if (!(str.charAt(i) == '{' && (expr = this.balancedString(str.slice(i),'}')))) {
					continue;
				};
				
				isInterpolated = true;
				
				// these have no real sense of location or anything?
				if (pi < i) {
					// this is the prefix-string - before any item
					var tok = new Token('NEOSTRING',this.escapeStr(str.slice(pi,i),heredoc,quote),this._loc + pi + locOffset,i - pi);
					// tok.@loc = @loc + pi
					// tok.@len = i - pi + 2
					tokens.push(tok);
				};
				
				tokens.push(new Token('{{','{',this._loc + i + locOffset,1));
				
				var inner = expr.slice(1,-1);
				// console.log 'inner is',inner
				// remove leading spaces 
				// need to keep track of how much whitespace we dropped from the start
				inner = inner.replace(/^[^\n\S]+/,'');
				
				if (inner.length) {
					// we need to remember the loc we start at
					// console.log('interpolate from loc',@loc,i)
					// really? why not just add to the stack??
					// what about the added 
					// should share with the selector no?
					// console.log "tokenize inner parts of string",inner
					var spaces = 0;
					var offset = this._loc + i + (expr.length - inner.length) - 1;
					// why create a whole new lexer? Should rather reuse one
					// much better to simply move into interpolation mode where
					// we continue parsing until we meet unpaired }
					var nested = new Lexer().tokenize(inner,{inline: true,rewrite: false,loc: offset + locOffset});
					// console.log nested.pop
					
					if (nested[0] && tT(nested[0]) == 'TERMINATOR') {
						nested.shift();
					};
					
					if (nested.length) {
						tokens.push.apply(tokens,nested); // T.token('TOKENS',nested,0)
					};
				};
				
				// should rather add the amount by which our lexer has moved?
				i += expr.length - 1;
				tokens.push(new Token('}}','}',this._loc + i + locOffset,1));
				pi = i + 1;
			};
			
			// adding the last part of the string here
			if (i >= pi && pi < str.length) {
				// set the length as well - or?
				// the string after?
				// console.log 'push neostring'
				tokens.push(new Token('NEOSTRING',this.escapeStr(str.slice(pi),heredoc,quote),this._loc + pi + locOffset,str.length - pi));
			};
			
			// console.log tokens:length
			if (regex) { return tokens };
			
			if (!tokens.length) { return this.token('NEOSTRING','""') };
			
			for (var j = 0, len = tokens.length; j < len; j++) {
				this._tokens.push(tokens[j]);
			};
			
			return tokens;
		};
		
		// Matches a balanced group such as a single or double-quoted string. Pass in
		// a series of delimiters, all of which must be nested correctly within the
		// contents of the string. This method allows us to have strings within
		// interpolations within strings, ad infinitum.
		Lexer.prototype.balancedSelector = function (str,end){
			var prev;
			var letter;
			var stack = [end];
			// FIXME
			for (var len = str.length, i = 1; i < len; i++) {
				switch (letter = str.charAt(i)) {
					case '\\':
						i++;
						continue;
						break;
					
					case end:
						stack.pop();
						if (!stack.length) {
							return str.slice(0,i + 1);
						};
						
						end = stack[stack.length - 1];
						continue;
						break;
				
				};
				if (end == '}' && letter == [')']) {
					stack.push(end = letter);
				} else if (end == '}' && letter == '{') {
					stack.push(end = '}');
				} else if (end == ')' && letter == '{') {
					stack.push(end = '}');
				};
				prev = letter; // what, why?
			};
			
			return this.error(("missing " + (stack.pop()) + ", starting"));
		};
		
		// Pairs up a closing token, ensuring that all listed pairs of tokens are
		// correctly balanced throughout the course of the token stream.
		Lexer.prototype.pair = function (tok){
			var wanted = last(this._ends);
			if (tok != wanted) {
				if ('OUTDENT' != wanted) { this.error(("unmatched " + tok)) };
				var size = last(this._indents);
				this._indent -= size;
				this.outdentToken(size,true,0);
				return this.pair(tok);
			};
			return this.popEnd();
		};
		
		
		// Helpers
		// -------
		
		// Add a token to the results, taking note of the line number.
		Lexer.prototype.token = function (id,value,len,offset){
			this._lastTyp = id;
			this._lastVal = value;
			var tok = this._last = new Token(id,value,this._loc + (offset || 0),len || 0);
			this._tokens.push(tok);
			return;
		};
		
		Lexer.prototype.lastTokenType = function (){
			var token = this._tokens[this._tokens.length - 1];
			return token ? (tT(token)) : ('NONE');
		};
		
		Lexer.prototype.lastTokenValue = function (){
			var token = this._tokens[this._tokens.length - 1];
			return token ? (token._value) : ('');
		};
		
		// Peek at a tokid in the current token stream.
		Lexer.prototype.tokid = function (index,val){
			var tok;
			if (tok = last(this._tokens,index)) {
				if (val) { tTs(tok,val) };
				return tT(tok);
				// tok.@type = tokid if tokid # why?
				// tok.@type
			} else {
				return null;
			};
		};
		
		// Peek at a value in the current token stream.
		Lexer.prototype.value = function (index,val){
			var tok;
			if (tok = last(this._tokens,index)) {
				if (val) { tVs(tok,val) };
				return tV(tok);
				// tok.@value = val if val # why?
				// tok.@value
			} else {
				return null;
			};
		};
		
		
		// Are we in the midst of an unfinished expression?
		Lexer.prototype.unfinished = function (){
			if (LINE_CONTINUER.test(this._chunk)) { return true };
			return UNFINISHED.indexOf(this._lastTyp) >= 0;
		};
		
		// var tokens = ['\\','.', '?.', 'UNARY', 'MATH', '+', '-', 'SHIFT', 'RELATION', 'COMPARE', 'LOGIC', 'COMPOUND_ASSIGN', 'THROW', 'EXTENDS']
		
		// Converts newlines for string literals.
		Lexer.prototype.escapeLines = function (str,heredoc){
			return str.replace(MULTILINER,(heredoc ? ('\\n') : ('')));
		};
		
		// Constructs a string token by escaping quotes and newlines.
		Lexer.prototype.makeString = function (body,quote,heredoc){
			if (!body) { return quote + quote };
			body = body.replace(/\\([\s\S])/g,function(match,contents) {
				return (contents == '\n' || contents == quote) ? (contents) : (match);
			});
			// Does not work now
			body = body.replace(RegExp(("" + quote),"g"),'\\$&');
			return quote + this.escapeLines(body,heredoc) + quote;
		};
		
		// Throws a syntax error on the current `@line`.
		Lexer.prototype.error = function (message,len){
			if ((typeof this._line=='number'||this._line instanceof Number)) { message = ("" + message + " on line " + (this._line)) };
			
			if (len) {
				message += (" [" + (this._loc) + ":" + (this._loc + len) + "]");
			};
			
			var err = new SyntaxError(message);
			err.line = this._line;
			// err:columnNumber
			err = new ERR.ImbaParseError(err,{tokens: this._tokens,pos: this._tokens.length});
			err.region = [this._loc,this._loc + (len || 0)];
			throw err;
		};
		return Lexer;
	
	})()

/***/ },
/* 31 */
/***/ function(module, exports) {

	(function(){
		var TOK, LBRACKET, RBRACKET, LPAREN, RPAREN, INDENT, OUTDENT;
		
		
		module.exports.TOK = TOK = {};
		var TTERMINATOR = TOK.TERMINATOR = 1;
		var TIDENTIFIER = TOK.IDENTIFIER = 2;
		TIDENTIFIER = TOK.IVAR = 2;
		var CONST = TOK.CONST = 3;
		var VAR = TOK.VAR = 4;
		var IF = TOK.IF = 5;
		var ELSE = TOK.ELSE = 6;
		var DEF = TOK.DEF = 7;
		
		
		
		function Token(type,value,loc,len){
			this._type = type;
			this._value = value;
			this._loc = loc != null ? (loc) : (-1);
			this._len = len || 0;
			this._meta = null;
			this.generated = false;
			this.newLine = false;
			this.spaced = false;
			return this;
		};
		
		exports.Token = Token; // export class 
		Token.prototype.type = function (){
			return this._type;
		};
		
		Token.prototype.value = function (){
			return this._value;
		};
		
		Token.prototype.traverse = function (){
			return;
		};
		
		Token.prototype.c = function (){
			return "" + this._value;
		};
		
		Token.prototype.toString = function (){
			return this._value;
		};
		
		Token.prototype.charAt = function (i){
			return this._value.charAt(i);
		};
		
		Token.prototype.slice = function (i){
			return this._value.slice(i);
		};
		
		Token.prototype.region = function (){
			return [this._loc,this._loc + (this._len || this._value.length)];
		};
		
		Token.prototype.sourceMapMarker = function (){
			return this._loc == -1 ? (':') : (("%$" + (this._loc) + "$%"));
			// @col == -1 ? '' : "%%{@line}${@col}%%"
		};
		
		
		function lex(){
			var token = this.tokens[this.pos++];
			var ttag;
			
			if (token) {
				ttag = token._type;
				this.yytext = token;
			} else {
				ttag = '';
			};
			
			return ttag;
		}; exports.lex = lex;
		
		
		// export def token typ, val, line, col, len do Token.new(typ,val,line, col or 0, len or 0) # [null,typ,val,loc]
		function token(typ,val){
			return new Token(typ,val,-1,0);
		}; exports.token = token;
		
		function typ(tok){
			return tok._type;
		}; exports.typ = typ;
		function val(tok){
			return tok._value;
		}; exports.val = val; // tok[offset + 1]
		function line(tok){
			return tok._line;
		}; exports.line = line; // tok[offset + 2]
		function loc(tok){
			return tok._loc;
		}; exports.loc = loc; // tok[offset + 2]
		
		function setTyp(tok,v){
			return tok._type = v;
		}; exports.setTyp = setTyp;
		function setVal(tok,v){
			return tok._value = v;
		}; exports.setVal = setVal;
		function setLine(tok,v){
			return tok._line = v;
		}; exports.setLine = setLine;
		function setLoc(tok,v){
			return tok._loc = v;
		}; exports.setLoc = setLoc;
		
		
		module.exports.LBRACKET = LBRACKET = new Token('{','{',0,0,0);
		module.exports.RBRACKET = RBRACKET = new Token('}','}',0,0,0);
		
		module.exports.LPAREN = LPAREN = new Token('(','(',0,0,0);
		module.exports.RPAREN = RPAREN = new Token(')',')',0,0,0);
		
		LBRACKET.generated = true;
		RBRACKET.generated = true;
		LPAREN.generated = true;
		RPAREN.generated = true;
		
		module.exports.INDENT = INDENT = new Token('INDENT','2',0,0,0);
		return module.exports.OUTDENT = OUTDENT = new Token('OUTDENT','2',0,0,0);
	
	})()

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var INVERSES, LINEBREAKS;
		
		// The Imba language has a good deal of optional syntax, implicit syntax,
		// and shorthand syntax. This can greatly complicate a grammar and bloat
		// the resulting parse table. Instead of making the parser handle it all, we take
		// a series of passes over the token stream, using this **Rewriter** to convert
		// shorthand into the unambiguous long form, add implicit indentation and
		// parentheses, and generally clean things up.
		
		var T = __webpack_require__(31);
		var Token = T.Token;
		
		// Based on the original rewriter.coffee from CoffeeScript
		function Rewriter(){ };
		
		exports.Rewriter = Rewriter; // export class 
		Rewriter.prototype.tokens = function (){
			return this._tokens;
		};
		
		// Helpful snippet for debugging:
		//     console.log (t[0] + '/' + t[1] for t in @tokens).join ' '
		// Rewrite the token stream in multiple passes, one logical filter at
		// a time. This could certainly be changed into a single pass through the
		// stream, with a big ol' efficient switch, but it's much nicer to work with
		// like this. The order of these passes matters -- indentation must be
		// corrected before implicit parentheses can be wrapped around blocks of code.
		Rewriter.prototype.rewrite = function (tokens,opts){
			var token;
			if(opts === undefined) opts = {};
			this._tokens = tokens;
			this._options = opts;
			
			// console.log "tokens in: " + tokens:length
			if (opts.profile) { console.time("tokenize:rewrite") };
			
			var i = 0;
			// flag empty methods
			while (token = tokens[i]){
				var next = tokens[i + 1];
				if (token._type == 'DEF_BODY' && next && next._type == 'TERMINATOR') {
					token._type = 'DEF_EMPTY';
				};
				i++;
			};
			
			this.step("ensureFirstLine");
			this.step("removeLeadingNewlines");
			this.step("removeMidExpressionNewlines");
			this.step("tagDefArguments");
			this.step("closeOpenCalls");
			this.step("closeOpenIndexes");
			this.step("closeOpenTags");
			this.step("closeOpenTagAttrLists");
			this.step("addImplicitIndentation");
			this.step("tagPostfixConditionals");
			this.step("addImplicitBraces");
			this.step("addImplicitParentheses");
			
			if (opts.profile) { console.timeEnd("tokenize:rewrite") };
			// console.log "tokens out: " + @tokens:length
			return this._tokens;
		};
		
		Rewriter.prototype.step = function (fn){
			if (this._options.profile) {
				console.log(("---- starting " + fn + " ---- "));
				console.time(fn);
			};
			
			this[fn]();
			
			if (this._options.profile) {
				console.timeEnd(fn);
				console.log("\n\n");
			};
			return;
		};
		
		// Rewrite the token stream, looking one token ahead and behind.
		// Allow the return value of the block to tell us how many tokens to move
		// forwards (or backwards) in the stream, to make sure we don't miss anything
		// as tokens are inserted and removed, and the stream changes length under
		// our feet.
		Rewriter.prototype.scanTokens = function (block){
			var token;
			var tokens = this._tokens;
			
			var i = 0;
			while (token = tokens[i]){
				i += block.call(this,token,i,tokens);
			};
			
			return true;
		};
		
		Rewriter.prototype.detectEnd = function (i,condition,action){
			var tokens = this._tokens;
			var levels = 0;
			var starts = [];
			var token;
			var t,v;
			
			while (token = tokens[i]){
				if (levels == 0 && condition.call(this,token,i,starts)) {
					return action.call(this,token,i);
				};
				if (!token || levels < 0) {
					return action.call(this,token,i - 1);
				};
				
				t = T.typ(token);
				
				if (EXPRESSION_START.indexOf(t) >= 0) {
					if (levels == 0) { starts.push(i) };
					levels += 1;
				} else if (EXPRESSION_END.indexOf(t) >= 0) {
					levels -= 1;
				};
				i += 1;
			};
			return i - 1;
		};
		
		Rewriter.prototype.ensureFirstLine = function (){
			var tok = this._tokens[0];
			
			if (T.typ(tok) == 'TERMINATOR') {
				// console.log "adding bodystart"
				this._tokens = [T.token('BODYSTART','BODYSTART')].concat(this._tokens);
				// T.setTyp(tok,'HEADER')
			};
			return;
		};
		
		// Leading newlines would introduce an ambiguity in the grammar, so we
		// dispatch them here.
		Rewriter.prototype.removeLeadingNewlines = function (){
			var at = 0;
			
			for (var i = 0, ary = iter$(this._tokens), len = ary.length; i < len; i++) {
				if (T.typ(ary[i]) != 'TERMINATOR') {
					at = i;break;
				};
			};
			
			if (at) { this._tokens.splice(0,at) };
			
			return;
		};
		
		// Some blocks occur in the middle of expressions -- when we're expecting
		// this, remove their trailing newlines.
		Rewriter.prototype.removeMidExpressionNewlines = function (){
			var self = this;
			return self.scanTokens(function(token,i,tokens) { // do |token,i,tokens|
				var next = self.tokenType(i + 1);
				
				if (!(T.typ(token) == 'TERMINATOR' && EXPRESSION_CLOSE.indexOf(next) >= 0)) { return 1 };
				if (next == 'OUTDENT') { return 1 };
				tokens.splice(i,1);
				return 0;
			});
		};
		
		
		Rewriter.prototype.tagDefArguments = function (){
			return true;
		};
		
		// The lexer has tagged the opening parenthesis of a method call. Match it with
		// its paired close. We have the mis-nested outdent case included here for
		// calls that close on the same line, just before their outdent.
		Rewriter.prototype.closeOpenCalls = function (){
			var self = this;
			var condition = function(token,i) {
				var t = T.typ(token);
				return (t == ')' || t == 'CALL_END') || t == 'OUTDENT' && self.tokenType(i - 1) == ')';
			};
			
			var action = function(token,i) {
				var t = T.typ(token);
				var tok = self._tokens[t == 'OUTDENT' ? (i - 1) : (i)];
				return T.setTyp(tok,'CALL_END');
			};
			
			return self.scanTokens(function(token,i) {
				if (T.typ(token) == 'CALL_START') { self.detectEnd(i + 1,condition,action) };
				return 1;
			});
		};
		
		// The lexer has tagged the opening parenthesis of an indexing operation call.
		// Match it with its paired close.
		Rewriter.prototype.closeOpenIndexes = function (){
			var self = this;
			var condition = function(token,i) { return idx$(T.typ(token),[']','INDEX_END']) >= 0; };
			var action = function(token,i) { return T.setTyp(token,'INDEX_END'); };
			
			return self.scanTokens(function(token,i) {
				if (T.typ(token) == 'INDEX_START') { self.detectEnd(i + 1,condition,action) };
				return 1;
			});
		};
		
		
		Rewriter.prototype.closeOpenTagAttrLists = function (){
			var self = this;
			var condition = function(token,i) { return idx$(T.typ(token),[')','TAG_ATTRS_END']) >= 0; };
			var action = function(token,i) { return T.setTyp(token,'TAG_ATTRS_END'); }; // 'TAG_ATTRS_END'
			
			return self.scanTokens(function(token,i) {
				if (T.typ(token) == 'TAG_ATTRS_START') { self.detectEnd(i + 1,condition,action) };
				return 1;
			});
		};
		
		// The lexer has tagged the opening parenthesis of an indexing operation call.
		// Match it with its paired close. Should be done in lexer directly
		Rewriter.prototype.closeOpenTags = function (){
			var self = this;
			var condition = function(token,i) { return idx$(T.typ(token),['>','TAG_END']) >= 0; };
			var action = function(token,i) { return T.setTyp(token,'TAG_END'); }; // token[0] = 'TAG_END'
			
			return self.scanTokens(function(token,i) {
				if (T.typ(token) == 'TAG_START') { self.detectEnd(i + 1,condition,action) };
				return 1;
			});
		};
		
		Rewriter.prototype.addImplicitCommas = function (){
			return;
		};
		
		Rewriter.prototype.addImplicitBlockCalls = function (){
			var token;
			var i = 1;
			var tokens = this._tokens;
			
			while (token = tokens[i]){
				var t = token._type;
				var v = token._value;
				// hmm
				if (t == 'DO' && (v == 'INDEX_END' || v == 'IDENTIFIER' || v == 'NEW')) {
					tokens.splice(i + 1,0,T.token('CALL_END',')'));
					tokens.splice(i + 1,0,T.token('CALL_START','('));
					i++;
				};
				i++;
			};
			
			return;
		};
		
		// Object literals may be written with implicit braces, for simple cases.
		// Insert the missing braces here, so that the parser doesn't have to.
		Rewriter.prototype.addImplicitBraces = function (){
			var self = this;
			var stack = [];
			var start = null;
			var startIndent = 0;
			var startIdx = null;
			
			var noBraceTag = ['CLASS','IF','UNLESS','TAG','WHILE','FOR','UNTIL','CATCH','FINALLY','MODULE','LEADING_WHEN'];
			var noBraceContext = ['IF','TERNARY','FOR'];
			
			var noBrace = false;
			
			var scope = function() {
				return stack[stack.length - 1] || [];
			};
			
			var action = function(token,i) {
				return self._tokens.splice(i,0,T.RBRACKET);
			};
			
			var open = function(token,i) {
				return self._tokens.splice(i,0,T.LBRACKET);
			};
			
			var close = function(token,i) {
				return self._tokens.splice(i,0,T.RBRACKET);
			};
			
			var stackToken = function(a,b) {
				return [a,b];
			};
			
			return self.scanTokens(function(token,i,tokens) {
				var type = T.typ(token);
				var v = T.val(token);
				var ctx = stack[stack.length - 1] || [];
				var idx;
				
				if (noBraceContext.indexOf(type) >= 0) {
					// console.log "found noBraceTag {type}"
					stack.push(stackToken(type,i));
					return 1;
				};
				
				if (v == '?') {
					// console.log('TERNARY OPERATOR!')
					stack.push(stackToken('TERNARY',i));
					return 1;
				};
				
				// no need to test for this here as well as in
				if (EXPRESSION_START.indexOf(type) >= 0) {
					if (type == 'INDENT' && noBraceContext.indexOf(ctx[0]) >= 0) {
						stack.pop();
					};
					
					// console.log('expression start',type,ctx[0])
					if (type == 'INDENT' && self.tokenType(i - 1) == '{') {
						// stack ?!? no token
						stack.push(stackToken('{',i)); // should not autogenerate another?
					} else {
						stack.push(stackToken(type,i));
					};
					return 1;
				};
				
				if (EXPRESSION_END.indexOf(type) >= 0) {
					// console.log "EXPRESSION_END at {type} - stack is {ctx[0]}"
					if (ctx[0] == 'TERNARY') { // FIX?
						stack.pop();
					};
					
					start = stack.pop();
					if (!start) {
						console.log("NO STACK!!");
					};
					start[2] = i;
					
					// seems like the stack should use tokens, no?)
					if (start[0] == '{' && start.generated) { //  # type != '}' # and start:generated
						close(token,i);
						return 1;
					};
					
					return 1;
				};
				
				// is this correct? same for if/class etc?
				if (ctx[0] == 'TERNARY' && (type == 'TERMINATOR' || type == 'OUTDENT')) {
					stack.pop();
					return 1;
				};
				
				if (noBraceContext.indexOf(ctx[0]) >= 0 && type == 'INDENT') {
					console.log("popping noBraceContext");
					stack.pop();
					return 1;
				};
				
				
				if (type == ',') {
					// automatically add an ending here if inside:generated scope?
					// it is important that this is:generated(!)
					if (ctx[0] == '{' && ctx.generated) {
						tokens.splice(i,0,T.RBRACKET);
						stack.pop();
						return 2;
					} else {
						return 1;
					};
					true;
				};
				
				// found a type
				if (type == ':' && ctx[0] != '{' && ctx[0] != 'TERNARY' && (noBraceContext.indexOf(ctx[0]) == -1)) {
					// could just check if the end was right before this?
					
					if (start && start[2] == i - 1) {
						// console.log('this expression was just ending before colon!')
						idx = start[1] - 1; // these are the stackTokens
					} else {
						// console.log "rewrite here? #{i}"
						idx = i - 2; // if start then start[1] - 1 else i - 2
						// idx = idx - 1 if tokenType(idx) is 'TERMINATOR'
					};
					
					while (self.tokenType(idx - 1) == 'HERECOMMENT'){
						idx -= 2;
					};
					
					var t0 = tokens[idx - 1];
					
					if (t0 && T.typ(t0) == '}' && t0.generated) {
						tokens.splice(idx - 1,1);
						var s = stackToken('{');
						s.generated = true;
						stack.push(s);
						return 0;
					} else if (t0 && T.typ(t0) == ',' && self.tokenType(idx - 2) == '}') {
						tokens.splice(idx - 2,1);
						s = stackToken('{');
						s.generated = true;
						stack.push(s);
						return 0;
					} else {
						s = stackToken('{');
						s.generated = true;
						stack.push(s);
						open(token,idx + 1);
						return 2;
					};
				};
				
				// we probably need to run through autocall first?!
				
				if (type == 'DO') { // and ctx:generated
					var prev = T.typ(tokens[i - 1]); // [0]
					if (['NUMBER','STRING','REGEX','SYMBOL',']','}',')','STRING_END'].indexOf(prev) >= 0) {
						
						var tok = T.token(',',',');
						tok.generated = true;
						tokens.splice(i,0,tok);
						
						if (ctx.generated) {
							close(token,i);
							stack.pop();
							return 2;
						};
					};
				};
				
				if ((type == 'TERMINATOR' || type == 'OUTDENT' || type == 'DEF_BODY') && ctx.generated) {
					close(token,i);
					stack.pop();
					return 2;
				};
				
				return 1;
			});
		};
		
		// Methods may be optionally called without parentheses, for simple cases.
		// Insert the implicit parentheses here, so that the parser doesn't have to
		// deal with them.
		// Practically everything will now be callable this way (every identifier)
		Rewriter.prototype.addImplicitParentheses = function (){
			
			var self = this, token;
			var noCallTag = ['CLASS','IF','UNLESS','TAG','WHILE','FOR','UNTIL','CATCH','FINALLY','MODULE','LEADING_WHEN'];
			
			var action = function(token,i) {
				return self._tokens.splice(i,0,T.token('CALL_END',')'));
			};
			
			// console.log "adding implicit parenthesis" # ,self:scanTokens
			var tokens = self._tokens;
			
			var noCall = false;
			var seenFor = false;
			var endCallAtTerminator = false;
			
			var i = 0;
			while (token = tokens[i]){
				
				// to handle cases like:
				// if a(do yes).test
				// 	yes
				// we need to keep a stack for balanced pairs
				// until then you must explicitly end the call like
				// if a(do yes).test()
				// 	yes
				
				var type = token._type;
				
				var prev = tokens[i - 1];
				var current = tokens[i];
				var next = tokens[i + 1];
				
				var pt = prev && prev._type;
				var nt = next && next._type;
				
				// if pt == 'WHEN'
				// Never make these tags implicitly call
				// should we not just remove these from IMPLICIT_FUNC?
				if ((pt == ')' || pt == ']') && type == 'INDENT') {
					noCall = true;
				};
				
				if (noCallTag.indexOf(pt) >= 0) {
					// console.log("seen nocall tag {pt} ({pt} {type} {nt})")
					endCallAtTerminator = true;
					noCall = true;
					if (pt == 'FOR') { seenFor = true };
				};
				
				
				var callObject = false;
				var callIndent = false;
				
				// [prev, current, next] = tokens[i - 1 .. i + 1]
				
				// check for comments
				// console.log "detect end??"
				if (!noCall && type == 'INDENT' && next) {
					var prevImpFunc = pt && IMPLICIT_FUNC.indexOf(pt) >= 0;
					var nextImpCall = nt && IMPLICIT_CALL.indexOf(nt) >= 0;
					callObject = ((next.generated && nt == '{') || nextImpCall) && prevImpFunc;
					callIndent = nextImpCall && prevImpFunc;
				};
				
				var seenSingle = false;
				var seenControl = false;
				// Hmm ?
				
				// this is not correct if this is inside a block,no?
				if ((type == 'TERMINATOR' || type == 'OUTDENT' || type == 'INDENT')) {
					endCallAtTerminator = false;
					noCall = false;
				};
				
				if (type == '?' && prev && !prev.spaced) { token.call = true };
				
				// where does fromThem come from?
				if (token.fromThen) {
					i += 1;continue;
				};
				// here we deal with :spaced and :newLine
				if (!(callObject || callIndent || (prev && prev.spaced) && (prev.call || IMPLICIT_FUNC.indexOf(pt) >= 0) && (IMPLICIT_CALL.indexOf(type) >= 0 || !(token.spaced || token.newLine) && IMPLICIT_UNSPACED_CALL.indexOf(type) >= 0))) {
					i += 1;continue;
				};
				
				
				tokens.splice(i,0,T.token('CALL_START','('));
				// console.log "added ( {prev}"
				var cond = function(token,i) {
					var type = T.typ(token);
					if (!seenSingle && token.fromThen) { return true };
					var ifelse = type == 'IF' || type == 'UNLESS' || type == 'ELSE';
					if (ifelse || type == 'CATCH') { seenSingle = true };
					if (ifelse || type == 'SWITCH' || type == 'TRY') { seenControl = true };
					var prev = self.tokenType(i - 1);
					
					if ((type == '.' || type == '?.' || type == '::') && prev == 'OUTDENT') { return true };
					if (endCallAtTerminator && (type == 'INDENT' || type == 'TERMINATOR')) { return true };
					if ((type == 'WHEN' || type == 'BY') && !seenFor) {
						// console.log "dont close implicit call outside for"
						return false;
					};
					
					var post = tokens[i + 1];
					var postTyp = post && T.typ(post);
					// WTF
					return !token.generated && prev != ',' && (IMPLICIT_END.indexOf(type) >= 0 || (type == 'INDENT' && !seenControl) || (type == 'DOS' && prev != '=')) && (type != 'INDENT' || (self.tokenType(i - 2) != 'CLASS' && IMPLICIT_BLOCK.indexOf(prev) == -1 && !(post && ((post.generated && postTyp == '{') || IMPLICIT_CALL.indexOf(postTyp) >= 0))));
				};
				
				// The action for detecting when the call should end
				// console.log "detect end??"
				self.detectEnd(i + 1,cond,action);
				if (T.typ(prev) == '?') { T.setTyp(prev,'FUNC_EXIST') };
				i += 2;
				// need to reset after a match
				endCallAtTerminator = false;
				noCall = false;
				seenFor = false;
			};
			
			
			return;
		};
		
		// Because our grammar is LALR(1), it can't handle some single-line
		// expressions that lack ending delimiters. The **Rewriter** adds the implicit
		// blocks, so it doesn't need to. ')' can close a single-line block,
		// but we need to make sure it's balanced.
		Rewriter.prototype.addImplicitIndentation = function (){
			
			
			var self = this, token;
			var i = 0;
			var tokens = self._tokens;
			while (token = tokens[i]){
				var type = T.typ(token);
				var next = self.tokenType(i + 1);
				
				// why are we removing terminators after then? should be able to handle
				if (type == 'TERMINATOR' && next == 'THEN') {
					tokens.splice(i,1);
					continue;
				};
				
				if (type == 'CATCH' && idx$(self.tokenType(i + 2),['OUTDENT','TERMINATOR','FINALLY']) >= 0) {
					tokens.splice.apply(tokens,[].concat([i + 2,0], [].slice.call(self.indentation(token))));
					i += 4;continue;
				};
				
				if (SINGLE_LINERS.indexOf(type) >= 0 && (next != 'INDENT' && next != 'BLOCK_PARAM_START') && !(type == 'ELSE' && next == 'IF') && type != 'ELIF') {
					
					var starter = type;
					
					var indent = T.token('INDENT','2');
					var outdent = T.OUTDENT;
					// var indent, outdent = indentation(token)
					if (starter == 'THEN') { indent.fromThen = true }; // setting special values for these -- cannot really reuse?
					indent.generated = true;
					// outdent:generated = true
					tokens.splice(i + 1,0,indent);
					
					var condition = function(token,i) {
						var t = T.typ(token);
						return T.val(token) != ';' && SINGLE_CLOSERS.indexOf(t) >= 0 && !(t == 'ELSE' && starter != 'IF' && starter != 'THEN');
					};
					
					var action = function(token,i) {
						var idx = self.tokenType(i - 1) == ',' ? (i - 1) : (i);
						return tokens.splice(idx,0,outdent);
					};
					
					self.detectEnd(i + 2,condition,action);
					if (type == 'THEN') { tokens.splice(i,1) };
				};
				
				i++;
			};
			
			return;
		};
		
		// Tag postfix conditionals as such, so that we can parse them with a
		// different precedence.
		Rewriter.prototype.tagPostfixConditionals = function (){
			var self = this;
			var condition = function(token,i) { return idx$(T.typ(token),['TERMINATOR','INDENT']) >= 0; };
			
			return self.scanTokens(function(token,i) {
				var typ = T.typ(token);
				if (!(typ == 'IF' || typ == 'FOR')) { return 1 };
				var original = token;
				self.detectEnd(i + 1,condition,function(token,i) {
					if (T.typ(token) != 'INDENT') { return T.setTyp(original,'POST_' + T.typ(original)) };
				});
				return 1;
			});
		};
		
		// Generate the indentation tokens, based on another token on the same line.
		Rewriter.prototype.indentation = function (token){
			return [T.token('INDENT','2'),T.token('OUTDENT','2')];
		};
		
		// Look up a type by token index.
		Rewriter.prototype.type = function (i){
			// if i < 0 then return null
			var tok = this._tokens[i];
			return tok && T.typ(tok);
			// if tok then tok[0] else null
		};
		
		Rewriter.prototype.tokenType = function (i){
			var tok = this._tokens[i];
			return tok && T.typ(tok);
			// return tok and tok[0]
		};
		
		// Constants
		// ---------
		
		// List of the token pairs that must be balanced.
		var BALANCED_PAIRS = [
			['(',')'],
			['[',']'],
			['{','}'],
			['{{','}}'],
			['INDENT','OUTDENT'],
			['CALL_START','CALL_END'],
			['PARAM_START','PARAM_END'],
			['INDEX_START','INDEX_END'],
			['TAG_START','TAG_END'],
			['TAG_PARAM_START','TAG_PARAM_END'],
			['TAG_ATTRS_START','TAG_ATTRS_END'],
			['BLOCK_PARAM_START','BLOCK_PARAM_END']
		];
		
		// The inverse mappings of `BALANCED_PAIRS` we're trying to fix up, so we can
		// look things up from either end.
		module.exports.INVERSES = INVERSES = {};
		
		// The tokens that signal the start/end of a balanced pair.
		// var EXPRESSION_START = []
		// var EXPRESSION_END   = []
		
		for (var i = 0, ary = iter$(BALANCED_PAIRS), len = ary.length, pair; i < len; i++) {
			pair = ary[i];
			var left = pair[0];
			var rite = pair[1];
			INVERSES[rite] = left;
			INVERSES[left] = rite;
		};
		
		var EXPRESSION_START = ['(','[','{','INDENT','CALL_START','PARAM_START','INDEX_START','TAG_PARAM_START','BLOCK_PARAM_START','STRING_START','{{','TAG_START'];
		var EXPRESSION_END = [')',']','}','OUTDENT','CALL_END','PARAM_END','INDEX_END','TAG_PARAM_END','BLOCK_PARAM_END','STRING_END','}}','TAG_END'];
		
		var IDENTIFIERS = ['IDENTIFIER','GVAR','IVAR','CVAR','CONST','ARGVAR'];
		
		// Tokens that indicate the close of a clause of an expression.
		var EXPRESSION_CLOSE = ['CATCH','WHEN','ELSE','FINALLY'].concat(EXPRESSION_END);
		
		// Tokens that, if followed by an `IMPLICIT_CALL`, indicate a function invocation.
		var IMPLICIT_FUNC = ['IDENTIFIER','SUPER','@','THIS','SELF','EVENT','TRIGGER','TAG_END','IVAR',
		'GVAR','CONST','ARGVAR','NEW','BREAK','CONTINUE','RETURN'];
		
		// If preceded by an `IMPLICIT_FUNC`, indicates a function invocation.
		var IMPLICIT_CALL = [
			'SELECTOR','IDENTIFIER','NUMBER','STRING','SYMBOL','JS','REGEX','NEW','PARAM_START','CLASS',
			'IF','UNLESS','TRY','SWITCH','THIS','BOOL','TRUE','FALSE','NULL','UNDEFINED','UNARY','SUPER','IVAR','GVAR','CONST','ARGVAR','SELF',
			'@','[','(','{','--','++','SELECTOR','TAG_START','TAGID','#','SELECTOR_START','IDREF','SPLAT','DO','BLOCK_ARG',
			'FOR','STRING_START','CONTINUE','BREAK'
		]; // '->', '=>', why does it not work with symbol?
		
		var IMPLICIT_INDENT_CALL = [
			'FOR'
		];
		// is not do an implicit call??
		
		var IMPLICIT_UNSPACED_CALL = ['+','-'];
		
		// Tokens indicating that the implicit call must enclose a block of expressions.
		var IMPLICIT_BLOCK = ['{','[',',','BLOCK_PARAM_END','DO']; // '->', '=>', 
		
		var CONDITIONAL_ASSIGN = ['||=','&&=','?=','&=','|='];
		var COMPOUND_ASSIGN = ['-=','+=','/=','*=','%=','||=','&&=','?=','<<=','>>=','>>>=','&=','^=','|='];
		var UNARY = ['!','~','NEW','TYPEOF','DELETE'];
		var LOGIC = ['&&','||','&','|','^'];
		
		// optimize for fixed arrays
		var NO_IMPLICIT_BLOCK_CALL = [
			'CALL_END','=','DEF_BODY','(','CALL_START',',',':','RETURN',
			'-=','+=','/=','*=','%=','||=','&&=','?=','<<=','>>=','>>>=','&=','^=','|='
		]; // .concat(COMPOUND_ASSIGN)
		
		
		// console.log NO_IMPLICIT_BLOCK_CALL:length
		// NO_IMPLICIT_BLOCK_CALL
		// IMPLICIT_COMMA = ['->', '=>', '{', '[', 'NUMBER', 'STRING', 'SYMBOL', 'IDENTIFIER','DO']
		
		var IMPLICIT_COMMA = ['DO'];
		
		// Tokens that always mark the end of an implicit call for single-liners.
		var IMPLICIT_END = ['POST_IF','POST_UNLESS','POST_FOR','WHILE','UNTIL','WHEN','BY','LOOP','TERMINATOR','DEF_BODY','DEF_FRAGMENT'];
		
		// Single-line flavors of block expressions that have unclosed endings.
		// The grammar can't disambiguate them, so we insert the implicit indentation.
		var SINGLE_LINERS = ['ELSE','TRY','FINALLY','THEN','BLOCK_PARAM_END','DO','BEGIN','CATCH_VAR']; // '->', '=>', really?
		var SINGLE_CLOSERS = ['TERMINATOR','CATCH','FINALLY','ELSE','OUTDENT','LEADING_WHEN'];
		
		// Tokens that end a line.
		return LINEBREAKS = ['TERMINATOR','INDENT','OUTDENT'];
	
	})()

/***/ },
/* 33 */
/***/ function(module, exports) {

	(function(){
		// helper for subclassing
		function subclass$(obj,sup) {
			for (var k in sup) {
				if (sup.hasOwnProperty(k)) obj[k] = sup[k];
			};
			// obj.__super__ = sup;
			obj.prototype = Object.create(sup.prototype);
			obj.__super__ = obj.prototype.__super__ = sup.prototype;
			obj.prototype.initialize = obj.prototype.constructor = obj;
		};
		
		// create separate error-types with all the logic
		
		function ImbaParseError(e,o){
			this.error = e;
			this.message = e.message;
			this.filename = e.filename;
			this.line = e.line;
			this._options = o || {};
			this;
		};
		
		subclass$(ImbaParseError,Error);
		exports.ImbaParseError = ImbaParseError; // export class 
		ImbaParseError.wrap = function (err){
			// what about the stacktrace?
			return new ImbaParseError(err);
		};
		
		ImbaParseError.prototype.set = function (opts){
			this._options || (this._options = {});
			for (var i = 0, keys = Object.keys(opts), l = keys.length; i < l; i++){
				this._options[keys[i]] = opts[keys[i]];
			};
			return this;
		};
		
		ImbaParseError.prototype.start = function (){
			var o = this._options;
			var idx = o.pos - 1;
			var tok = o.tokens && o.tokens[idx];
			while (tok && tok._loc == -1){
				tok = o.tokens[--idx];
			};
			return tok;
		};
		
		ImbaParseError.prototype.desc = function (){
			var o = this._options;
			var msg = this.message;
			if (o.token && o.token._loc == -1) {
				return 'Syntax Error';
			} else {
				return msg;
			};
		};
		
		ImbaParseError.prototype.loc = function (){
			var start_;
			return (start_ = this.start()) && start_.region  &&  start_.region();
		};
		
		ImbaParseError.prototype.toJSON = function (){
			var o = this._options;
			var tok = this.start();
			// var tok = o:tokens and o:tokens[o:pos - 1]
			// var loc = tok and [tok.@loc,tok.@loc + (tok.@len or tok.@value:length)] or [0,0]
			// , col: tok.@col, line: tok.@line
			// get the token itself?
			return {warn: true,message: this.desc(),loc: this.loc()};
		};
		return ImbaParseError;
	
	})()

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		var Region = __webpack_require__(27).Region;
		
		
		function isWhitespace(str){
			return (/^[\n\t\ ]+$/).test(str);
		}; exports.isWhitespace = isWhitespace;
		
		function commonAncestor(a,b){
			if (a instanceof Array) {
				var arr = a.slice();
				return arr.reduce(function(prev,curr,i) {
					return commonAncestor(prev,curr);
				},arr.shift());
			};
			
			if (!a || !b) { return (a || b) };
			
			a = a._dom || a;
			b = b._dom || b;
			
			while (!a.contains(b)){
				a = a.parentNode;
			};
			while (!b.contains(a)){
				b = b.parentNode;
			};
			
			return tag$wrap(a);
		}; exports.commonAncestor = commonAncestor;
		
		
		var pairs = {
			'"': '"',
			"'": "'",
			'(': ')',
			'<': '>',
			'[': ']',
			'{': '}'
		};
		
		function wrapText(text,open,close){
			close || (close = pairs[open]);
			if (open == "'") { text = text.replace(/\'/g,"\\'") };
			return (open || '') + text + (close || '');
		}; exports.wrapText = wrapText;
		
		
		function stringIsBalanced(str){
			var opens = '[{("\'';
			var closes = ']})"\'';
			var stack = [];
			var i = 0;
			var s,end;
			
			while (s = str[i++]){
				var oid = opens.indexOf(s);
				
				if (s == end) {
					stack.pop();
					end = stack[stack.length - 1];
				} else if (oid >= 0) {
					stack.push(end = closes[oid]);
				};
			};
			
			return stack.length == 0 ? (true) : (false);
		}; exports.stringIsBalanced = stringIsBalanced;
		
		function colToLoc(line,col,tabsize){
			if(tabsize === undefined) tabsize = 4;
			var ci = 0;
			var rci = 0; // real column
			var char$;
			
			if (col == 0) { return 0 };
			
			while (char$ = line[ci++]){
				if (char$ == '\t') {
					var rest = tabsize - rci % tabsize;
					rci += rest;
				} else {
					rci += 1;
				};
				
				if (rci >= col) {
					return ci;
				};
			};
			
			return line.length;
		}; exports.colToLoc = colToLoc;
		
		function colToViewCol(line,col,tabsize){
			if(tabsize === undefined) tabsize = 4;
			var ci = 0;
			var rci = 0; // real column
			var char$;
			
			if (col == 0) { return 0 };
			
			while (char$ = line[ci++]){
				if (char$ == '\t') {
					var rest = tabsize - rci % tabsize;
					if (rest > 3 && col <= rci + 2) { break; };
					rci += rest;
				} else {
					rci += 1;
				};
				
				if (col <= rci) { break; };
			};
			return rci;
		}; exports.colToViewCol = colToViewCol;
		
		function colsForLine(line,tabsize){
			if(tabsize === undefined) tabsize = 4;
			var col = 0;
			var idx = 0;
			var char$;
			while (char$ = line[idx++]){
				if (char$ == '\t') {
					var rest = tabsize - col % tabsize;
					col += rest;
				} else {
					col += 1;
				};
			};
			return col;
		}; exports.colsForLine = colsForLine;
		
		function rowcol(buf,loc,tabsize){
			if(tabsize === undefined) tabsize = 4;
			buf = buf.toString();
			var pos = loc;
			var col = 0;
			var line = 0;
			var char$;
			
			// go back to start of line
			while (char$ = buf[pos - 1]){
				if (char$ == '\n') {
					break;
				};
				pos--;
			};
			
			// get column for slice
			while ((pos < loc) && (char$ = buf[pos])){
				if (char$ == '\t') {
					var rest = tabsize - (col % tabsize);
					col += rest;
				} else {
					col += 1;
				};
				pos++;
			};
			
			while (char$ = buf[pos - 1]){
				if (char$ == '\n') {
					line++;
				};
				pos--;
			};
			
			return [line,col];
		}; exports.rowcol = rowcol;
		
		function increaseIndent(str){
			var reg = /^(\s*(.*\=\s*)?(export |global |extend )?(class|def|tag|unless|if|else|elif|switch|try|catch|finally|for|while|until|do))/;
			var other = /\b(do)\b/;
			return reg.test(str) || other.test(str);
		}; exports.increaseIndent = increaseIndent;
		
		
		function repeatString(str,count){
			return new Array(count + 1).join(str);
		}; exports.repeatString = repeatString;
		
		
		function patchString(orig,str,mode){
			var region;
			var text = orig.toString();
			
			if (mode == 'append') {
				return text + str;
			} else if (mode == 'prepend') {
				return "" + str + text;
			} else {
				if (region = Region.normalize(mode)) {
					// let region = Region.normalize()
					return text.substr(0,region.start()) + str + text.slice(region.end());
				};
			};
		}; exports.patchString = patchString;; return patchString;
		
		
	
	})()

/***/ },
/* 35 */
/***/ function(module, exports) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// helper for subclassing
		function subclass$(obj,sup) {
			for (var k in sup) {
				if (sup.hasOwnProperty(k)) obj[k] = sup[k];
			};
			// obj.__super__ = sup;
			obj.prototype = Object.create(sup.prototype);
			obj.__super__ = obj.prototype.__super__ = sup.prototype;
			obj.prototype.initialize = obj.prototype.constructor = obj;
		};
		
		function HistoryState(data){
			if(data === undefined) data = {};
			this._timestamp = new Date();
			this._data = data;
			this;
		};
		
		
		
		HistoryState.prototype.data = function(v){ return this._data; }
		HistoryState.prototype.setData = function(v){ this._data = v; return this; };
		
		
		HistoryState.prototype.timestamp = function(v){ return this._timestamp; }
		HistoryState.prototype.setTimestamp = function(v){ this._timestamp = v; return this; };
		
		HistoryState.prototype.apply = function (view){
			return this;
		};
		
		HistoryState.prototype.update = function (data){
			this._data = data;
			this._timestamp = new Date();
			return this;
		};
		
		
		function FullHistoryState(){ return HistoryState.apply(this,arguments) };
		
		subclass$(FullHistoryState,HistoryState);
		FullHistoryState.prototype.apply = function (view){
			view.loadState(this._data);
			return this;
		};
		
		function DiffHistoryState(){ return HistoryState.apply(this,arguments) };
		
		subclass$(DiffHistoryState,HistoryState);
		
		
		var types = {};
		
		function Command(params){
			this._params = params;
		};
		
		
		
		Command.prototype.prev = function(v){ return this._prev; }
		Command.prototype.setPrev = function(v){ this._prev = v; return this; };
		
		
		Command.prototype.next = function(v){ return this._next; }
		Command.prototype.setNext = function(v){ this._next = v; return this; };
		
		
		Command.prototype.frame = function(v){ return this._frame; }
		Command.prototype.setFrame = function(v){ this._frame = v; return this; };
		
		Command.sym = function (sym){
			var $0 = arguments, i = $0.length;
			var pars = new Array(i>1 ? i-1 : 0);
			while(i>1) pars[--i - 1] = $0[i];
			this.prototype._symbol = sym;
			this.prototype._signature = pars;
			types[sym] = this;
			return this;
		};
		
		Command.load = function (o){
			var typ = types[o[0]];
			var frame = o[1];
			var cmd = typ.build(o[2]);
			cmd.setFrame(frame);
			return cmd;
		};
		
		Command.build = function (params){
			return new this(params);
		};
		
		Command.prototype.data = function (){
			return this._data;
		};
		
		Command.prototype.params = function (){
			return this._params;
		};
		
		Command.prototype.undo = function (view){
			return this.prev();
		};
		
		Command.prototype.redo = function (view){
			return this;
		};
		
		Command.prototype.enter = function (view){
			return this;
		};
		
		Command.prototype.remove = function (){
			var v_;
			if (this.prev()) { (this.prev().setNext(v_ = this.next()),v_) };
			if (this.next()) { (this.next().setPrev(v_ = this.prev()),v_) };
			return this;
		};
		
		Command.prototype.toJSON = function (){
			return [this._symbol,this._frame || 0,this.params() || []];
		};
		
		function Mark(){ return Command.apply(this,arguments) };
		
		subclass$(Mark,Command);
		Mark.sym('M','value');
		
		
		function Snapshot(params){
			this._code = params[0];
		};
		
		subclass$(Snapshot,Mark);
		Snapshot.sym('S','code');
		
		Snapshot.prototype.params = function (){
			return [this._code];
		};
		
		Snapshot.prototype.redo = function (view){
			console.log('load',this._code);
			view.load(this._code);
			// must repair? what about annotations?
			return this;
		};
		
		function Selection(params){
			this._old = params[0];
			this._new = params[1];
		};
		
		subclass$(Selection,Command);
		Selection.sym('|','old','new');
		
		Selection.load = function (val){
			return new this(val);
		};
		
		Selection.prototype.params = function (){
			return [this._old,this._new];
		};
		
		Selection.prototype.redo = function (view){
			view.caret().set(JSON.parse(this._new));
			return this;
		};
		
		Selection.prototype.enter = function (view){
			this.redo(view);
			return this;
		};
		
		Selection.prototype.undo = function (view){
			// we need to know about the previous selection for this?
			// can either store both - or traverse backwards to the previous
			// command like this
			var old = JSON.parse(this._old);
			console.log('move selection back to old',old,this.data());
			view.caret().set(old);
			return this.prev();
		};
		
		
		function Insert(pars){
			this._point = pars[0];
			this._str = pars[1];
		};
		
		subclass$(Insert,Command);
		Insert.sym('+','point','str');
		
		Insert.prototype.params = function (){
			return [this._point,this._str];
		};
		
		Insert.prototype.redo = function (view){
			console.log('redo Insert');
			return view.insert(this._point,this._str);
		};
		
		Insert.prototype.undo = function (view){
			console.log('undo Insert');
			view.erase([this._point,this._point + this._str.length]);
			return this.prev();
		};
		
		function Erase(params){
			this._region = params[0];
			this._str = params[1];
		};
		
		subclass$(Erase,Command);
		Erase.sym('-','region','str');
		
		Erase.prototype.params = function (){
			return [this._region,this._str];
		};
		
		Erase.prototype.redo = function (view){
			console.log('redo Erase');
			return view.erase(this._region);
		};
		
		Erase.prototype.undo = function (view){
			// if we dont know the text to 
			console.log('undo Erase');
			view.insert(this._region.start(),this._str);
			return this.prev();
		};
		
		
		function History(view){
			this._mode = 'normal';
			this._view = view;
			this._enabled = true;
			this._active = false;
			this.setCurrent(this._seed = new Mark());
			this;
		};
		
		exports.History = History; // export class 
		
		
		History.prototype.mode = function(v){ return this._mode; }
		History.prototype.setMode = function(v){ this._mode = v; return this; };
		
		
		History.prototype.view = function(v){ return this._view; }
		History.prototype.setView = function(v){ this._view = v; return this; };
		
		
		History.prototype.enabled = function(v){ return this._enabled; }
		History.prototype.setEnabled = function(v){ this._enabled = v; return this; };
		
		
		History.prototype.current = function(v){ return this._current; }
		History.prototype.setCurrent = function(v){ this._current = v; return this; };
		
		
		History.prototype.seed = function(v){ return this._seed; }
		History.prototype.setSeed = function(v){ this._seed = v; return this; };
		
		
		History.prototype.tail = function(v){ return this._tail; }
		History.prototype.setTail = function(v){ this._tail = v; return this; }; // is this behind or in the very front?
		
		History.prototype.add = function (item,move,frame){
			if(move === undefined) move = true;
			if(frame === undefined) frame = this.view().frames();
			item.setFrame(frame);
			
			if (this.current()) {
				// if current has a next event
				// this should be detached here?
				item.setPrev(this.current());
				this.current().setNext(item);
			};
			
			if (move) { (this.setCurrent(item),item) };
			return this;
		};
		
		History.prototype.next = function (){
			var current_;
			return (current_ = this.current()) && current_.next  &&  current_.next();
		};
		
		History.prototype.prev = function (){
			var current_;
			return (current_ = this.current()) && current_.prev  &&  current_.prev();
		};
		
		History.prototype.update = function (o){
			return this;
		};
		
		History.prototype.move = function (dir){
			if(dir === undefined) dir = 1;
			return this;
		};
		
		History.prototype.redo = function (){
			var self = this;
			self.apply(function() {
				var res = [];while (self.next()){
					self.next().redo(self.view(),self);
					self.setCurrent(self.next());
					if (self.current() instanceof Mark) { break; };
				};return res;
			});
			return self;
		};
		
		History.prototype.undo = function (){
			var self = this;
			self.apply(function() {
				// should be possible to undo 
				var res = [], v_, current_;while (self.current()){
					if (self.prev()) { (self.setCurrent(v_ = self.current().undo(self.view(),self)),v_) };
					(current_ = self.current()) && current_.enter  &&  current_.enter(self.view(),self);
					if (self.current() instanceof Mark) { break; };
				};return res;
			});
			
			return self;
		};
		
		History.prototype.apply = function (cb){
			this._active = true;
			cb && cb();
			this._active = false;
			return this;
		};
		
		History.prototype.batch = function (cb){
			return this;
		};
		
		History.prototype.enter = function (state){
			state.apply(this.view());
			return this;
		};
		
		History.prototype.onerase = function (reg,str,edit){
			if (this._active) { return this };
			return this.add(new Erase([reg,str]));
		};
		
		History.prototype.oninsert = function (loc,str,edit){
			if (this._active) { return this };
			return this.add(new Insert([loc,str]));
		};
		
		History.prototype.oncaret = function (old,new$){
			if (this._active) { return this };
			return this.add(new Selection([old,new$]));
		};
		
		History.prototype.onload = function (code){
			if (this._active) { return this };
			var mark = new Snapshot([code]);
			return this.add(mark);
		};
		
		History.prototype.mark = function (value){
			if (this._active) { return this };
			var mark = new Mark([value]);
			return this.add(mark);
		};
		
		History.prototype.tick = function (){
			
			var self = this;
			if (self._mode == 'play') {
				// console.log 'plyaing'
				var frame = self.view().frames() - self._offset;
				// console.log 'history.tick will play',frame,next,current
				self.apply(function() {
					var res = [], v_;while (self.next() && self.next().frame() <= frame){
						// console.log 'history.tick play',frame,next,current
						// console.log 'replay frame!'
						self.next().redo(self.view(),self);
						res.push(((self.setCurrent(v_ = self.next()),v_)));
					};return res;
				});
				
				if (!(self.next())) {
					self.setMode('live');
				};
			};
			return self;
		};
		
		History.prototype.play = function (){
			// should probably happen in a different manager
			var self = this;
			var snap = self.seed();
			while (!(!snap || (snap instanceof Snapshot))){
				snap = snap.next();
			};
			
			self._offset = self.view().frames() - snap.frame();
			console.log("playing from seed",snap,self._offset);
			// console.log 'found snapshot?!? -- offset frame',@offset
			self.apply(function() { var v_;
			return (self.setCurrent(v_ = snap.redo(self.view(),self)),v_); });
			self.setMode('play');
			return self;
		};
		
		History.prototype.toJSON = function (){
			var data = [];
			var step = this._seed;
			
			while (step){
				data.push(step.toJSON());
				step = step.next();
			};
			
			return {commands: data};
		};
		
		History.prototype.load = function (data){
			var step = this.seed();
			for (var i = 0, ary = iter$(data.commands), len = ary.length; i < len; i++) {
				var item = Command.load(ary[i]);
				item.setPrev(step);
				step.setNext(item);
				step = item;
				// console.log 'load item',item
			};
			// console.log 'loaded'
			return this;
		};
		return History;
		
		
	
	})()

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		
		function Logger(view){
			this._enabled = true;
			this._view = view;
			this;
		};
		
		exports.Logger = Logger; // export class 
		
		
		Logger.prototype.enabled = function(v){ return this._enabled; }
		Logger.prototype.setEnabled = function(v){ this._enabled = v; return this; };
		
		
		Logger.prototype.view = function(v){ return this._view; }
		Logger.prototype.setView = function(v){ this._view = v; return this; };
		
		Logger.prototype.log = function (){
			if (this._enabled || (1)) { console.log.apply(console,arguments) };
			return this;
		};
		
		Logger.prototype.warn = function (){
			if (this._enabled || (1)) { console.log.apply(console,arguments) };
			return this;
		};
		
		Logger.prototype.group = function (name){
			if (this._enabled || (1)) { console.group.apply(console,arguments) };
			return this;
		};
		
		Logger.prototype.groupCollapsed = function (){
			if (this._enabled || (1)) { console.groupCollapsed.apply(console,arguments) };
			return this;
		};
		
		Logger.prototype.groupEnd = function (){
			if (this._enabled || (1)) { console.groupEnd() };
			return this;
		};
		return Logger;
		
		
	
	})()

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		var self = this;
		var util = __webpack_require__(34);
		
		var specialKeys = {
			8: "backspace",
			9: "tab",
			10: "return",
			13: "return",
			16: "shift",
			17: "ctrl",
			18: "alt",
			19: "pause",
			20: "capslock",
			27: "esc",
			32: "space",
			33: "pageup",
			34: "pagedown",
			35: "end",
			36: "home",
			37: "left",
			38: "up",
			39: "right",
			40: "down",
			45: "insert",
			46: "del",
			59: ";",
			61: "=",
			96: "0",
			97: "1",
			98: "2",
			99: "3",
			100: "4",
			101: "5",
			102: "6",
			103: "7",
			104: "8",
			105: "9",
			106: "*",
			107: "+",
			109: "-",
			110: ".",
			111: "/",
			112: "f1",
			113: "f2",
			114: "f3",
			115: "f4",
			116: "f5",
			117: "f6",
			118: "f7",
			119: "f8",
			120: "f9",
			121: "f10",
			122: "f11",
			123: "f12",
			144: "numlock",
			145: "scroll",
			173: "-",
			186: ";",
			187: "=",
			188: ",",
			189: "-",
			190: ".",
			191: "/",
			192: "`",
			219: "[",
			220: "\\",
			221: "]",
			222: "'"
		};
		
		var shiftNums = {
			"`": "~",
			"1": "!",
			"2": "@",
			"3": "#",
			"4": "$",
			"5": "%",
			"6": "^",
			"7": "&",
			"8": "*",
			"9": "(",
			"0": ")",
			"-": "_",
			"=": "+",
			";": ": ",
			"'": '"',
			",": "<",
			".": ">",
			"/": "?",
			"\\": "|"
		};
		
		function trigger(key,o){
			if (o instanceof Function) {
				o = {command: o};
			};
			o.trigger = key;
			return o;
		};
		
		function combo(keys,o){
			if (o instanceof Function) { o = {command: o} };
			o.keys = keys;
			return o;
		};
		
		IM.KeyBindings = [
			
			combo(['super+z'],function(sel) { return sel.view().history().undo(); }),
			combo(["super+shift+z"],function(sel) { return sel.view().history().redo(); }),
			combo(["alt+super+p"],function(sel) { return sel.view().history().play(); }),
			// combo ["alt+shift+r"] do |sel| sel.view.history.play
			
			combo(["super+s"],{command: "save"}),
			combo(["super+b"],{command: "run"}),
			combo(["alt+super+s"],{command: "saveSession"}),
			combo(["alt+shift+l"],{command: "reparse"}),
			combo(["alt+shift+k"],{command: "reparseExtent"}),
			
			combo(["super+a"],function(sel) { return sel.selectAll(); }),
			
			
			combo(['tab'],{context: function(sel) { return sel.text().indexOf('\n') >= 0; },
			command: function(sel) {
				sel.expandToLines();
				var region = sel.region();
				var nodes = sel.view().nodesInRegion(region);
				
				nodes.map(function(match) {
					if (match.node.matches('._imnewline')) {
						console.log('found tab in selection',match);
						if (match.mode != 'start') {
							return match.node.indent();
						};
					};
				});
				return sel.dirty();
			}}),
			
			
			
			combo(["shift+tab"],{context: function(sel) { return sel.text().indexOf('\n') >= 0; },
			command: function(sel) {
				sel.expandToLines();
				var region = sel.region();
				var nodes = sel.view().nodesInRegion(region);
				
				nodes.map(function(match) {
					if (match.node.matches('._imnewline') && match.mode != 'start') {
						return match.node.undent();
					};
				});
				return sel.dirty();
			}}),
			
			combo(["shift+tab"],{context: function(e) {
				return true; // String(e.view.selection).indexOf('\n') >= 0
			},
			command: function(sel) {
				console.log('try undent');
				return true;
			}}),
			
			combo(["alt+shift+return"],function(sel) { return console.log('prettify'); }),
			
			combo(["backspace"],{context: function(e) {
				console.log('deleteLeftRight backspace?!?',e.region(),e.region().peek(-1,1));
				return idx$(e.region().peek(-1,1),['[]','{}','<>','()','""',"''"]) >= 0;
			},
			
			command: function(sel) {
				console.log('moving!!');
				sel.expand(-1,1);
				return sel.erase();
			}}),
			
			combo(["backspace"],{context: function(sel,o) {
				var reg = sel.region();
				if (reg.size() == 0) {
					if (o.node = reg.prevNode('._impair,._imstr')) {
						return true;
					};
				};
			},
			
			command: function(sel,o) { var v_;
			return (sel.setRegion(v_ = o.node.region().clone().reverse()),v_); }}),
			
			combo(["backspace"],{context: function(sel,o) {
				if (sel.text() && !util.stringIsBalanced(sel.text())) {
					return true;
				};
			},
			command: function(sel,o) { return true; }}),
			
			combo(["backspace"],function(sel) { return sel.erase(); }),
			combo(["shift+backspace"],function(sel) { return sel.erase(); }),
			combo(["alt+backspace"],function(sel) { return sel.erase(IM.WORD_START); }),
			combo(["super+backspace"],function(sel) { return sel.erase(IM.LINE_START); }),
			
			combo(["return",'shift+return','super+return'],function(sel) {
				var ind = sel.indent();
				if (util.increaseIndent(sel.head().peekbehind())) { ind += '\t' };
				
				// should not happen in string
				if (idx$(sel.region().peek(-1,1),['[]','{}','()']) >= 0) {
					sel.insert('\n\t' + ind);
					sel.view().insert(sel.head().loc(),'\n' + ind);
				} else {
					sel.insert('\n' + ind);
				};
				
				return true;
			}),
			
			
			combo(['space','shift+space'],function(sel) {
				if (sel.region().peek(-1,1) == '<>') {
					sel.move(1).erase();
				};
				
				return sel.insert(' ');
			}),
			
			combo(['tab'],function(sel) { return sel.insert('\t'); }),
			
			
			combo(['super+up'],function(sel) {
				sel.collapse().head().set(0,0).normalize();
				return sel.dirty();
			}),
			
			combo(['super+down'],function(sel) {
				sel.collapse().head().set(100000,0).normalize();
				return sel.dirty();
			}),
			
			combo(['super+u'],function(sel,o) {
				console.log(sel.target(),"found ut!!!");
				return console.log(sel.target().bubble('unwrap',{}));
			}),
			
			combo(['alt+super+r'],function() { return window.location.reload(); })
		];
		
		IM.Triggers = [
			
			trigger('|',{context: function(sel) { return sel.region().peek(-1,1) == '||'; },
			command: function(sel) { return sel.move(1); }}),
			
			trigger('[',function(sel) { return sel.insert('[$0]'); }),
			trigger('|',function(sel) { return sel.insert('|$0|'); }),
			trigger('(',function(sel) { return sel.insert('($0)'); }),
			trigger('{',function(sel) { return sel.insert('{$0}'); }),
			
			trigger('<',{context: function(sel) { return !sel.peekbehind(/(\b(tag|if|class) |\d\s*$)/); },
			command: function(sel) { return sel.insert('<$0>'); }}),
			
			trigger('"',{context: function(sel,o) {
				if (sel.region().peek(-1,0) == '\\' && (o.node = sel.region().scope(q$('._imstr',self)))) {
					return true;
				};
			},
			command: function(sel) { return sel.insert('"'); }}),
			
			trigger("'",{context: function(sel,o) { return sel.region().peek(-1,1) == "''"; },
			command: function(sel) { return sel.move(1); }}),
			
			trigger("'",{context: function(sel,o) { return o.node = sel.region().scope(q$('._imstr',self)); },
			command: function(sel) { return sel.insert("\\'"); }}),
			
			trigger('"',function(sel) { return sel.insert('"$0"'); }),
			trigger("'",function(sel) { return sel.insert("'$0'"); }),
			
			trigger(']',{context: function(sel) { return sel.region().peek(0,1) == ']'; },
			command: function(sel) { return sel.move(1); }}),
			
			trigger('}',{context: function(sel) { return sel.region().peek(0,1) == '}'; },
			command: function(sel) { return sel.move(1); }}),
			
			trigger(')',{context: function(sel) { return sel.region().peek(0,1) == ')'; },
			command: function(sel) { return sel.move(1); }})
		];
		
		function ShortcutManager(view,bindings){
			this._view = view;
			this._bindings = bindings || IM.KeyBindings;
			this;
		};
		
		global.ShortcutManager = ShortcutManager; // global class 
		ShortcutManager.prototype.view = function (){
			return this._view;
		};
		
		ShortcutManager.prototype.keysForEvent = function (e){
			var combo = [];
			var special = specialKeys[e.which];
			var chr = special || String.fromCharCode(e.which);
			
			chr = chr.toLowerCase(); // unless e:shiftKey
			
			if (e.ctrlKey && special != 'ctrl') { combo.push('ctrl') };
			if (e.altKey && special != 'alt') { combo.push('alt') };
			if (e.metaKey && !e.ctrlKey && special !== 'meta') { combo.push('super') };
			if (e.shiftKey && special != 'shift') { combo.push('shift') };
			if (combo.indexOf(chr) < 0) { combo.push(chr) };
			
			return combo.join('+');
		};
		
		ShortcutManager.prototype.commandsForKeys = function (combo){
			return this._bindings.filter(function(binding) { return binding.keys == combo; });
		};
		
		ShortcutManager.prototype.getShortcut = function (e){
			var combo = this.keysForEvent(e.event());
			console.log(combo);
			
			for (var i = 0, ary = iter$(this._bindings), len = ary.length, cmd; i < len; i++) {
				cmd = ary[i];
				if (cmd.keys.indexOf(combo) >= 0) {
					var o = {};
					// console.log 'found shortcut',combo,cmd:keys
					if (!cmd.context || cmd.context.call(this.view(),this.view().caret(),o,e,this.view())) {
						cmd.data = o;
						return cmd;
					};
				};
			};
			
			return null;
		};
		
		ShortcutManager.prototype.getTrigger = function (view,text){
			for (var i = 0, ary = iter$(IM.Triggers), len = ary.length, cmd; i < len; i++) {
				cmd = ary[i];
				if (cmd.trigger == text) {
					var res = cmd.context ? (cmd.context.call(view,view.caret(),view,text)) : (true);
					if (res) { return cmd };
				};
			};
			return null;
		};
		return ShortcutManager;
		
		
		
		
	
	})()
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 38 */
/***/ function(module, exports) {

	(function(){
		return tag$.defineTag('imcaptor', 'input', function(tag){
			
			tag.prototype.select = function (){
				if (!this.dom().value) {
					this.dom().value = 'x';
				};
				this.dom().select();
				return this;
			};
			
			tag.prototype.build = function (){
				var self = this;
				tag.__super__.build.apply(self,arguments);
				self.dom().onfocus = function(e) {
					console.log('dom onfocus!!!!');
					var event = Imba.Event.wrap({type: 'inputfocus',target: self.dom()});
					return event.process();
				};
				
				self.dom().onblur = function(e) {
					console.log('dom onblur!!!!',e);
					var event = Imba.Event.wrap({type: 'inputblur',target: self.dom(),relatedTarget: e.relatedTarget});
					return event.process();
					// Imba.Events.trigger('inputblur',dom)
				};
				
				return self;
			};
		});
	
	})()

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// disabling logs for now
		// console:log = do true
		// externs;
		
		var OPEN = ['"',"'",'(','[','{','<'];
		var CLOSE = ['"',"'",')',']','}','>'];
		
		if (Imba.Events) {
			Imba.Events.register(['copy','paste','cut','beforecut','beforepaste','beforecopy','keypress']);
		};
		
		var Logger = __webpack_require__(36).Logger;
		var History = __webpack_require__(35).History;
		var Buffer = __webpack_require__(40).Buffer;
		var Observer = __webpack_require__(41).Observer;
		
		var Region = __webpack_require__(27).Region;
		var hints$ = __webpack_require__(42), Hints = hints$.Hints, Hint = hints$.Hint;
		var Highlighter = __webpack_require__(29).Highlighter;
		
		var util = __webpack_require__(34);
		
		__webpack_require__(43);
		
		__webpack_require__(44);
		
		tag$.defineTag('imdims', function(tag){
			
			tag.prototype.ch = function (){
				// uncache
				if (this._ow != this.dom().offsetWidth) {
					this._ow = this.dom().offsetWidth;
					this._ch = null;
				};
				
				return this._ch || (this._ch = this.dom().getBoundingClientRect().width);
			};
		});
		
		tag$.defineTag('imviewbody');
		
		tag$.defineTag('imview', function(tag){
			
			
			
			tag.prototype.filename = function(v){ return this._filename; }
			tag.prototype.setFilename = function(v){ this._filename = v; return this; };
			
			
			
			tag.prototype.observer = function(v){ return this._observer; }
			tag.prototype.setObserver = function(v){ this._observer = v; return this; };
			
			
			tag.prototype.history = function(v){ return this._history; }
			tag.prototype.setHistory = function(v){ this._history = v; return this; };
			
			
			tag.prototype.hints = function(v){ return this._hints; }
			tag.prototype.setHints = function(v){ this._hints = v; return this; };
			
			
			tag.prototype.logger = function(v){ return this._logger; }
			tag.prototype.setLogger = function(v){ this._logger = v; return this; };
			
			
			tag.prototype.shortcuts = function(v){ return this._shortcuts; }
			tag.prototype.setShortcuts = function(v){ this._shortcuts = v; return this; };
			
			tag.prototype.__focusNode = {watch: 'focusNodeDidSet',name: 'focusNode'};
			tag.prototype.focusNode = function(v){ return this._focusNode; }
			tag.prototype.setFocusNode = function(v){
				var a = this.focusNode();
				if(v != a) { this._focusNode = v; }
				if(v != a) { this.focusNodeDidSet && this.focusNodeDidSet(v,a,this.__focusNode) }
				return this;
			};
			
			
			tag.prototype.caret = function(v){ return this._caret; }
			tag.prototype.setCaret = function(v){ this._caret = v; return this; };
			
			
			tag.prototype.frames = function(v){ return this._frames; }
			tag.prototype.setFrames = function(v){ this._frames = v; return this; };
			
			
			tag.prototype.readonly = function(v){ return this._readonly; }
			tag.prototype.setReadonly = function(v){ this._readonly = v; return this; };
			
			tag.prototype.highlighter = function (){
				return Highlighter;
			};
			
			tag.prototype.lineHeight = function (){
				return this._dims.dom().offsetHeight;
			};
			
			tag.prototype.charWidth = function (){
				return this._dims.ch();
			};
			
			tag.prototype.isReadOnly = function (){
				return this.history().mode() == 'play';
			};
			
			tag.prototype.tabSize = function (){
				return 4;
			};
			
			tag.prototype.build = function (){
				// console.log 'build imview'
				VIEW = this;
				this.setTabindex(0);
				
				this._readonly = false;
				this._logger = new Logger(this);
				this._frames = 0;
				this._changes = 0;
				
				this._hints = new Hints(this);
				this._buffer = new Buffer(this);
				this._history = new History(this);
				this._shortcuts = new ShortcutManager(this);
				this.render();
				this._observer = new Observer(this);
				this.caret().setRegion(new Region(0,0,this.root(),this));
				
				// bind to mousemove of dom?
				
				this.dom().addEventListener('mouseover',function(e) { return Imba.Events.delegate(e); });
				this.dom().addEventListener('mouseout',function(e) { return Imba.Events.delegate(e); });
				return this;
			};
			
			tag.prototype.onmouseover = function (e){
				return e.halt();
			};
			
			tag.prototype.onmouseout = function (e){
				return e.halt();
			};
			
			tag.prototype.setInput = function (input){
				
				if (input != this._input) {
					this._input = input;
					// console.log 'set input!!!',@input
					this._input.dom()._responder = this.dom();
				};
				return this;
			};
			
			tag.prototype.input = function (){
				return this._input || this._caret.input();
			};
			
			// called every frame - looking for changed nodes to deal with
			// to deal with mutations.
			tag.prototype.tick = function (){
				this._frames++;
				this.history().tick();
				this.render();
				if (this._dirty) this.repair();
				return this;
			};
			
			tag.prototype.commit = function (){
				return this.tick();
			};
			
			tag.prototype.log = function (){
				var logger_;
				(logger_ = this.logger()).log.apply(logger_,arguments);
				return this;
			};
			
			tag.prototype.edited = function (){
				var self = this;
				self._changes++;
				self._dirty = true;
				self._buffer.refresh();
				
				self.view().hints().rem(function(hint) {
					return hint.group() == 'runtime';
				});
				
				self.hints().cleanup();
				
				self.delay('didchange',50,function() {
					return Imba.Events.trigger('edited:async',self,{data: self});
				});
				
				// we can improve how/when we choose to annotate.
				// currently we do it after every edit - but it should
				// really only be needed when we have changed identifiers.
				// should also only reannotate the closest known scope,
				// but this comes later with refactoring from whole files
				// to scopes.
				self.delay('annotate',500,function() { return self.annotate(); });
				self.delay('recompile',-1); // cancel recompilation
				return self;
			};
			
			tag.prototype.dirty = function (){
				return this;
			};
			
			tag.prototype.activate = function (){
				this.flag('active');
				return this;
			};
			
			tag.prototype.deactivate = function (){
				this.unflag('active');
				return this;
			};
			
			tag.prototype.body = function (){
				var t0;
				return (t0 = this._body=this._body || tag$.$imviewbody().setRef('body',this)).setContent([
					(this._dims = this._dims || tag$.$imdims().setRef('dims',this)).setText("x").end(),
					(this._caret = this._caret || tag$.$imcaret().setRef('caret',this)).setView(this).end(),
					(this._root = this._root || tag$.$imroot().setRef('root',this).flag('imba')).setView(this).end()
				],2).end();
			};
			
			tag.prototype.header = function (){
				return null;
			};
			
			tag.prototype.footer = function (){
				return null;
			};
			
			tag.prototype.overlays = function (){
				return (this._overlays = this._overlays || tag$.$scrimbla_overlays().setRef('overlays',this)).setView(this).end();
			};
			
			tag.prototype.render = function (){
				return this.flag('readonly',this.isReadOnly()).setChildren([
					this.header(),
					this.body(),
					this.footer()
				],1).synced();
			};
			
			tag.prototype.view = function (){
				return this;
			};
			
			tag.prototype.sel = function (){
				return this.caret();
			};
			
			tag.prototype.root = function (){
				return this._root;
			};
			
			tag.prototype.buffer = function (){
				return this._buffer;
				// root.code
			};
			
			tag.prototype.size = function (){
				return this.root().size();
			};
			
			tag.prototype.load = function (code,o){
				var parsed;
				if(o === undefined) o = {};
				this.setFilename(o.filename);
				// console.log 'loading file with filename',o:filename
				// observer.pause do
				if (o.html) {
					this.root().dom().innerHTML = o.html;
					this._buffer.refresh();
					this.history().onload(this.code());
				} else {
					// should use our new parser
					if (parsed = this.parse(code)) {
						if (parsed.highlighted) {
							this.root().dom().innerHTML = parsed.highlighted;
						} else {
							this.root().dom().textContent = code;
						};
					};
					this._buffer.refresh();
					this.history().onload(code);
					this.annotate();
				};
				return this;
			};
			
			tag.prototype.parse = function (code){
				// here we can parse the full code
				return {highlighted: IM.parse(code)};
			};
			
			tag.prototype.refocus = function (){
				if (document.activeElement != this.input().dom()) { this.input().focus() };
				return this;
			};
			
			tag.prototype.oninputfocus = function (e){
				console.log('oninputfocus!!');
				VIEW = this; // hack
				return this.flag('focus');
			};
			
			tag.prototype.oninputblur = function (e){
				return this.unflag('focus');
			};
			
			tag.prototype.onfocusin = function (e){
				VIEW = this; // hack
				this.flag('focus');
				console.log('focus',e);
				return this;
			};
			
			tag.prototype.onfocusout = function (e){
				this.unflag('focus');
				console.log('unfocus',e);
				return this;
			};
			
			tag.prototype.oninput = function (e){
				return this;
			};
			
			tag.prototype.ontextinput = function (e){
				return this;
			};
			
			tag.prototype.execAction = function (action,keydown){
				var command_;
				if (action.command instanceof Function) {
					return action.command.call(this,this.caret(),action.data || {event: keydown},this);
				} else if ((typeof (command_ = action.command)=='string'||command_ instanceof String)) {
					this.log('command is string',action.command);
					var ev = Imba.Events.trigger(action.command,this,{data: action});
					this.log(ev);
					return this;
				};
			};
			
			tag.prototype.tryCommand = function (cmd,target,params){
				if(params === undefined) params = [];
				if (cmd.context) {
					var guard = cmd.context.apply(target || this,params);
					if (!guard) { return false };
				};
				
				if (cmd.command instanceof Function) {
					return cmd.command.apply(target || this,params);
				};
			};
			
			
			
			tag.prototype.onkeydown = function (e){
				var arr;
				VIEW = this; // hack
				e.halt();
				// var combo = e.keycombo
				var combo = this.shortcuts().keysForEvent(e.event());
				var action = this.shortcuts().getShortcut(e);
				var ins = null;
				
				var shift = (/\bshift\b/).test(combo);
				var alt = (/\balt\b/).test(combo);
				var sup = (/\bsuper\b/).test(combo);
				
				// log 'imview keydown',combo
				
				if (action) {
					// console.log 'action here?!',action
					if (this.execAction(action,e)) { e.cancel() };
					return;
				};
				
				// move these into commands as well
				// thisshould move this into commands instead
				if (arr = combo.match(/\b(left|right|up|down)/)) {
					this.hints().activate();
					
					var isCollapsed = this.caret().isCollapsed();
					var ends = this.caret().ends();
					
					shift ? (this.caret().decollapse()) : (this.caret().collapse());
					
					if (arr[0] == 'down') {
						this.caret().moveDown();
						return e.cancel();
					} else if (arr[0] == 'up') {
						this.caret().moveUp();
						return e.cancel();
					};
					
					var mode = IM.CHARACTERS;
					var dir = 0;
					
					if (arr[0] == 'left') {
						dir = -1;
					};
					
					if (arr[0] == 'right') {
						dir = 1;
					};
					
					if (alt) {
						mode = dir > 0 ? (IM.WORD_END) : (IM.WORD_START);
					} else if (sup) {
						mode = dir > 0 ? (IM.LINE_END) : (IM.LINE_START);
					} else if (!shift && !isCollapsed) {
						this.caret().head().set(dir > 0 ? (ends[1]) : (ends[0]));
						this.caret().dirty(); // should not need to call this all the time
						return e.cancel();
					};
					
					this.caret().move(dir,mode);
					
					return e.cancel();
				};
				
				if (e.event().which == 229) {
					return e.halt();
				};
				
				if (combo.match(/^super\+(c|v|x)$/)) {
					// console.log 'matching combo for copy paste'
					e.halt();
					this._awaitCombo = true;
					this.refocus();
					return;
				};
				
				if (ins != null) {
					e.halt().cancel();
					this.caret().insert(ins);
					return this;
				};
				
				return this;
			};
			
			tag.prototype.onkeypress = function (e){
				if (this._awaitCombo) {
					this._awaitCombo = false;
					return e.halt();
				};
				
				e.halt();
				var text = String.fromCharCode(e.event().charCode);
				e._text = text;
				e.cancel();
				this.ontype(e);
				return this;
			};
			
			tag.prototype.ontextinput = function (e){
				e.halt().cancel();
				e._text = e.event().data;
				this.ontype(e);
				return this;
			};
			
			tag.prototype.onkeyup = function (e){
				e.halt();
				return this;
			};
			
			tag.prototype.oninput = function (e){
				e.halt();
				return this;
			};
			
			tag.prototype.ontype = function (e){
				try {
					var ins = e._text;
					// log 'ontype',e,ins
					
					var spans = this.view().nodesInRegion(this.caret().region(),false,true);
					var target = spans[0];
					var cmd;
					
					if (spans.length == 1) {
						// log 'single node for nodesInRegion',target:node
						if (cmd = target.node[("trigger-" + ins)]) {
							// log "found combo for this!??!",cmd
							if (this.tryCommand(cmd,this.caret(),[target.node,target])) {
								return this;
							};
						};
					};
					
					cmd = this.shortcuts().getTrigger(this,ins);
					
					if (cmd && (cmd.command instanceof Function)) {
						// log 'found command!!',cmd
						// should rather run tryCommand?!?
						return cmd.command(this.caret(),this,ins,e);
					} else {
						if (ins) { return this.caret().insert(ins) };
					};
				} catch (e) {
					return this.log('error from ontype');
				};
			};
			
			tag.prototype.onbackspace = function (e){
				e.cancel().halt();
				this.caret().erase();
				return;
			};
			
			tag.prototype.onbeforecopy = function (e){
				if (true) { console.log('onbeforecopy',e) };
				this.input().select();
				var data = e.event().clipboardData;
				data.setData('text/plain',this.caret().text());
				return e.halt();
			};
			
			tag.prototype.oncopy = function (e){
				if (true) { console.log('oncopy',e,this.caret().text()) };
				var data = e.event().clipboardData;
				data.setData('text/plain',this.caret().text());
				e.halt().cancel();
				this.refocus();
				return;
			};
			
			tag.prototype.oncut = function (e){
				if (true) {
					console.log('oncut',e);
				};
				var data = e.event().clipboardData;
				data.setData('text/plain',this.caret().text());
				e.halt().cancel();
				return this.caret().erase();
			};
			
			tag.prototype.onbeforepaste = function (e){
				return console.log('onbeforepaste',e);
			};
			
			tag.prototype.onpaste = function (e){
				console.log('onpaste',e);
				var data = e.event().clipboardData;
				var text = data.getData('text/plain');
				e.halt().cancel();
				this.caret().insert(text);
				this.refocus();
				return this.repair();
				// edit text: data
			};
			
			tag.prototype.refresh = function (){
				// focusNode = sel.node # only if it is inside the scope?
				// caret.region = sel.region
				this.caret().render();
				return this;
			};
			
			tag.prototype.exec = function (o){
				var fn = o.command;
				var args = o.args || [];
				var ev = new Imba.Event({type: 'command',target: this.dom(),data: o});
				ev.setData(o);
				ev.process();
				
				return;
			};
			
			tag.prototype.ontouchstart = function (touch){
				var ary;
				this._rect = this._body.dom().getBoundingClientRect();
				
				if (touch.button() != 0) { return };
				
				if (touch._touch) {
					// is it not redirected?
					return touch.redirect({});
				};
				
				var e = touch.event();
				e.preventDefault();
				// see if shift is down? should change behaviour
				var shift = e.shiftKey;
				// log 'ontouchstart',touch,touch.x,touch.y,e,touch.button
				var ary = iter$(this.rcForTouch(touch));var r = ary[0],c = ary[1];
				
				if (shift) {
					this.caret().selectable();
				} else {
					this.caret().collapse();
				};
				
				this.caret().head().set(r,c).normalize();
				this.caret().dirty();
				// console.log 'touch start refocus?'
				this.refocus();
				return this;
			};
			
			tag.prototype.xyToRowCol = function (x,y){
				var col = Math.max(Math.round(x / this.charWidth()),0);
				var row = Math.max(Math.ceil(y / this.lineHeight()),1);
				return [row - 1,col];
			};
			
			tag.prototype.rcForTouch = function (touch){
				var x = Math.max(touch.x() - this._rect.left,0);
				var y = Math.max(touch.y() - this._rect.top,0);
				return this.xyToRowCol(x,y);
			};
			
			tag.prototype.ontouchupdate = function (touch){
				var ary;
				if (touch.button() != 0) { return };
				var ary = iter$(this.rcForTouch(touch));var r = ary[0],c = ary[1];
				this.caret().selectable();
				this.caret().head().set(r,c).normalize();
				this.caret().dirty();
				return this;
			};
			
			tag.prototype.ontouchend = function (touch){
				var ary;
				if (touch.button() != 0) { return };
				var ary = iter$(this.rcForTouch(touch));var r = ary[0],c = ary[1];
				this.caret().head().set(r,c).normalize();
				this.caret().dirty();
				return this;
			};
			
			tag.prototype.erase = function (reg,edit){
				reg = Region.normalize(reg,this);
				
				var text = reg.text();
				this.history().onerase(reg,text,edit);
				
				var spans = this.nodesInRegion(reg,false,true);
				// gropu the nodes
				this.observer().pause(function() {
					if (spans.length > 1) {
						spans[1].node.setPrev(tag$.$iminsert().flag('dirty').end());
					} else if (spans[0] && spans[0].mode == 'all') {
						console.log('removing single node?!');
						var before = spans[0].node.prev();
						
						spans[0].node.setPrev(tag$.$iminsert().flag('dirty').end());
					};
					
					for (var i = 0, ary = iter$(spans), len = ary.length, sel, res = []; i < len; i++) {
						// buffer need to updated during this?
						sel = ary[i];
						res.push(sel.node.erase(sel.region,sel.mode,edit));
					};
					return res;
				});
				
				// delay('annotate',500) do annotate
				return this.erased(reg);
			};
			
			tag.prototype.inserted = function (loc,str){
				console.log('inserted',loc,str);
				var reg = new Region(loc,loc + str.length,null,this);
				for (var i = 0, ary = iter$(this.hints()), len = ary.length; i < len; i++) {
					ary[i].adjust(reg,true);
				};
				// hints.cleanup
				this.edited();
				if (util.isWhitespace(str)) this.repair();
				return this;
			};
			
			tag.prototype.erased = function (reg){
				for (var i = 0, ary = iter$(this.hints()), len = ary.length; i < len; i++) {
					ary[i].adjust(reg,false);
				};
				this.edited();
				return this.repair(); // repair synchronously
			};
			
			tag.prototype.insert = function (point,str,edit){
				if (point instanceof Region) {
					if (point.size() > 0) {
						this.logger().warn('uncollapsed region in insert is not allowed');
					};
					point = point.start();
				};
				
				this.log('insert',point,str);
				// should maybe create this as a command - and then make it happen?
				
				this.history().oninsert(point,str,edit);
				
				// log 'insert in view'
				var spans = this.nodesInRegion(Region.normalize(point,this),false);
				var mid = spans[0];
				var target = mid || spans.prev || spans.next;
				var lft = spans.lft,rgt = spans.rgt;
				var node;
				var reg;
				
				// log spans,mid,lft,rgt
				this.log('before and after',lft,rgt,str);
				
				if (mid) {
					this.log('insert mid',mid.node);
					mid.node.insert(mid.region,str,edit,mid);
				} else {
					
					while (rgt){
						if (rgt.canPrepend(str)) {
							this.log('prepend',rgt,str);
							rgt.insert('prepend',str,edit);
							return this.inserted(point,str);
						} else if (rgt.isFirst()) {
							rgt = rgt.parent();
							continue;
						};
						
						break;
					};
					
					// find the closest parent
					while (lft){
						if (lft.canAppend(str)) {
							this.log('append',lft,str);
							lft.insert('append',str,edit);
							return this.inserted(point,str);
						} else if (lft.isLast()) {
							lft = lft.parent();
							continue;
						};
						
						break;
					};
					
					node = tag$.$iminsert().end();
					
					if (lft) {
						lft.setNext(node);
					} else if (rgt) {
						rgt.setPrev(node);
					} else {
						// must be empty
						this.root().dom().appendChild(node.dom());
					};
					
					node.insert('append',str,edit);
				};
				
				return this.inserted(point,str);
			};
			
			tag.prototype.onmutations = function (){
				return this;
			};
			
			tag.prototype.repair = function (){
				this._dirty = false;
				var els = this.dom().getElementsByClassName('dirty');
				
				if (els.length) {
					// logger.log "{els:length} dirty nodes to repair"
					
					for (var muts = [], i = 0, ary = iter$(els), len = ary.length; i < len; i++) {
						muts.push(tag$wrap(ary[i]));
					};
					
					for (var i = 0, ary = iter$(muts), len = ary.length, mut; i < len; i++) {
						mut = ary[i];
						mut.unflag('dirty');
						mut.mutated(muts);
					};
				};
				return this;
			};
			
			tag.prototype.code = function (){
				return this._root.dom().textContent;
			};
			
			tag.prototype.focusNodeDidSet = function (new$,old){
				if (!this.root().contains(new$)) { return };
				
				var path = [];
				
				while (new$ && new$ != this.root()){
					path.push(new$);
					new$ = new$.parent();
				};
				
				q$('.focus_',this).map(function(n) {
					if (path.indexOf(n) < 0) { return n.unflag('focus_') };
				});
				
				for (var i = 0, len = path.length; i < len; i++) {
					path[i].flag('focus_');
				};
				return this;
			};
			
			
			tag.prototype.recompile = function (){
				// should happen in a separate thread - and be delayed
				console.log('recompile');
				var res;
				
				try {
					res = Imbac.compile(this.code(),{bare: true});
				} catch (e) { };
				
				if (res) {
					this.compiled(res);
				};
				return this;
			};
			
			tag.prototype.reparse = function (){
				this.log('reparse');
				this.root().rehighlight({inner: true});
				return this;
			};
			
			tag.prototype.compiled = function (res){
				return this;
			};
			
			tag.prototype.onrunerror = function (e){
				console.log('onrunerror',e);
				return this;
			};
			
			tag.prototype.addError = function (msg,loc){
				var node;
				var reg = Region.normalize(loc,this);
				console.log('found warnings',reg,msg,loc);
				if (node = this.nodeAtRegion(reg)) {
					this.log('node at region is?!',node);
					msg = msg.split(/error at (\[[\d\:]*\])\:\s*/).pop();
					node.flag('err');
					node.setAttribute('error',msg);
				};
				this.delay('annotate',-1);
				return this;
			};
			
			
			
			tag.prototype.annotate = function (){
				// console.log 'annotate'
				
				var self = this;
				var state = self.root().codeState();
				var code = state.code;
				
				var apply = function(meta) {
					var vars = [];
					for (var i = 0, ary = iter$(meta.scopes), len = ary.length; i < len; i++) {
						for (var j = 0, items = iter$(ary[i].vars), len_ = items.length; j < len_; j++) {
							vars.push(items[j]);
						};
					};
					
					var warnings = meta.warnings || [];
					var oldWarnings = self.hints().filter(function(hint) { return hint.group() == 'analysis'; });
					
					if (oldWarnings) {
						// could intelligently keep them instead
						self.hints().rem(oldWarnings);
					};
					
					for (var i = 0, ary = iter$(warnings), len = ary.length, warn; i < len; i++) {
						warn = ary[i];
						warn.type || (warn.type = 'error');
						warn.group = 'analysis';
						self.hints().add(warn).activate();
					};
					
					if (warnings.length) { return self };
					
					var nodes = IM.textNodes(self.root().dom(),true);
					// what about removing old warnings?
					
					var map = {};
					for (var i = 0, ary = iter$(nodes), len = ary.length, node; i < len; i++) {
						node = ary[i];
						map[node._loc] = node;
					};
					
					// get textNodes with mapping(!)
					for (var i1 = 0, len = vars.length; i1 < len; i1++) {
						for (var k = 0, ary = iter$(vars[i1].refs), len_ = ary.length, ref; k < len_; k++) {
							ref = ary[k];
							var a = ref.loc[0];
							var b = ref.loc[1];
							var eref = ("v" + i1);
							
							if (map[a]) {
								var dom = map[a].parentNode;
								var oldRef = dom.getAttribute('eref');
								// console.log 'setting the ref for node?',dom,dom.@tag
								tag$wrap(dom).setEref(eref);
								// if dom.@tag
								// 	dom.@tag.eref = eref
								// else
								// 	dom.setAttribute('eref',eref) unless oldRef == eref
								// 	dom:classList.add('lvar')
							};
						};
					};
					
					return;
				};
				
				try {
					
					console.time('analyze');
					IM.worker().analyze(code,{bare: true},function(res) {
						console.log('result from worker analyze');
						console.timeEnd('analyze');
						
						if (res.data) {
							console.time('annotate');
							apply(res.data);
							return console.timeEnd('annotate');
						};
					});
				} catch (e) {
					self.log('error from annotate',e);
				};
				
				return self;
			};
			
			tag.prototype.oncommand = function (e,c){
				if (this[c.command] instanceof Function) {
					this[c.command].call(this,c.args || []);
					e.halt();
				};
				return this;
			};
			
			tag.prototype.dumpState = function (o){
				if(o === undefined) o = {};
				return {
					html: this.root().dom().innerHTML,
					code: this.root().code(),
					selection: this.caret().region(),
					timestamp: new Date()
				};
			};
			
			tag.prototype.loadState = function (o){
				var self = this;
				if(o === undefined) o = {};
				self.observer().pause(function() {
					var v_;
					if (o.html) {
						self.root().dom().innerHTML = o.html;
					} else if (o.code) {
						self.load(o.code);
					};
					if (o.selection) {
						return (self.caret().setRegion(v_ = o.selection),v_);
					};
				});
				return self;
			};
			
			tag.prototype.loadSession = function (session){
				this.history().load(session);
				this.history().play();
				return this;
			};
			
			tag.prototype.textNodes = function (rel){
				if(rel === undefined) rel = this.root();
				return IM.textNodes(rel);
			};
			
			// Should be separate from the viewcode?
			tag.prototype.regionForNode = function (node,rel){
				if(rel === undefined) rel = this.root();
				var el = node._dom || node;
				var len = el.textContent.length;
				var rng = document.createRange();
				rng.setStart(rel._dom || rel,0);
				rng.setEnd(node._dom || node,0);
				var pre = rng.toString();
				return new Region(pre.length,pre.length + len,rel,this);
			};
			
			// Should merge with nodesInRegion
			tag.prototype.nodeAtRegion = function (region,exact){
				if(exact === undefined) exact = false;
				console.time('nodeAtRegion');
				var rel = this.root();
				var a = region.a();
				var b = region.b();
				
				var nodes = this.textNodes(rel);
				// move into region instead?
				var pos = 0;
				var match = null;
				var adist,bdist,str,len;
				
				for (var i = 0, ary = iter$(nodes), len_ = ary.length, node; i < len_; i++) {
					// console.log 'looking through nodes'
					node = ary[i];
					adist = a - pos;
					bdist = b - pos;
					str = node.textContent;
					len = str.length;
					
					if (adist >= 0 && adist < len) {
						// console.log 'found starting point?',node,str,adist
						match = node;
						break;
						// return tag(node:parentNode)
					};
					
					if (bdist >= 0 && bdist < len) {
						// console.log 'found ending point',node,str,bdist
						// range.setEnd(node,bdist)
						break;
					};
					
					
					pos += len;
				};
				
				var el = tag$wrap(match.parentNode);
				// we want to match the one that is full length
				if (exact && len < region.size()) {
					while (el){
						// be careful
						var elreg = el.region();
						if (region.equals(elreg)) { return el };
						el = el.parent();
					};
				};
				
				console.timeEnd('nodeAtRegion');
				return match ? (tag$wrap(match.parentNode)) : (null);
			};
			
			tag.prototype.nodesForEntity = function (ref){
				return q$('[eref="'+("" + ref)+'"]',this);
			};
			
			// does not need to belong to view directly
			tag.prototype.nodesInRegion = function (region,includeEnds,generalize){
				if(includeEnds === undefined) includeEnds = true;
				if(generalize === undefined) generalize = false;
				console.time('nodesInRegion');
				region = Region.normalize(region,this).normalize();
				var a = region.start();
				var b = region.end();
				
				// can be optimized by supplying the regions
				var nodes = IM.textNodes(region.root() || this.root());
				var matches = [];
				var match;
				var el;
				// move into region instead?
				matches.includeEnds = includeEnds;
				matches.region = region;
				
				var pos = 0;
				var ends = [];
				
				for (var i1 = 0, ary = iter$(nodes), len_ = ary.length, node; i1 < len_; i1++) {
					// console.log 'looking through nodes'
					node = ary[i1];
					var adist = a - pos;
					var bdist = b - pos;
					var str = node.textContent;
					var len = str.length;
					
					if ((pos + len) >= a && pos <= b) {
						el = tag$wrap(node.parentNode);
						var start = Math.max(0,a - pos);
						var end = Math.min(len,Math.max(b - pos,0));
						var par;
						
						match = {
							node: el,
							startOffset: start,
							endOffset: end,
							region: new Region(start,end,el,this),
							size: len
						};
						// log "node at {pos} + {len} - looking in range {a} - {b}"
						var mode = 'all';
						
						if (start == len) {
							mode = 'end';
						} else if (end == 0) {
							mode = 'start';
						} else if (start == 0 && end == len) {
							par = el.dom().parentNode;
							var isOpener = par != this._root.dom() && el.dom() == par.firstChild;
							var isCloser = par != this._root.dom() && el.dom() == par.lastChild;
							
							if (isOpener) {
								match.opens = el.parent();
								ends.push(match);
							};
							
							if (isCloser) {
								end = ends[ends.length - 1];
								if (end && end.opens == el.parent()) {
									end.closer = match;
									match.opener = end;
									ends.pop();
								};
								
								match.closes = el.parent();
							};
							
							mode = 'all';
						} else {
							mode = 'partial';
						};
						
						match.mode = mode;
						matches.push(match);
					};
					
					pos += len;
					if (pos > b) { break; };
				};
				
				var first = matches[0];
				var last = matches[matches.length - 1];
				
				if (first && first.mode == 'end') {
					matches.prev = first;
					matches.lft = first.node;
					
					// if first:node isa IM.Types:close
					// 	matches:lft = first:node.parent
					
					if (!includeEnds) { matches.shift() };
				};
				
				if (last && last.mode == 'start') {
					matches.next = last;
					matches.rgt = last.node;
					
					// if last:node isa IM.Types:open
					// 	matches:rgt = last:node.parent
					
					if (!includeEnds) { matches.pop() };
				};
				
				
				// normalize the nodes in groups
				if (generalize) {
					// console.log 'generalize!',matches
					var i = 0;
					var m;
					while (m = matches[i]){
						if (m.closer) {
							var idx = matches.indexOf(m.closer);
							len = m.opens.size();
							var new$ = {
								mode: 'all',
								region: new Region(0,len,m.opens,this),
								startOffset: 0,
								endOffset: len,
								node: m.opens
							};
							var rem = matches.splice(i,idx - i + 1,new$);
							new$.children = rem;
							// console.log 'slice away the items'
						};
						i++;
					};
				};
				
				console.timeEnd('nodesInRegion');
				return matches;
			};
			
			// should move to Buffer class
			tag.prototype.linecount = function (){
				return this.buffer().linecount();
				// buffer.split('\n')[:length]
			};
			
			// Returns the contents of the region as a string.
			// Returns the character to the right of the point.
			tag.prototype.substr = function (region,len){
				return this.buffer().substr(region,len);
			};
			
			// move into Buffer
			tag.prototype.linestr = function (nr){
				return this.buffer().line(nr);
				// if nr isa Number
				// 	buffer.split('\n')[nr] or ''
			};
			
			tag.prototype.expandRegionTo = function (region,match,forward){
				if(forward === undefined) forward = true;
				var buf = this.buffer().toString();
				var pos = region.start();
				var end = region.end();
				
				if (forward) {
					while (buf[end + 1] != match){
						end++;
					};
				} else {
					while (buf[pos - 1] != match){
						pos--;
					};
				};
				
				return new Region(pos,end,this);
			};
		});
		
		
		return VIEW = null;
	
	})()

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		var Region = __webpack_require__(27).Region;
		
		function Buffer(view){
			this._view = view;
			this._buffer = '';
			this._cache = {};
			this;
		};
		
		exports.Buffer = Buffer; // export class 
		
		
		Buffer.prototype.view = function(v){ return this._view; }
		Buffer.prototype.setView = function(v){ this._view = v; return this; };
		
		Buffer.prototype.set = function (buffer){
			if (buffer == this._buffer) {
				return this;
			};
			
			this._buffer = buffer;
			this._cache = {};
			this._lines = null;
			return this;
		};
		
		Buffer.prototype.refresh = function (){
			return this.set(this.view().root().code());
		};
		
		Buffer.prototype.lines = function (){
			return this._lines || (this._lines = (true) && (
				this._buffer.split('\n')
			));
		};
		
		Buffer.prototype.split = function (){
			return this._buffer.split.apply(this._buffer,arguments);
		};
		
		Buffer.prototype.linecount = function (){
			return this.lines().length;
		};
		
		Buffer.prototype.line = function (nr){
			if ((typeof nr=='number'||nr instanceof Number)) {
				return this.lines()[nr] || '';
			} else {
				return '';
			};
		};
		
		Buffer.prototype.len = function (){
			return this._buffer.length;
		};
		
		// location to 
		Buffer.prototype.locToRc = function (){
			return this;
		};
		
		Buffer.prototype.location = function (){
			return this;
		};
		
		Buffer.prototype.locToRow = function (loc){
			var ln = 0;
			var len = 0;
			for (var i = 0, ary = iter$(this.lines()), len_ = ary.length; i < len_; i++) {
				len += ary[i].length + 1;
				if (loc < len) { return i };
			};
			return this.lines().length;
		};
		
		Buffer.prototype.locToCell = function (loc){
			if (this._cache[loc]) {
				return this._cache[loc];
			};
			
			var pos = loc;
			var col = 0;
			var row = 0;
			var char$;
			
			var buf = this._buffer;
			var tabsize = this._view.tabSize();
			
			// go back to start of line
			// goes through the whole
			while (char$ = buf[pos - 1]){
				if (char$ == '\n') {
					break;
				};
				pos--;
			};
			
			// get column for slice
			while ((pos < loc) && (char$ = buf[pos])){
				if (char$ == '\t') {
					var rest = tabsize - (col % tabsize);
					col += rest;
				} else {
					col += 1;
				};
				pos++;
			};
			
			while (char$ = buf[pos - 1]){
				if (char$ == '\n') {
					row++;
				};
				pos--;
			};
			
			return this._cache[loc] = [row,col];
		};
		
		Buffer.prototype.substr = function (region,len){
			if (region instanceof Region) {
				return this._buffer.substr(region.start(),region.size());
			} else if ((typeof region=='number'||region instanceof Number)) {
				return this._buffer.substr(region,len || 1);
			} else {
				throw 'must be region or number';
			};
		};
		
		Buffer.prototype.toString = function (){
			return this._buffer || '';
		};
		return Buffer;
	
	})()

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var util = __webpack_require__(34);
		
		function Observer(view,cfg){
			var self = this;
			self._active = false;
			self._view = view;
			self._config = cfg || {attributes: false,childList: true,characterData: true,subtree: true};
			self._observer = new MutationObserver(function(muts) { return self.onmutations(muts); });
			self;
		};
		
		exports.Observer = Observer; // export class 
		
		
		Observer.prototype.view = function(v){ return this._view; }
		Observer.prototype.setView = function(v){ this._view = v; return this; };
		
		
		Observer.prototype.config = function(v){ return this._config; }
		Observer.prototype.setConfig = function(v){ this._config = v; return this; };
		
		
		Observer.prototype.active = function(v){ return this._active; }
		Observer.prototype.setActive = function(v){ this._active = v; return this; };
		
		Observer.prototype.resume = function (){
			if (!this._active) {
				this._observer.observe(this.view().root().dom(),this.config());
				this._active = true;
			};
			return this;
		};
		
		Observer.prototype.pause = function (blk){
			var wasActive = this._active;
			this._active = false;
			if (wasActive) { this._observer.disconnect() };
			
			if (blk instanceof Function) {
				blk();
				if (wasActive) this.resume();
			};
			
			return this;
		};
		
		Observer.prototype.paused = function (){
			return !this._active;
		};
		
		Observer.prototype.onmutations = function (mutations){
			var el;
			this.view().logger().group('mutations');
			
			var deep = false;
			var nodes = [];
			for (var i = 0, ary = iter$(mutations), len = ary.length, mut; i < len; i++) {
				mut = ary[i];
				this.view().log('mutation',mut);
				var type = mut.type;
				var target = mut.previousSibling || mut.target;
				
				if (type == 'characterData') {
					this.view().log(("updated code to " + (target.textContent)));
					target = target.parentNode;
				} else if (type == 'childList') {
					deep = true;
					var add = mut.addedNodes;
					if (add.length == 1 && (add[0] instanceof Element)) {
						target = add[0];
					};
				};
				
				this.view().log(target,tag$wrap(target));
				// var added = mut:addedNodes
				// for node in mut:addedNodes
				// if target and target:parentNode # and target.@tag
				if (el = tag$wrap(target)) {
					this.view().log('add target?!');
					if (nodes.indexOf(el) < 0) { nodes.push(el) };
				};
				
				// if we have added a node instead
			};
			
			// mutations are not registered on node-level but on extent
			// not really how this should happen
			
			var common = util.commonAncestor(nodes);
			
			this.view().log('common container for mutations is',common,nodes);
			
			var extent;
			
			if (nodes.length == 1) {
				this.view().log('a single node was mutated',nodes[0]);
				nodes[0].mutated({deep: deep,mutations: mutations});
			} else {
				// collect extents for all nodes?
				// rather make a region expand 
				for (var i = 0, len = nodes.length, node; i < len; i++) {
					node = nodes[i];
					if (extent && extent.contains(node.dom())) { // :nodes.indexOf(node.dom) >= 0
						this.view().log('this node is already part of the extent',node.dom());
					} else {
						extent = node.dirtyExtent();
					};
					// node?.mutated
				};
				
				if (extent) {
					// console.log 'found extent(!)',extent
					this.pause(function() { return true; });
				};
			};
			
			this.view().logger().groupEnd();
			this.view().onmutations({nodes: nodes,mutations: mutations,extent: extent});
			return this;
		};
		return Observer;
		
	
	})()

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var Region = __webpack_require__(27).Region;
		
		var labels = {
			"Unexpected 'TAG_END'": 'Tag closed unexpectedly',
			"Unexpected 'TERMINATOR'": 'Unexpected ⏎',
			"Unexpected 'POST_IF'": 'Missing body in <b>IF</b>'
		};
		
		var rules = [
			[/Uncaught Error: tag (\w+) is not defined/,"tag <b>$1</b> does not exist"]
		];
		
		function Hint(opts,view){
			this._view = view;
			this._data = opts;
			this._active = false;
			this._region = opts.loc ? (Region.normalize(opts.loc,view)) : (null);
			// try to find the node immediately
			this._node = opts.node || this.node();
			this;
		};
		
		exports.Hint = Hint; // export class 
		Hint.build = function (o,view){
			return new this(o,view);
		};
		
		
		
		Hint.prototype.view = function(v){ return this._view; }
		Hint.prototype.setView = function(v){ this._view = v; return this; };
		
		
		Hint.prototype.region = function(v){ return this._region; }
		Hint.prototype.setRegion = function(v){ this._region = v; return this; };
		
		
		Hint.prototype.active = function(v){ return this._active; }
		Hint.prototype.setActive = function(v){ this._active = v; return this; };
		
		Hint.prototype.getAttribute = function (key){
			return this._data[key];
		};
		
		Hint.prototype.setAttribute = function (key,val){
			this._data[key] = val;
			return this;
		};
		
		Hint.prototype.type = function (){
			return this._data.type || 'error';
		};
		
		Hint.prototype.group = function (){
			return this._data.group;
		};
		
		Hint.prototype.ref = function (){
			return this._data.ref;
		};
		
		Hint.prototype.node = function (){
			return this._node || (this._node = this._region && this.view().nodeAtRegion(this._region));
		};
		
		Hint.prototype.row = function (){
			return this.region().row();
		};
		
		Hint.prototype.col = function (){
			return this.region().col();
		};
		
		Hint.prototype.label = function (){
			var lbl;
			return this._label || (this._label = (true) && (
				lbl = this._data.label || this._data.message || 'Hint',
				lbl = lbl.split(/error at (\[[\d\:]*\])\:\s*/).pop(),
				lbl = labels[lbl] || lbl
			));
		};
		
		
		Hint.prototype.activate = function (){
			var node_;
			if (!this._active) {
				// node?.setAttribute('hint',ref)
				this._active = true;
				(node_ = this.node()) && node_.setHint  &&  node_.setHint(this);
			};
			return this;
		};
		
		Hint.prototype.deactivate = function (){
			console.log('deactivate hint!!');
			this.setActive(false);
			return this;
			// cleanup
			// remove
		};
		
		Hint.prototype.prune = function (){
			return this.view().hints().prune(this);
		};
		
		// should make this hint ready to be removed
		Hint.prototype.cleanup = function (){
			if (this._node) {
				if (this._node.hint() == this) { this._node.setHint(null) };
			};
			return this;
		};
		
		Hint.prototype.remove = function (){
			this.view().hints().rem(this);
			return this;
		};
		
		Hint.prototype.changed = function (){
			// console.log 'deactivate on changed!'
			// @deactivate = yes
			this.prune();
			return this;
		};
		
		Hint.prototype.adjust = function (reg,ins){
			if(ins === undefined) ins = true;
			if (this.region().intersects(reg)) {
				// deactivate
				this.prune();
				// @deactivate = yes
			};
			
			this.region().adjust(reg,ins);
			return this;
		};
		
		function Hints(view){
			this._prune = [];
			this._array = [];
			this._map = {};
			this._view = view;
		};
		
		exports.Hints = Hints; // export class 
		var nr = 0;
		
		Hints.prototype.toArray = function (){
			return this._array;
		};
		
		Hints.prototype.get = function (ref){
			return this._map[ref];
		};
		
		Hints.prototype.activate = function (){
			for (var i = 0, ary = iter$(this._array), len = ary.length; i < len; i++) {
				ary[i].activate();
			};
			return this;
		};
		
		// this should take care of deallocating the hint no?
		Hints.prototype.rem = function (hint){
			if (hint instanceof Function) {
				hint = this._array.filter(hint);
			};
			
			if (hint instanceof Array) {
				for (var i = 0, ary = iter$(hint), len = ary.length; i < len; i++) {
					this.rem(ary[i]);
				};
				return hint;
			};
			
			if ((typeof hint=='string'||hint instanceof String)) {
				return this.rem(this.get(hint));
			};
			
			if (this._array.indexOf(hint) >= 0) {
				hint.cleanup();
				this._array.splice(this._array.indexOf(hint),1);
			};
			
			return hint;
		};
		
		Hints.prototype.prune = function (hint){
			if (this._prune.indexOf(hint) < 0) { this._prune.push(hint) };
			return this;
		};
		
		Hints.prototype.clear = function (){
			var arr = this._array;
			this._array = [];
			
			for (var i = 0, ary = iter$(arr), len = ary.length; i < len; i++) {
				ary[i].deactivate();
			};
			return this;
		};
		
		Hints.prototype.cleanup = function (){
			
			var self = this;
			self._array.map(function(item) {
				if (self._prune.indexOf(item) >= 0) {
					item.deactivate();
					return self.rem(item);
				};
			});
			self._prune = [];
			return self;
		};
		
		
		Hints.prototype.filter = function (cb){
			return this._array.filter(cb);
		};
		
		Hints.prototype.add = function (o){
			var ref = o.ref = ("hint" + (nr++));
			if (!((o instanceof Hint))) { o = Hint.build(o,this._view) };
			this._map[ref] = o;
			this._array.push(o);
			return o;
		};
		return Hints;
	
	})()

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var util = __webpack_require__(34);
		var Region = __webpack_require__(27).Region;
		
		function RowCol(row,col,caret){
			if(row === undefined) row = 0;
			if(col === undefined) col = 0;
			if(caret === undefined) caret = null;
			this._row = row;
			this._col = col;
			this._caret = caret;
			this;
		};
		
		
		
		RowCol.prototype.row = function(v){ return this._row; }
		RowCol.prototype.setRow = function(v){ this._row = v; return this; };
		
		
		RowCol.prototype.col = function(v){ return this._col; }
		RowCol.prototype.setCol = function(v){ this._col = v; return this; };
		
		
		RowCol.prototype.caret = function(v){ return this._caret; }
		RowCol.prototype.setCaret = function(v){ this._caret = v; return this; };
		
		RowCol.prototype.view = function (){
			return this.caret().view();
		};
		
		RowCol.prototype.normalize = function (){
			this._col = this.realCol();
			return this;
		};
		
		RowCol.prototype.set = function (row,col){
			var ary;
			if (row instanceof RowCol) {
				col = row.col();
				row = row.row();
				
				// return set(row.row,row.col)
			};
			
			if (row instanceof Region) {
				var ary = iter$(util.rowcol(this.view()._buffer,row.start()));row = ary[0];col = ary[1];
			};
			
			var lc = this.view()._buffer.linecount();
			
			if (row >= lc) {
				row = lc - 1;
				col = 1000;
			};
			
			this._row = row;
			this._col = col;
			return this;
		};
		
		
		RowCol.prototype.move = function (offset){
			this.normalize();
			
			var col = this.realCol() + offset;
			var llen = this.linelen();
			
			var lloc = this.lineloc();
			// find the real offset in characters (not columns)
			
			
			// if offset < 0
			// 	# normalize?
			// 	@col = Math.min(@col,llen)
			
			if (col < 0) {
				if (this._row > 0) {
					this.moveUp();
					this._col = this.linelen();
				} else {
					this._row = 0;
					this._col = 0;
				};
				return this;
			} else if (col > llen) {
				if (this._row >= (this.view()._buffer.linecount() - 1)) {
					return this;
				};
				
				this.moveDown();
				var rest = Math.max(0,col - llen - 1);
				var moves = util.colsForLine(this.linestr().substr(0,rest));
				this._col = moves;
				return this;
			};
			
			// this should work
			this._col = util.colsForLine(this.linestr().substr(0,lloc + offset));
			// @col += offset
			return this;
		};
		
		RowCol.prototype.moveUp = function (len){
			this._row = Math.max(0,this._row - 1);
			return this;
		};
		
		RowCol.prototype.moveDown = function (len){
			console.log('moveDown');
			var lc = this.view()._buffer.linecount(); // split('\n')[:length]
			this._row = this._row + 1;
			if (this._row >= lc) {
				console.log('out of bounds');
				this.setLoc(this.view()._buffer.len());
			};
			return this;
		};
		
		RowCol.prototype.clone = function (){
			return new RowCol(this.row(),this.col(),this.caret());
		};
		
		RowCol.prototype.linelen = function (){
			return util.colsForLine(this.linestr());
		};
		
		RowCol.prototype.lineloc = function (){
			return util.colToLoc(this.linestr(),this.realCol());
		};
		
		RowCol.prototype.realCol = function (){
			var rc = util.colToViewCol(this.linestr(),this._col);
			return rc;
		};
		
		RowCol.prototype.linestr = function (){
			return this.view().linestr(this.row());
		};
		
		RowCol.prototype.peekbehind = function (){
			var str = this.linestr();
			return str.substr(0,util.colToLoc(str,this.realCol()));
		};
		
		RowCol.prototype.peekahead = function (){
			var str = this.linestr();
			return str.slice(util.colToLoc(str,this.realCol()));
		};
		
		RowCol.prototype.setLoc = function (loc){
			var ary;
			var ary = iter$(util.rowcol(this.view()._buffer,loc));var row = ary[0],col = ary[1];
			this.set(row,col);
			return this;
		};
		
		RowCol.prototype.loc = function (){
			// should cache(!)
			var lines = this.view()._buffer.lines();
			// var lines = view.buffer.split('\n')
			var loc = 0;
			for (var i = 0, ary = iter$(lines), len = ary.length, line; i < len; i++) {
				line = ary[i];
				var ln = line.length;
				if (i < this._row) {
					loc += ln + 1; // include newline
				} else if (i == this._row) {
					var viewcol = util.colToViewCol(line,this._col);
					var offset = util.colToLoc(line,viewcol);
					loc += Math.min(ln,offset);
				};
			};
			return loc;
		};
		
		RowCol.prototype.tab = function (){
			// wrong - need to round instead?
			
			var lft = this.col() % 4;
			this.setCol(this.col() + (4 - lft)); // Math.floor(col / 4) * 4 + 4
			console.log('marker tab',lft,this.col(),this.realCol());
			return this;
		};
		
		RowCol.prototype.untab = function (){
			console.log('untab',this.col());
			var rest = 4 - this.col() % 4;
			this.setCol(Math.ceil(this.col() / 4) * 4 - 4);
			return this;
		};
		
		RowCol.prototype.alter = function (mode,dir){
			var $1, $2, $3, $4, $5, $6;
			var nodes = this.caret().view().nodesInRegion(this.loc(),false);
			var node = nodes[0];
			var mid = node && node.node;
			var lft = nodes.prev && nodes.prev.node;
			var rgt = nodes.next && nodes.next.node;
			var part;
			
			// log 'move',offset,mode,nodes
			if (mode == IM.WORD_START) {
				var el = mid || lft;
				if (($1 = lft) && $1.matches  &&  $1.matches(q$('._imclose',this))) {
					this.setLoc(lft.parent().region().start());
				} else if (($2 = lft) && $2.matches  &&  $2.matches(q$('._imstr',this))) {
					this.setLoc(lft.region().start());
				} else {
					var loc = this.loc();
					// let buf = view.buffer
					// console.log 'peekbehind',peekbehind,loc,str
					var str = this.peekbehind().split('').reverse().join('');
					loc -= str.match(/^([\s\t\.]*.+?|)(\b|$)/)[1].length;
					this.setLoc(loc);
				};
			} else if (mode == IM.WORD_END) {
				el = mid || rgt;
				if (($3 = rgt) && $3.matches  &&  $3.matches(q$('._imopen',this))) {
					this.setLoc(rgt.parent().region().end());
				} else if (($4 = rgt) && $4.matches  &&  $4.matches(q$('._imstr',this))) {
					this.setLoc(rgt.region().end());
				} else {
					var loc1 = this.loc();
					// let buf = view.buffer
					
					
					// console.log 'peekahead',peekahead,loc
					loc1 += this.peekahead().match(/^([\s\.]*.+?|)(\b|$)/)[1].length;
					// loc++ until buf[loc].match(/[\n\]/)
					this.setLoc(loc1);
				};
			} else if (mode == IM.LINE_END) {
				this.set(this.row(),1000);
			} else if (mode == IM.LINE_START) {
				// FIXME tabs-for-spaces
				var tabs = this.linestr().match(/^\t*/)[0].length;
				var newcol = tabs * this.view().tabSize();
				this.setCol(this.col() > newcol ? (newcol) : (0));
			} else {
				if (dir < 0 && ($5 = lft) && $5.matches  &&  $5.matches('._imtab')) {
					// head.col = head.col - 4
					// caret.view.log 'right is tab',lft.region
					this.setLoc(lft.region().start());
					// head.untab
				} else if (dir > 0 && ($6 = rgt) && $6.matches  &&  $6.matches('._imtab')) {
					
					// use tab instead
					this.tab();
					// head.col = head.col + 4
				} else {
					// ...
					this.move(dir);
				};
			};
			
			return this;
		};
		
		tag$.defineTag('imcarethead');
		
		// should move into Marker (like Atom)
		return tag$.defineTag('imcaret', function(tag){
			
			
			
			tag.prototype.region = function(v){ return this._region; }
			tag.prototype.setRegion = function(v){ this._region = v; return this; };
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			
			tag.prototype.lines = function(v){ return this._lines; }
			tag.prototype.setLines = function(v){ this._lines = v; return this; };
			
			
			tag.prototype.ranges = function(v){ return this._ranges; }
			tag.prototype.setRanges = function(v){ this._ranges = v; return this; };
			
			tag.prototype.__mode = {watch: 'modeDidSet',name: 'mode'};
			tag.prototype.mode = function(v){ return this._mode; }
			tag.prototype.setMode = function(v){
				var a = this.mode();
				if(v != a) { this._mode = v; }
				if(v != a) { this.modeDidSet && this.modeDidSet(v,a,this.__mode) }
				return this;
			};
			
			tag.prototype.__col = {'default': 0,watch: 'dirty',name: 'col'};
			tag.prototype.col = function(v){ return this._col; }
			tag.prototype.setCol = function(v){
				var a = this.col();
				if(v != a) { this._col = v; }
				if(v != a) { this.dirty && this.dirty(v,a,this.__col) }
				return this;
			}
			tag.prototype._col = 0; // the real column of the caret
			
			tag.prototype.__row = {'default': 0,watch: 'dirty',name: 'row'};
			tag.prototype.row = function(v){ return this._row; }
			tag.prototype.setRow = function(v){
				var a = this.row();
				if(v != a) { this._row = v; }
				if(v != a) { this.dirty && this.dirty(v,a,this.__row) }
				return this;
			}
			tag.prototype._row = 0;
			
			
			tag.prototype.input = function(v){ return this._input; }
			tag.prototype.setInput = function(v){ this._input = v; return this; };
			
			
			
			tag.prototype.tail = function(v){ return this._tail; }
			tag.prototype.setTail = function(v){ this._tail = v; return this; }; // rowcol
			
			
			tag.prototype.head = function(v){ return this._head; }
			tag.prototype.setHead = function(v){ this._head = v; return this; };
			
			
			tag.prototype.hash = function(v){ return this._hash; }
			tag.prototype.setHash = function(v){ this._hash = v; return this; };
			
			tag.prototype.expand = function (lft,rgt){
				var ary;
				if(lft === undefined) lft = 0;
				if(rgt === undefined) rgt = 0;
				this.log('imcaret expand',lft,rgt);
				this.decollapse();
				var ary = iter$(this.ends());var a = ary[0],b = ary[1];
				a.move(lft);
				b.move(rgt);
				return this;
			};
			
			tag.prototype.toArray = function (){
				if (this.isCollapsed()) {
					return [this.head().row(),this.head().col()];
				} else {
					return [this.head().row(),this.head().col(),this.tail().row(),this.tail().col()];
				};
			};
			
			tag.prototype.toHash = function (){
				return '[' + this.toArray().join(',') + ']';
			};
			
			tag.prototype.set = function (val){
				if (val instanceof IM.Types.Tok) {
					return this.set(val.region());
				};
				
				if (val instanceof Region) {
					return (this.setRegion(val),val);
				};
				
				if (val instanceof Array) {
					this.head().setRow(val[0]);
					this.head().setCol(val[1]);
					
					if (val.length == 4) {
						this.decollapse();
						this.tail().setRow(val[2]);
						this.tail().setCol(val[3]);
					} else {
						this.setTail(this.head());
					};
				};
				this.dirty();
				return this;
			};
			
			tag.prototype.expandToLines = function (){
				var ary;
				this.selectable();
				var ary = iter$(this.ends());var a = ary[0],b = ary[1];
				a.setCol(0);
				b.setCol(1000);
				return this.dirty();
			};
			
			tag.prototype.selectAll = function (){
				this.decollapse();
				this.tail().setLoc(0);
				this.head().setLoc(this.view()._buffer.len()); // :length
				this.dirty();
				return this;
			};
			
			tag.prototype.selectable = function (){
				this.decollapse();
				return this;
			};
			
			tag.prototype.decollapse = function (){
				var v_;
				if (this.tail() == this.head()) { (this.setTail(v_ = this.head().clone()),v_) };
				return this;
			};
			
			tag.prototype.collapse = function (){
				this.setTail(this.head());
				this.dirty();
				return this;
			};
			
			tag.prototype.collapseToStart = function (){
				if (this.isReversed()) {
					this.setTail(this.head());
				} else {
					this.setHead(this.tail());
				};
				this.dirty();
				return this;
			};
			
			tag.prototype.orientation = function (){
				return this.isReversed() ? ('reversed') : ('normal');
			};
			
			tag.prototype.isCollapsed = function (){
				return this.tail() == this.head();
			};
			
			tag.prototype.isReversed = function (){
				return this.head().row() < this.tail().row() || (this.tail().row() == this.head().row() && this.head().col() < this.tail().col());
			};
			
			tag.prototype.indent = function (){
				var str = this.head().linestr();
				var ind = str.match(/^(\t*)/)[0];
				return ind;
			};
			
			tag.prototype.peekbehind = function (val){
				var str = this.ends()[0].peekbehind();
				if (val instanceof RegExp) { return str.match(val) };
				return str;
			};
			
			tag.prototype.move = function (offset,mode){
				if(offset === undefined) offset = 1;
				if(mode === undefined) mode = 0;
				this.head().alter(mode,offset);
				return this.dirty();
			};
			
			// what if we 
			tag.prototype.moveDown = function (len){
				if(len === undefined) len = 1;
				this.head().moveDown();
				return this.dirty();
			};
			
			tag.prototype.moveUp = function (len){
				if(len === undefined) len = 1;
				this.head().moveUp();
				return this.dirty();
			};
			
			tag.prototype.ends = function (){
				return this.isReversed() ? ([this.head(),this.tail()]) : ([this.tail(),this.head()]);
			};
			
			tag.prototype.text = function (){
				return this.region().text();
			};
			
			tag.prototype.region = function (){
				// get the actual region based on head and tail
				// getting the code might be expensive if done
				// too many times -- but easy to cache
				// send this to util instead
				var ary;
				var code = this.view().code();
				var lines = code.split('\n');
				var ary = iter$(this.ends());var a = ary[0],b = ary[1];
				
				var start = 0;
				var end = 0;
				var ln = 0;
				
				var ar = a.row(),ac = a.col(),br = b.row(),bc = b.col();
				var char$;
				
				for (var i = 0, items = iter$(lines), len = items.length, line; i < len; i++) {
					line = items[i];
					ln = line.length;
					if (i < ar) {
						start += ln + 1; // include newline
					} else if (i == ar) {
						var offset = util.colToLoc(line,ac);
						start += Math.min(ln,offset);
					};
					
					if (i < br) {
						end += ln + 1; // include newline
					} else if (i == br) {
						offset = util.colToLoc(line,bc);
						end += Math.min(ln,offset);
					} else {
						break;
					};
				};
				
				return new Region(start,end,this.view().root(),this.view());
			};
			
			tag.prototype.setRegion = function (reg){
				var buf = this.view().code();
				var a = util.rowcol(buf,reg.a());
				var b = util.rowcol(buf,reg.b());
				
				this.setHead(new RowCol(b[0],b[1],this));
				
				if (reg.size() == 0) {
					this.setTail(this.head());
				} else {
					this.setTail(new RowCol(a[0],a[1],this));
				};
				return this.dirty();
			};
			
			tag.prototype.nodes = function (reg){
				if(reg === undefined) reg = this.region();
				return this.view().nodesInRegion(reg,this.isCollapsed());
			};
			
			// should rather move this to region itself
			tag.prototype.target = function (reg){
				if(reg === undefined) reg = this.region();
				var nodes = this.nodes(reg);
				if (nodes.length > 2) {
					return util.commonAncestor(nodes.map(function(n) { return n.node; }));
				};
				return nodes[0].node;
			};
			
			tag.prototype.insert = function (text,edit){
				
				var sub = '';
				this.view().history().mark('action');
				
				if (!(this.isCollapsed())) {
					var reg = this.region();
					sub = reg.text();
					this.view().erase(reg);
					this.collapseToStart();
				};
				
				var move = 0;
				var sel;
				
				// need a different syntax for $0 -- can be in regular pasted code
				// should have a separate command for insertSnippet probably.
				if (text.indexOf('$0') >= 0) {
					sel = this.region().clone(0,sub.length).move(text.indexOf('$0'));
					text = text.replace('$0',sub);
				};
				
				edit || (edit = {size: text.length});
				
				this.head().normalize();
				var res = this.view().insert(this.region().start(),text,edit);
				this.view().log('inserted -- now move',edit.size);
				
				if (sel) {
					this.setRegion(sel);
				} else {
					// move locations
					this.head().setLoc(this.head().loc() + edit.size);
					// head.move(edit:size)
				};
				
				this.dirty();
				
				return this;
			};
			
			
			tag.prototype.erase = function (mode){
				this.view().history().mark('action');
				
				if (this.isCollapsed()) {
					this.log('isCollapsed',mode);
					this.decollapse();
					this.head().alter(mode,-1); // 
					
					// dirty
					// return erase # call again now
				};
				console.log('erasing region',this.region());
				this.view().erase(this.region());
				// log 'now collapse region to start',region
				this.collapseToStart();
				// log region
				return this;
				
				var target = this.target(this.reg());
				this.setRegion(this.reg());
				
				return this.view().edit(
					{text: '',
					target: target,
					region: this.reg(),
					caret: this.reg().clone().collapse(false)}
				);
			};
			
			tag.prototype.dirty = function (){
				var $1, $2;
				this._timestamp = new Date();
				// var hash = toArray.join("")
				
				if (this._hash != this.toHash()) {
					// the realCol values could have changed though?
					this.view().history().oncaret(this._hash,this.toHash(),this);
					this._hash = this.toHash();
					// console.log 'caret has actually changed',@hash
				};
				
				var rev = this.isReversed();
				var a = this.tail();
				var b = this.head();
				
				if (rev) { $1 = b,$2 = a,a = $1,b = $2 };
				
				var lc = b.row() - a.row();
				var row = a.row();
				
				var ac = a.realCol(); // Math.min( a.col, util.colsForLine(view.linestr(a.row) ) )
				var bc = b.realCol(); // Math.min( b.col, util.colsForLine(view.linestr(b.row) ) )
				var hc,tc;
				
				if (this.isReversed()) {
					hc = ac;
					tc = bc;
				} else {
					hc = bc;
					tc = ac;
				};
				
				// log 'dirty',region,a.row,a.col,b.row,b.col,hc,tc,head,tail,rev
				
				this.css({transform: ("translate(0px," + (a.row() * 100) + "%)")});
				// convert the row and column to a region (should go both ways)
				this._caret.css({transform: ("translate(" + hc + "ch," + ((this.head().row() - row) * 100) + "%)")});
				this._start.css({marginLeft: ("" + ac + "ch"),width: "auto"});
				this._end.css({width: ("" + bc + "ch")});
				
				if (this.isCollapsed()) {
					this.setMode('collapsed');
				} else if (lc == 0) {
					this.setMode('single');
					this._start.css({width: (bc - ac) + "ch"});
				} else {
					this._mid.setText(lc > 1 ? (('\n').repeat(lc - 1)) : (''));
					this.setMode('multi');
				};
				return this;
			};
			
			tag.prototype.render = function (){
				var elapsed = (new Date() - this._timestamp);
				var flip = Math.round(elapsed / 500) % 2;
				
				if (flip != this._flip) {
					this._caret.flag('blink',flip);
					this._flip = flip;
				};
				
				return this;
			};
			
			tag.prototype.build = function (){
				var v_, t0;
				this.setTail((this.setHead(v_ = new RowCol(0,0,this)),v_));
				
				return this.setChildren([
					// <imcaptor@input value='x'>
					(this.$a = this.$a || tag$.$span().flag('dim')).setText('x').end(),
					(this._caret = this._caret || tag$.$imcarethead().setRef('caret',this)).end(),
					(t0 = this._lines=this._lines || tag$.$div().setRef('lines',this)).setContent([
						(this._start = this._start || tag$.$div().setRef('start',this)).setText(" ").end(),
						(this._mid = this._mid || tag$.$div().setRef('mid',this)).end(),
						(this._end = this._end || tag$.$div().setRef('end',this)).setText(" ").end()
					],2).end()
				],2).synced();
			};
			
			tag.prototype.normalize = function (){
				this.head().normalize();
				return this;
			};
			
			tag.prototype.modeDidSet = function (new$,old){
				this.unflag(old);
				return this.flag(new$);
			};
		});
	
	})()

/***/ },
/* 44 */
/***/ function(module, exports) {

	(function(){
		
		tag$.defineTag('scrimbla-overlay', function(tag){
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag.prototype.render = function (){
				return this.setChildren(JSON.stringify(this.object()),3).synced();
			};
		});
		
		return tag$.defineTag('scrimbla-overlays', function(tag){
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag.prototype.add = function (type,data){
				if(data === undefined) data = {};
				console.log('add overlay!');
				this.append(tag$.$scrimbla_overlay().setView(this.view()).setObject(data).end());
				return this;
			};
			
			tag.prototype.reposition = function (){
				return this;
			};
		});
	
	})()

/***/ },
/* 45 */
/***/ function(module, exports) {

	(function(){
		
		return tag$.defineTag('imeditor', function(tag){
			
			tag.prototype.build = function (){
				this.render();
				return this;
			};
			
			tag.prototype.render = function (){
				return this.setChildren(
					(this._view = this._view || tag$.$imview().setRef('view',this)).end()
				,2).synced();
			};
			
			tag.prototype.view = function (){
				return this._view;
			};
			
			tag.prototype.activate = function (){
				this.view().activate();
				return this;
			};
			
			tag.prototype.deactivate = function (){
				this.view().deactivate();
				return this;
			};
			
			tag.prototype.load = function (code,opts){
				this.view().load(code,opts);
				return this;
			};
			
			tag.prototype.fs = function (){
				return IM.FS;
			};
			
			tag.prototype.oncommand = function (e,c){
				if (this[c.command] instanceof Function) {
					this[c.command].call(this,c.args || []);
					e.halt();
				};
				return this;
			};
			
			tag.prototype.onsavesession = function (){
				console.log("imeditor.saveSession",this);
				var path = this.view().filename().replace(/\.imba$/,'.imbasession');
				var body = JSON.stringify(this.view().history());
				
				return IM.FS.save(path,body,function() {
					return console.log('returned from saving!',path);
				});
			};
		});
	
	})()

/***/ },
/* 46 */
/***/ function(module, exports) {

	(function(){
		
		/*
		Bridge for communicating with the Imba compiler in a worker
		*/
		
		function ImbacWorker(path){
			if(path === undefined) path = "/vendor/imba/imbac.worker.min.js";
			this._path = path;
			this._callbacks = [];
			this;
		};
		
		exports.ImbacWorker = ImbacWorker; // export class 
		ImbacWorker.prototype.worker = function (){
			var self = this, process1;
			return self._worker || (self._worker = (true) && (
				process1 = new Worker(self._path),
				process1.onmessage = function(e) { return self.onmessage(e); },
				process1
			));
		};
		
		ImbacWorker.prototype.onmessage = function (e){
			var fn;
			if (fn = this._callbacks.shift()) {
				return fn(e.data,e);
			};
		};
		
		ImbacWorker.prototype.compile = function (code,o,cb){
			this._callbacks.push(cb);
			this.worker().postMessage(['compile',code,o]);
			return this;
		};
		
		ImbacWorker.prototype.analyze = function (code,o,cb){
			this._callbacks.push(cb);
			this.worker().postMessage(['analyze',code,o]);
			return this;
		};
		return ImbacWorker;
	
	})()

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		__webpack_require__(48);
		__webpack_require__(49);
		__webpack_require__(50);
		__webpack_require__(51);
		__webpack_require__(52);
		__webpack_require__(53);
		__webpack_require__(54);
		__webpack_require__(55);
		return __webpack_require__(56);
	
	})()

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		var Highlighter = __webpack_require__(29).Highlighter;
		var util = __webpack_require__(34);
		
		// dangerous to extend all htmlelement tags globally
		tag$.extendTag('htmlelement', function(tag){
			
			tag.prototype.bubble = function (name,data){
				// log "bubble event",name,data
				var ev = Imba.Events.trigger(name,this,{data: data,bubble: true});
				return ev;
			};
			
			tag.prototype.delay = function (name,time,blk){
				this._timeouts || (this._timeouts = {});
				clearTimeout(this._timeouts[name]);
				if (time != -1) { this._timeouts[name] = setTimeout(blk,time) };
				return this;
			};
			
			tag.prototype.setNext = function (el){
				if (el instanceof IMFragment) {
					el = Array.prototype.slice.call(el.dom().childNodes);
				};
				
				if (el instanceof Array) {
					for (var i = 0, ary = iter$(el.reverse()), len = ary.length; i < len; i++) {
						this.setNext(ary[i]);
					};
					return this;
				};
				
				var curr = this.dom().nextSibling;
				if ((typeof el=='string'||el instanceof String)) {
					el = document.createTextNode(el);
				};
				
				if (curr) {
					this.parent().insertBefore(el,curr);
				} else {
					this.parent().appendChild(el);
				};
				
				return el;
			};
			
			tag.prototype.setPrev = function (el){
				if (el instanceof IMFragment) {
					el = Array.prototype.slice.call(el.dom().childNodes);
					// el = [].concat(el.dom:childNodes)
				};
				
				if (el instanceof Array) {
					for (var i = 0, ary = iter$(el), len = ary.length; i < len; i++) {
						this.setPrev(ary[i]);
					};
					return this;
				};
				
				var curr = this.dom().prevSibling;
				if ((typeof el=='string'||el instanceof String)) {
					el = document.createTextNode(el);
				};
				this.parent().insertBefore(el,this);
				// parent.insert(el, before: self)
				return el;
			};
			
			tag.prototype.nextNode = function (){
				return this.dom().nextSibling;
			};
			
			tag.prototype.prevNode = function (){
				return this.dom().prevSibling;
			};
		});
		
		IM.Types = {};
		
		tag$.defineTag('im', 'b', function(tag){
			
			tag.key = function (key,handler){
				this.prototype[("handle" + key)] = handler;
				return this;
			};
			
			tag.native = function (typ){
				this._nativeType = typ;
				return this;
			};
			
			tag.type = function (typ){
				IM.Types[typ] = this;
				this._type = typ;
				this.prototype._type = typ;
				// @domFlags.push(typ) if @domFlags
				return this;
			};
			
			tag.type('Tok');
			
			tag.alias = function (typ){
				IM.Types[typ] = this;
				return this;
			};
			
			tag.trigger = function (match,cmd){
				if (cmd instanceof Function) {
					cmd = {command: cmd};
				};
				
				cmd.trigger = match;
				return this.prototype[("trigger-" + match)] = cmd;
			};
			
			tag.prototype.setHint = function (hint){
				if (hint && hint != this._hint) {
					this.setAttribute('hint',hint.ref());
					this.setAttribute("hint-type",hint.type());
				} else {
					this.removeAttribute('hint');
					this.removeAttribute('hint-type');
				};
				return this._hint = hint;
			};
			
			tag.prototype.hint = function (){
				// strange no?		
				return this._hint || this.view().hints().get(this.getAttribute('hint'));
			};
			
			// go over to using this 
			tag.prototype.walkTextNodes = function (mark){
				if(mark === undefined) mark = false;
				this.setRoot(this.dom());
				var el;
				var nodes = [];
				var pos = 0;
				var walk = document.createTreeWalker(this.root(),NodeFilter.SHOW_TEXT,null,false);
				
				while (el = walk.nextNode()){
					if (mark) {
						var len = el.length;
						el._loc = pos;
						pos += len;
					};
					nodes.push(el);
				};
				
				return nodes;
			};
			
			
			tag.prototype.util = function (){
				return util;
			};
			
			tag.prototype.select = function (){
				return this.view().caret().set(this.region());
			};
			
			tag.prototype.canPrepend = function (text){
				return false;
			};
			
			tag.prototype.canAppend = function (text){
				return false;
			};
			
			tag.prototype.log = function (){
				var logger_;
				(logger_ = this.view().logger()).log.apply(logger_,arguments);
				return this;
			};
			
			tag.prototype.toString = function (){
				return this.dom().outerHTML;
			};
			
			tag.prototype.spaced = function (){
				if (this.dom().nextSibling instanceof Text) {
					return (/[\t ]/).test(this.dom().nextSibling.textContent[0]);
				};
				return false;
			};
			
			tag.prototype.unspaced = function (){
				return !(this.spaced());
			};
			
			tag.prototype.nextImmediate = function (){
				// could be text as well?
				return this.dom().nextSibling instanceof Text ? (null) : (this.next());
			};
			
			tag.prototype.prevImmediate = function (){
				// could be text as well?
				return this.dom().previousSibling instanceof Text ? (null) : (this.prev());
			};
			
			tag.prototype.repair = function (){
				return this;
			};
			
			tag.prototype.text = function (){
				return this.dom().textContent;
			};
			
			tag.prototype.setText = function (text){
				this.dom().textContent = text;
				return this;
			};
			
			tag.prototype.code = function (){
				return this.dom().textContent;
			};
			
			tag.prototype.setCode = function (code,silent){
				var hint_;
				if(silent === undefined) silent = false;
				var prev = this.code();
				
				if (this._dom.firstChild == this._dom.lastChild && (this._dom.firstChild instanceof Text)) {
					// still set if it has not changed?
					this._dom.firstChild.textContent = code;
				} else {
					this._dom.textContent = code;
				};
				
				if (code != prev) {
					(hint_ = this.hint()) && hint_.changed  &&  hint_.changed();
					if (!silent) { this.onchanged(code,prev) };
				};
				return this;
			};
			
			tag.prototype.onchanged = function (code,prev){
				return this.flag('dirty');
			};
			
			tag.prototype.size = function (){
				return this.code().length;
			};
			
			tag.prototype.view = function (){
				var parent_;
				return this._view || ((parent_ = this.parent()) && parent_.view  &&  parent_.view()) || VIEW;
			};
			
			tag.prototype.sel = function (){
				return this.view().caret();
			};
			
			tag.prototype.region = function (){
				return this.view().regionForNode(this);
			};
			
			tag.prototype.loc = function (){
				return this.region().loc();
			};
			
			tag.prototype.load = function (){
				return this;
			};
			
			tag.prototype.decreaseIndent = function (pre,state){
				return false;
			};
			
			tag.prototype.increaseIndent = function (pre,state){
				var reg = /^(\s*(.*\=\s*)?(class|def|tag|unless|if|else|elif|switch|try|catch|finally|for|while|until|do))/;
				return reg.test(pre);
			};
			
			tag.prototype.erase = function (region,mode){
				if (mode == 'all') {
					this.orphanize();
				} else {
					this.setCode(util.patchString(this.code(),'',region)); // code.ins('',region)
				};
				return this;
			};
			
			tag.prototype.insert = function (region,str,edit,pars){
				if(!pars||pars.constructor !== Object) pars = {};
				var mode = pars.mode !== undefined ? pars.mode : null;
				this.setCode(util.patchString(this.code(),str,region));
				return this;
			};
			
			tag.prototype.oninserted = function (e){
				return this;
			};
			
			tag.prototype.oncommand = function (e,cmd){
				var name = cmd.command;
				var fn = this[name];
				this.log('run oncommand',name,cmd);
				
				if (fn instanceof Function) {
					fn.call(this,e,cmd);
				};
				return this;
			};
			
			tag.prototype.indentBlock = function (e){
				this.log('im.indentBlock',arguments,this);
				return this;
			};
			
			tag.prototype.clone = function (val){
				return IM.tok(val).classify();
			};
			
			tag.prototype.validate = function (code){
				return false;
			};
			
			tag.prototype.isFirst = function (){
				var par = this.parent();
				return (par instanceof IM.Types.Tok) && par.dom().firstChild == this.dom();
			};
			
			tag.prototype.isLast = function (){
				var par = this.parent();
				return (par instanceof IM.Types.Tok) && par.dom().lastChild == this.dom();
			};
			
			tag.prototype.isValid = function (code){
				if(code === undefined) code = this.text();
				return this.validate(code);
			};
			
			tag.prototype.markInvalid = function (){
				this.flag('invalid');
				return this;
			};
			
			tag.prototype.markValid = function (){
				this.unflag('invalid');
				return this;
			};
			
			tag.prototype.isInvalid = function (){
				return this.hasFlag('invalid');
			};
			
			tag.prototype.classify = function (){
				return this;
			};
			
			// unwrap / remove this node from parent
			tag.prototype.unwrap = function (){
				var el = this.dom();
				var par = el.parentNode;
				
				while (el.firstChild){
					par.insertBefore(el.firstChild,el);
				};
				return this;
			};
			
			tag.prototype.replaceWith = function (other){
				this.setPrev(other);
				return this.orphanize();
			};
			
			tag.prototype.scope = function (){
				return this.closest(q$('._indent',this));
			};
			
			tag.prototype.mutated = function (muts){
				// remove node if it is orphanized
				var self = this;
				if (self.code() == '') {
					self.log('remove whole node');
					// should possibly
					return self.orphanize();
				} else {
					self.log('mutated -- reparse');
					return self.view().observer().pause(function() {
						return self.view().highlighter().reparse(self.dirtyExtent());
					});
				};
			};
			
			
			tag.prototype.reclassify = function (type){
				// reclassify should happen through the highlighter
				// log 'reclassify node as type',type
				var cls = IM.Types[type] || Imba.TAGS[("im" + type)];
				
				if (cls) {
					// log 'found class to reclassify as',cls,self:constructor
					if (cls == this.constructor) {
						return this;
					};
					
					// log 'found class to reclassify as',cls
					var node = new cls(this.dom()).setup();
					return node;
				};
				return this;
			};
			
			tag.prototype.reparsed = function (){
				return this;
			};
			
			tag.prototype.baseClasses = function (){
				var cls = this.constructor.dom().className;
				if (this._type) { cls += ' ' + this._type };
				return cls;
			};
			
			tag.prototype.setup = function (){
				this._dom.className = this.baseClasses();
				return this;
			};
			
			tag.prototype.reuse = function (){
				return this.setup.apply(this,arguments);
			};
			
			tag.prototype.isAtomic = function (){
				return false;
			};
			
			// find the nodes / region that should be reparsed if this element has changed
			// this is currently quote 
			
			tag.prototype.dirtyExtent = function (){
				// 3log "get dirty extent for",dom
				var self = this, sel, sel1, sel2, $1;
				if (sel = self.up(q$('.selector',self))) {
					return sel.dirtyExtent();
				} else if (sel1 = self.up(q$('._imtagnode',self))) {
					return sel1.dirtyExtent();
				} else if (sel2 = self.up(q$('._imistring',self))) {
					return sel2.dirtyExtent();
				};
				
				if (self.isAtomic()) { // hmm
					return {
						nodes: [self.dom()],
						code: self.code(),
						contains: function(el) { return self.dom().contains(el._dom || el); }
					};
				};
				
				var start = self.dom();
				var end = self.dom();
				
				var prev,next;
				var nodes = [self.dom()];
				var opener,closer;
				
				while (prev = start.previousSibling){
					if (prev instanceof Text) {
						break;
					} else if (prev.matches('._imnewline,._imtab')) { // ,._imopen,._imclose
						break;
					};
					
					if (prev.matches('._imopen')) {
						opener = prev;
					};
					
					start = prev;
					nodes.unshift(start);
				};
				
				while (next = end.nextSibling){
					if (next instanceof Text) {
						break;
					} else if (next.matches('._imnewline')) { // ._imopen,._imclose
						break;
					};
					
					if (next.matches('._imclose')) {
						closer = next;
					};
					
					end = next;
					nodes.push(end);
				};
				
				// see if we include an open or close-tag
				
				var result = {
					nodes: nodes,
					code: "",
					target: self.dom(),
					nested: [],
					contains: function(node) { return this.nodes.indexOf(node) >= 0; }
				};
				
				if (opener || closer) {
					// log "includes opener and / or closer",opener,closer
					var par = tag$wrap((opener || closer).parentNode);
					if (($1 = par) && $1.isAtomic  &&  $1.isAtomic()) {
						// log 'return the parent dirty extent',par
						return par.dirtyExtent();
					};
					
					for (var nodes = [], i = 0, ary = iter$((opener || closer).parentNode.children), len_ = ary.length; i < len_; i++) {
						nodes.push(ary[i]);
					};
				};
				
				var loc = 0;
				
				// should use the tags directly
				for (var i = 0, ary = iter$(nodes), len_ = ary.length, node; i < len_; i++) {
					node = ary[i];
					var rich = tag$wrap(node);
					var text = node.textContent;
					var len = text.length;
					
					if (false) {
						text = "'§§§'";
						len = 5;
						self.log("added node as nested reference",rich.dom());
						// this is fucked up
						// this really does mess up the rich nodes here(?!)
						result.nested.push(rich);
					};
					
					result.code += text;
					loc += len;
				};
				
				result.nodes = nodes;
				return result;
			};
			
			tag.prototype.reparseExtent = function (e){
				var self = this;
				return self.view().observer().pause(function() {
					var dirty = self.dirtyExtent();
					if (e) { e.handled() };
					return Highlighter.reparse(dirty);
				});
			};
		});
		
		
		// piece of unparsed code
		tag$.defineTag('imraw', 'im', function(tag){
			tag.type('raw');
			tag.alias('@');
			
			tag.prototype.setRaw = function (raw){
				this._raw = raw;
				this._dom.textContent = raw;
				return this;
			};
			
			tag.prototype.onedit = function (e){
				this.setCode(e.patch(this));
				return e.handled();
			};
		});
		
		tag$.defineTag('imfragment', 'imraw', function(tag){
			tag.type('fragment');
			
			tag.prototype.setContent = function (content){
				if (typeof content == 'string') {
					this.dom().innerHTML = content;
				} else {
					tag.__super__.setContent.apply(this,arguments);
				};
				return this;
			};
			
			tag.prototype.repair = function (){
				this.unwrap();
				this.orphanize();
				return this;
			};
		});
		
		IMFragment = Imba.TAGS.imfragment;
		
		tag$.defineTag('imopen', 'im', function(tag){
			
			// @nodeType = 's'
			tag.type('open');
			
			tag.alias('[');
			tag.alias('(');
			tag.alias('{');
			tag.alias('{{');
			tag.alias('index_start');
			tag.alias('block_param_start');
		});
		
		tag$.defineTag('imclose', 'im', function(tag){
			
			tag.type('close');
			// @nodeType = 's'
			
			tag.alias(']');
			tag.alias(')');
			tag.alias('}');
			tag.alias('}}');
			tag.alias('index_end');
			tag.alias('block_param_end');
		});
		
		tag$.defineTag('imrparen', 'imclose', function(tag){
			tag.type('rparen');
			tag.alias(')');
		});
		
		tag$.defineTag('imtagopen', 'imopen', function(tag){
			tag.type('tag_start');
		});
		
		tag$.defineTag('imtagclose', 'imclose', function(tag){
			tag.type('tag_end');
		});
		
		tag$.defineTag('imselopen', 'imopen', function(tag){
			tag.type('selector_start');
		});
		
		tag$.defineTag('imselclose', 'imclose', function(tag){
			tag.type('selector_end');
		});
		
		tag$.defineTag('imquote', 'im');
		
		tag$.defineTag('imsinglequote', 'imquote', function(tag){
			tag.type("'");
		});
		
		tag$.defineTag('imdoublequote', 'imquote', function(tag){
			tag.type('"');
		});
		
		tag$.defineTag('imstrstart', 'imopen', function(tag){
			tag.type('string_start');
		});
		
		return tag$.defineTag('imstrend', 'imclose', function(tag){
			tag.type('string_end');
		});
	
	})()

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		
		var Region = __webpack_require__(27).Region;
		var Highlighter = __webpack_require__(29).Highlighter;
		
		
		var keywords = [
			'true','false','null','this',
			'delete','typeof','in','instanceof',
			'throw','break','continue','debugger',
			'if','else','switch','for','while','do','try','catch','finally',
			'class','extends','super','return',
			'undefined','then','unless','until','loop','of','by',
			'when','def','tag','do','elif','begin','var','let','self','await','import',
			'and','or','is','isnt','not','yes','no','isa','case','nil','extend','export','own'
		];
		
		// this is really the general token
		tag$.defineTag('imtok', 'im', function(tag){
			tag.alias('token');
			
			
			tag.prototype.__eref = {watch: 'erefDidSet',name: 'eref'};
			tag.prototype.eref = function(v){ return this.getAttribute('eref'); }
			tag.prototype.setEref = function(v){
				var a = this.eref();
				if(v != a) { this.setAttribute('eref',v); }
				if(v != a) { this.erefDidSet && this.erefDidSet(v,a,this.__eref) }
				return this;
			};
			
			tag.prototype.erefDidSet = function (new$,old){
				// experimental
				// console.log 'erefDidSet',new,old
				if (!(new$ && old)) { this.flag('lvar',!(!(new$))) };
				return this;
			};
			
			tag.prototype.isVarRef = function (){
				return this.hasFlag('lvar');
			};
			
			tag.prototype.clearVarRef = function (){
				this.setEref(null);
				return this;
			};
			
			tag.prototype.clone = function (val){
				return IM.tok(val);
			};
			
			tag.prototype.setText = function (text){
				tag.__super__.setText.call(this,text);
				this.classify();
				
				var typ = IM.identify(text);
				
				if (typ) {
					this.log('reclassifying imtok immediately');
					this.setCode(text);
					return this.reclassify(typ);
				};
				
				// return raw token if not classified?
				return this._typ ? (this) : (tag$.$imraw().setRaw(text).end());
			};
			
			tag.prototype.canPrepend = function (text){
				return true;
			};
			
			tag.prototype.canAppend = function (text){
				return true;
			};
			
			tag.prototype.classify = function (map){
				map || (map = IM.identify(this.code()));
				if (map) {
					if (!map.match(/\b_[\w]/)) { map = '_imtok ' + map };
					this.dom().className = map;
					this._typ = map;
				} else {
					this._typ = null;
				};
				return this;
			};
			
			tag.prototype.validate = function (code){
				return false;
			};
			
			tag.prototype.repair = function (){
				this.log('repair');
				this.classify();
				return this;
			};
			
			tag.prototype.split = function (region){
				region = Region.normalize(region);
				var lft = this.code().substring(0,region.start());
				var rgt = this.code().slice(region.end());
				
				this.setCode(lft);
				this.setNext(IM.tok(rgt));
				return this;
			};
			
			tag.prototype.mutated = function (o){
				if(o === undefined) o = {};
				var dirty = this.dirtyExtent();
				this.view().observer().pause(function() { return Highlighter.reparse(dirty); });
				return this;
			};
			
			tag.prototype.reuse = function (tok,new$,old){
				if (new$ == old) { return this };
				return tag.__super__.reuse.apply(this,arguments);
			};
			
			tag.prototype.mutated = function (o){
				if(o === undefined) o = {};
				if (!o.deep && this.validate(this.code())) { return this };
				return tag.__super__.mutated.apply(this,arguments);
			};
			
			tag.prototype.ondblclick = function (e){
				e.halt();
				return this.select();
			};
			
			tag.prototype.onmouseover = function (e){
				e.halt();
				
				if (this.eref()) {
					return this.view().nodesForEntity(this.eref()).map(function(el) { return el.flag('hl'); });
				};
			};
			
			tag.prototype.onmouseout = function (e){
				e.halt();
				if (this.eref()) {
					return this.view().nodesForEntity(this.eref()).map(function(el) { return el.unflag('hl'); });
				};
			};
		});
		
		
		tag$.defineTag('imidentifier', 'imtok', function(tag){
			tag.type('identifier');
			
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			tag.prototype.validate = function (code){
				// regex for identifier
				return (/^[a-z](-?[\wA-Za-z_\-\x7f-\uffff\$]+)*$/).test(code) && keywords.indexOf(code) == -1;
			};
			
			tag.prototype.setup = function (tok,new$,old){
				// console.log 'identifier setup',baseClasses
				var v_;
				if (tok && tok._value) { (this.setName(v_ = tok._value),v_) };
				this._dom.className = this.baseClasses();
				return this;
			};
			
			tag.prototype.mutated = function (){
				// console.log 'imidentifier mutated'
				this.setName(this.code());
				if (this.isVarRef()) {
					this.clearVarRef();
				};
				return tag.__super__.mutated.apply(this,arguments);
			};
		});
		
		tag$.defineTag('imtagtype', 'imtok', function(tag){
			tag.type('tag_type');
		});
		
		tag$.defineTag('imtagid', 'imtok', function(tag){
			tag.type('tag_id');
			tag.alias('idref');
		});
		
		tag$.defineTag('imconst', 'imtok', function(tag){
			tag.type('const');
			
			tag.prototype.validate = function (code){
				return (/^[A-Z](-?[\wA-Za-z_\-\x7f-\uffff\$]+)*$/).test(code);
			};
			
			// def onchanged code, prev
			// 	# console.log 'imconst onchanged',code,prev
			// 	flag('dirty') unless validate(code)
		});
		
		
		tag$.defineTag('imivar', 'imtok', function(tag){
			tag.type('ivar');
		});
		
		tag$.defineTag('imcvar', 'imtok', function(tag){
			tag.type('cvar');
		});
		
		tag$.defineTag('imkeyword', 'imtok', function(tag){
			tag.type('keyword');
			tag.alias('new');
			
			tag.prototype.setup = function (tok,new$,old){
				// console.log 'setup imkeyword',tok, new, old
				var cls = this.baseClasses();
				if (tok && tok._value) { cls += ' ' + tok._value };
				this._dom.className = cls;
				return this;
			};
		});
		
		keywords.map(function(keyword) { return IM.Types[keyword] = IM.Types.keyword; });
		
		IM.Types.forin = IM.Types.keyword;
		IM.Types.forof = IM.Types.keyword;
		IM.Types.post_if = IM.Types.keyword;
		IM.Types.post_unless = IM.Types.keyword;
		IM.Types.post_for = IM.Types.keyword;
		IM.Types.post_while = IM.Types.keyword;
		
		tag$.defineTag('imnum', 'imtok', function(tag){
			tag.type('number');
			
			tag.prototype.validate = function (code){
				return (/^\d+(\.\d+)?$/).test(code);
			};
			
			tag.prototype.reuse = function (){
				return this;
			};
		});
		
		tag$.defineTag('imint', 'imnum', function(tag){
			tag.type('int');
		});
		
		tag$.defineTag('imfloat', 'imnum', function(tag){
			tag.type('float');
		});
		
		tag$.defineTag('imbool', 'imtok', function(tag){
			tag.type('bool');
			tag.alias('true');
			tag.alias('false');
		});
		
		// this should be more advanced - no
		tag$.defineTag('imstr', 'imtok', function(tag){
			tag.type('string');
			
			tag.prototype.quote = function (){
				return this.code()[0];
			};
			
			tag.prototype.setQuote = function (quote){
				this.setCode(quote + this.code().slice(1,-1) + quote);
				return this;
			};
			
			tag.prototype.setup = function (tok,new$,old){
				// console.log 'setup string',tok, new, old
				this._dom.className = this.baseClasses();
				this.setCode(new$);
				return this;
			};
			
			tag.prototype.onunwrap = function (e){
				var v_;
				this.log('imstring onunwrap!!!',e);
				e.halt();
				// look at prev and next as well?
				// should do this through the view
				return (this.setCode(v_ = this.code().slice(1,-1)),v_);
			};
			
			tag.prototype.ondblclick = function (e){
				e.halt();
				return this.select();
			};
			
			tag.prototype.validate = function (code){
				if (code[0] == '"') {
					return (/^\"([^"\{]*)\"$/).test(code);
				} else if (code[0] == "'") {
					return (/^\'([^'\{]*)\'$/).test(code);
				};
			};
			
			tag.trigger('"',function(token,o) {
				if (token.quote() == '"') {
					this.insert('\\"');
					return true;
				} else if (token.quote() == "'" && o.mode == 'all') {
					token.setQuote('"');
					return this;
				};
			});
			
			tag.trigger("'",function(token,o) {
				var v_;
				if (token.quote() == '"') {
					return (token.setQuote(v_ = "'"),v_);
				} else if (token.quote() == "'" && o.mode == 'all') {
					return this.insert("\\'");
				};
			});
		});
		
		
		
		tag$.defineTag('imneostring', 'imtok', function(tag){
			tag.type('neostring');
			
			tag.prototype.mutated = function (o){
				if(o === undefined) o = {};
				if (!o.deep && !this.code().match(/[\{\"\']/)) { return this };
				return tag.__super__.mutated.apply(this,arguments);
			};
		});
		
		tag$.defineTag('imsym', 'imtok', function(tag){
			tag.type('symbol');
		});
		
		return tag$.defineTag('imtagattr', 'imtok', function(tag){
			tag.type('tag_attr');
		});
	
	})()

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function idx$(a,b){
			return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);
		};
		
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		
		var Highlighter = __webpack_require__(29).Highlighter;
		var util = __webpack_require__(34);
		
		tag$.defineTag('imblock', 'im', function(tag){
			
			tag.prototype.deleteLeftRight = function (e){
				this.log('imblock deleteLeftRight',e.region().peek(-1,1));
				
				if (e.region().peek(-1,1) == this.code()) {
					this.orphanize();
					return e.handled();
				};
				
				return this;
			};
			
			tag.prototype.indentBlock = function (e){
				var self = this;
				e.handled();
				
				self.view().caret().expandToLines();
				var region = self.view().caret().region();
				var nodes = self.view().nodesInRegion(region);
				
				nodes.map(function(match) {
					if (match.node.matches('._imnewline')) {
						self.log('found tab in selection',match);
						if (match.mode != 'start') {
							return match.node.indent();
						};
					};
				});
				
				self.view().caret().dirty();
				return self;
			};
			
			tag.prototype.undent = function (e){
				this.log('imblock.undent',arguments);
				var nodes = e.view().nodesInRegion(e.region().clone().startAtLine());
				nodes.map(function(match) {
					if (match.node.matches('._imnewline') && match.mode != 'start') {
						return match.node.undent();
						// e.caret.expand(0,-1)
					};
				});
				this.view().caret().expandToLines();
				return e.handled();
			};
			
			tag.prototype.pairable = function (str,e){
				return true;
			};
			
			tag.prototype.wrap = function (node){
				this.setChildren([node]);
				return this;
			};
			
			tag.prototype.repair = function (){
				// log "repair block"
				q$('._imraw',this).map(function(raw) { return raw.repair(); });
				return this;
			};
			
			tag.prototype.rehighlight = function (){
				// var reg = view.sel.region
				var self = this;
				var state = self.codeState();
				var hl = IM.parse(state.code);
				// could send this through load instead
				// what about annotations here?
				throw 'dont rehighlight';
				
				if (hl) {
					self.view().observer().pause(function() {
						self.dom().innerHTML = hl + '\n';
						return state.invalids.map(function(inv) {
							// we could go local instead
							var node;
							if (node = self.view().nodeAtRegion(inv.region,true)) {
								self.log('found node at invalid position',node);
								return node.replaceWith(inv.node);
							};
						});
					});
				};
				return self;
			};
			
			// bad naming
			tag.prototype.codeState = function (){
				var self = this;
				var real = self.code();
				var valid = real;
				var invalids = q$('.invalid',self);
				var ownreg = self.region();
				var selreg = self.view().sel().region();
				
				var remember = invalids.map(function(inv) {
					// multilevel nesting?
					var region = inv.region();
					var relreg = region.relativeTo(ownreg);
					self.log('invalid region',ownreg,'self',region,relreg);
					valid = valid.ins(inv.placeholder(),relreg);
					return {region: region,placeholder: inv.placeholder(),raw: inv.code(),node: inv,root: self,relRegion: relreg};
				});
				
				return {
					region: ownreg,
					marker: (selreg.intersects(ownreg) ? (selreg) : (null)),
					raw: real,
					code: valid,
					invalids: remember
				};
			};
		});
		
		
		tag$.defineTag('iminterpolated', 'imblock');
		
		tag$.defineTag('indent', 'imblock', function(tag){
			
			tag.prototype.variables = function (){
				var map = {};
				var vars = [];
				q$('._lvar',this).map(function(lvar) {
					var name = lvar.text();
					if (!map[name]) {
						map[name] = true;
						return vars.push(name);
					};
				});
				return vars;
			};
		});
		
		tag$.defineTag('impair', 'imblock', function(tag){
			tag.type('pair');
			
			tag.pair = function (open,close){
				this.prototype._open = open;
				this.prototype._close = close;
				return this;
			};
			
			tag.prototype.open = function (){
				return this._open || '';
			};
			tag.prototype.close = function (){
				return this._close || '';
			};
			
			tag.prototype.build = function (){
				this.gen();
				return this;
			};
			
			tag.prototype.setContent = function (content){
				throw 'should not get here';
				this.dom().innerHTML = this.open() + IM.parse(content) + this.close();
				return this;
			};
			
			tag.prototype.isEmpty = function (){
				return this.code().replace(/[\s\t \n]/,'') == (this.open() + this.close());
			};
			
			tag.prototype.isPaired = function (){
				var code = this.code();
				return code[0] == this.open() && code[code.length - 1] == this.close();
			};
			
			tag.prototype.isOpened = function (){
				return this.code()[0] == this.open();
			};
			
			tag.prototype.isClosed = function (){
				return this.code()[this.code().length - 1] == this.close();
			};
			
			tag.prototype.unwrap = function (){
				if (this.isEmpty()) {
					this.log('remove the whole thing');
					this.orphanize();
				} else {
					var el;
					var par = this.parent();
					while (el = this._dom.firstChild){
						par.dom().insertBefore(el,this._dom);
					};
					// remove self as well
				};
				return this;
			};
			
			tag.prototype.onunwrap = function (e){
				this.log('impair onunwrap!!!',e);
				return e.halt();
			};
			
			tag.prototype.gen = function (){
				this.setChildren([
					tag$.$imopen().setContent(this.open(),0).end(),
					tag$.$imclose().setContent(this.close(),0).end()
				]);
				return this;
			};
			
			tag.prototype.oninserted = function (e){
				e.setCaret(this.region().collapse(false).move(1));
				return this;
			};
			
			tag.prototype.select = function (){
				return this;
			};
			
			tag.prototype.onlinebreak = function (e){
				var pre = e.linestr('pre');
				var indent = e.indent();
				var new$ = this.text().ins('',e.relRegion());
				
				// this is a special case - no?
				if (new$ == (this.open() + this.close())) {
					var prefix = '\n' + indent + '\t';
					var post = '\n' + indent;
					this.onwhitespace(e,prefix + post);
					e.caret().collapse(false).move(-post.length);
					return e.handled();
				};
				
				// need to first consider the splitting, no?
				if (this.increaseIndent(pre)) { indent += '\t' };
				if (this.decreaseIndent(pre)) { indent = indent.slice(1) };
				this.onwhitespace(e,'\n' + indent);
				return e.handled();
			};
			
			tag.prototype.repair = function (){
				this.log('repair imtag');
				if (!(this.isPaired())) { this.revalidate(true) };
				return this;
			};
			
			tag.prototype.mutated = function (){
				this.log('impair mutated');
				return this.revalidate();
			};
			
			tag.prototype.defaultValidationMode = function (){
				return 'tokenize';
			};
			
			tag.prototype.rehighlight = function (){
				return this;
			};
			
			tag.prototype.revalidate = function (mode,write){
				// tricky motherfucker -- mostly useful for validations
				// I suppose we can do this a simpler way -- by turning
				// off observers -- temporarily replacing inner code etc
				
				// when a block checks validity it should probably
				// substitute inner invalid parts - so that the block
				// thing is still valid
				var self = this, hl;
				if(mode === undefined) mode = self.defaultValidationMode();
				if(write === undefined) write = false;
				var wasInvalid = self.hasFlag('invalid');
				var oldState = self.hasFlag('invalid');
				var state = self.codeState();
				var code = state.code;
				
				if (!(self.isPaired())) {
					return self.markInvalid();
				};
				
				console.log('will revalidate with code',code);
				console.time('revalidate');
				
				try {
					if (mode == 'compile') {
						self._output = Imbac.compile(code,{bare: true});
						self._tokens = self._output.options._tokens;
					} else {
						self._tokens = Imbac.tokenize(code,{bare: true});
					};
					self.markValid();
				} catch (e) {
					self._tokens = null;
					self.markInvalid();
				};
				
				console.timeEnd('revalidate');
				
				if (wasInvalid && self._tokens) {
					// need to fix inner for root
					if (hl = Highlighter.highlight(code,{tokens: self._tokens,inner: true})) {
						// this should be refactored out into a separate method
						// possibly do loadState / dumpState
						self.view().observer().pause(function() {
							self.dom().innerHTML = hl;
							state.invalids.map(function(inv) {
								var node;
								if (node = self.view().nodeAtRegion(inv.region,true)) {
									return node.replaceWith(inv.node);
								};
							});
							if (state.marker) { return self.view().sel().set(state.marker) };
						});
					};
				};
				
				return self;
			};
			
			tag.prototype.placeholder = function (){
				return this.open() + (' ').repeat(this.size() - 2) + this.close();
			};
			
			tag.prototype.isAtomic = function (){
				return true;
			};
			
			tag.prototype.mutated = function (){
				this.log('muated imcurly');
				this.view().highlighter().reparse(this.dirtyExtent());
				return this;
			};
		});
		
		tag$.defineTag('imcurly', 'impair', function(tag){
			tag.type('curly');
			tag.pair('{','}');
		});
		
		tag$.defineTag('imsquare', 'impair', function(tag){
			tag.type('square');
			tag.pair('[',']');
			
			tag.prototype.prettify = function (e){
				var self = this;
				self.log('prettify!');
				e.handled();
				var ind = e.region().indent();
				self.log('with indentation',ind,ind.length);
				
				self.view().observer().pause(function() {
					for (var i = 0, ary = iter$(self.children()), len = ary.length, child, res = []; i < len; i++) {
						child = ary[i];
						res.push(child.matches('.comma,._imopen') ? (
							child.setNext('\n' + ind + '\t')
						) : ((child.matches('._imclose')) && (
							child.setPrev('\n' + ind)
						)));
					};
					return res;
				});
				
				return true;
			};
		});
		
		tag$.defineTag('imparens', 'impair', function(tag){
			tag.type('parens');
			tag.pair('(',')');
			
			tag.prototype.onunwrap = function (e){
				this.log('impair onunwrap!!!',e);
				e.halt();
				// look at prev and next as well?
				// should do this through the view
				this.setCode(' ' + this.code().slice(1,-1));
				return this.view().repair();
			};
		});
		
		tag$.defineTag('imistring', 'impair', function(tag){
			tag.type('istring');
			tag.pair('"','"');
		});
		
		tag$.defineTag('imiexpr', 'impair', function(tag){
			tag.type('iexpr');
			tag.pair('{','}');
		});
		
		tag$.defineTag('imblockparams', 'impair', function(tag){
			tag.type('blockparams');
			tag.pair('|','|');
		});
		
		return tag$.defineTag('imtagnode', 'impair', function(tag){
			tag.type('tagnode');
			tag.pair('<','>');
			
			tag.prototype.pairable = function (str,e){
				return idx$(str,['{','[','(','"',"'"]) >= 0;
			};
			
			tag.prototype.placeholder = function (){
				return this.open() + ('x').repeat(this.size() - 2) + this.close();
			};
			
			tag.prototype.defaultValidationMode = function (){
				return 'compile';
			};
		});
	
	})()

/***/ },
/* 51 */
/***/ function(module, exports) {

	(function(){
		
		return tag$.defineTag('imroot', 'imblock', function(tag){
			
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag._nodeType = 'code';
			// def self.dom
			//	@dom ||= document.createElement('code')
			
			tag.prototype.tryUndent = function (e){
				var self = this;
				self.log('tryUndent');
				var nodes = e.view().nodesInRegion(e.region().clone().startAtLine());
				nodes.map(function(match) {
					if (match.node.matches('._imnewline') && match.mode != 'start') {
						match.node.undent();
						return self.view().caret().move(-1);
						// e.caret.move(-1)
						// e.caret.expand(0,-1)
					};
				});
				
				// e.moveCaret = 0
				e.handled();
				return self;
			};
			
			tag.prototype.build = function (){
				tag.__super__.build.apply(this,arguments);
				
				this.dom().addEventListener('');
				return this;
			};
			
			tag.prototype.commit = function (){
				return this;
			};
			
			tag.prototype.setNext = function (node){
				this.appendChild(node);
				return node;
			};
			
			tag.prototype.setPrev = function (node){
				var first = this.dom().firstChild;
				first ? (this.insertBefore(node,first)) : (this.appendChild(node));
				return node;
			};
			
			tag.prototype.onlinebreak = function (e){
				var pre = e.linestr('pre');
				var indent = e.indent();
				var new$ = this.text().ins('',e.relRegion());
				// need to first consider the splitting, no?
				if (this.increaseIndent(pre)) { indent += '\t' };
				if (this.decreaseIndent(pre)) { indent = indent.slice(1) };
				this.onwhitespace(e,'\n' + indent);
				return e.handled();
			};
			
			tag.prototype.mutated = function (){
				this.log('imroot mutated');
				return this;
			};
			
			tag.prototype.dirtyExtent = function (){
				var self = this;
				self.log('imroot dirtyExtent');
				// super
				var nodes = self.children().map(function(n) { return n.dom(); });
				
				return {
					code: self.code(),
					nodes: nodes,
					parent: self.dom(),
					contains: function(el) { return self.dom().contains(el._dom || el); }
				};
			};
		});
	
	})()

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		// externs;
		
		var util = __webpack_require__(34);
		
		var SINGLE_STR = /^'[^']*'$/;
		var DOUBLE_STR = /^"[^"\{]*"$/;
		var COMMENT = /^\#[ \t][^\n]*$/;
		
		DOUBLE_STR = /^"([^\\"\{]|\\\\|\\")*"$/;
		
		tag$.defineTag('imlit', 'im', function(tag){
			
			tag.prototype.validate = function (code){
				return false;
			};
		});
		
		return tag$.defineTag('imregex', 'imlit', function(tag){
			
			tag.type('regex');
			
			tag.prototype.validate = function (value){
				return true;
			};
			
			tag.prototype.pairing = function (chr){
				return this;
			};
			
			tag.prototype.revalidate = function (){
				var reg = this.code();
				try {
					var obj = eval(reg);
				} catch (e) { };
				this.log('regex is',reg,obj);
				this.flag('invalid',!obj);
				return this;
			};
			
			tag.prototype.mutated = function (){
				this.log('regex mutated');
				return this.revalidate();
			};
			
			tag.prototype.placeholder = function (){
				return '/' + 'R'.repeat(this.size() - 2) + '/';
			};
			
			tag.prototype.isAtomic = function (){
				return true;
			};
		});
		
	
	})()

/***/ },
/* 53 */
/***/ function(module, exports) {

	(function(){
		
		// should rather reconcile into token - or something like it
		var names = {
			'.': 'dot',
			'=': 'eq',
			'?': 'q',
			'!': 'unary',
			':': 'colon',
			',': 'comma',
			'#': 'hash',
			'*': 'mult',
			'>>': 'bitshift'
		};
		
		tag$.defineTag('imop', 'im', function(tag){
			
			tag.type('op');
			tag.alias('relation');
			tag.alias('compare');
			tag.alias('compound_assign');
			tag.alias('assign');
			tag.alias('block_arg');
			tag.alias('splat');
			tag.alias('logic');
			tag.alias('math');
			tag.alias('shift');
			tag.alias('unary');
			
			tag.prototype.validate = function (code){
				return IM.isOp(code);
			};
			
			tag.prototype.baseClasses = function (){
				return tag.__super__.baseClasses.apply(this,arguments) + ' ' + (names[this.code()] || '');
			};
			
			tag.prototype.setup = function (token){
				var val = token && token._value || this.code();
				this.dom().className = ("_im _imop op " + (names[val] || ''));
				return this;
			};
			
			// should merge with a more generic version for token in general
			// same goes for text etc
			tag.prototype.insert = function (){
				tag.__super__.insert.apply(this,arguments);
				
				if (this.code() == '//') {
					this.log('is a regex!!');
					return this.reclassify('regex');
				};
			};
		});
		
		// link regular ops to op-node
		return '+ - * / = ++ -- == === != !== > < >= <= & && | || or . : ? &= ||= &&= ?. ?: , ! .. ... .: >> << #'.split(' ').map(function(op) {
			return IM.Types[op] = IM.Types.op;
		});
		
		
		// IM.Types:logic = IM.Types:op
		// IM.Types:compare = IM.Types:op
		// IM.Types:math = IM.Types:op
		// IM.Types:shift = IM.Types:op
		
	
	})()

/***/ },
/* 54 */
/***/ function(module, exports) {

	(function(){
		
		// this should be more advanced than this, no?
		tag$.defineTag('imsel', 'imtok', function(tag){
			tag.type('selector');
			
			tag.prototype.isAtomic = function (){
				return true;
			};
			
			tag.prototype.reparsed = function (code,old){
				this.log("imsel reparsed",code,old);
				return this;
			};
		});
		
		tag$.defineTag('imseltag', 'imtok', function(tag){
			tag.type('selector_tag');
		});
		
		tag$.defineTag('imselclass', 'imtok', function(tag){
			tag.type('selector_class');
		});
		
		tag$.defineTag('imselcomb', 'imtok', function(tag){
			tag.type('selector_combinator');
		});
		
		tag$.defineTag('imselattrop', 'imtok', function(tag){
			tag.type('selector_attr_op');
		});
		
		return tag$.defineTag('imselattrop', 'imtok', function(tag){
			tag.type('selector_attr_op');
		});
	
	})()

/***/ },
/* 55 */
/***/ function(module, exports) {

	(function(){
		tag$.defineTag('iminsert', 'im', function(tag){
			
			tag.prototype.canAppend = function (){
				return true;
			};
			
			tag.prototype.canPrepend = function (){
				return true;
			};
			
			tag.prototype.insert = function (reg,ins){
				console.log('insert code into iminsert!!',ins,reg);
				
				if (ins instanceof IM.Types.fragment) {
					ins = ins.code();
				} else if (ins instanceof IM.Types.raw) {
					ins = ins._raw;
				} else if ((typeof ins=='string'||ins instanceof String)) {
					ins = (this.code() || "").ins(ins,reg);
				};
				
				this.setCode(ins);
				return this;
			};
			
			tag.prototype.isWhitespace = function (){
				return this.code().match(/^[\n\t\ ]+$/);
			};
			
			tag.prototype.mutated = function (){
				this.log('iminsert mutated');
				
				var dirty = this.dirtyExtent();
				this.view().highlighter().reparse(dirty);
				return this;
			};
		});
		
		tag$.defineTag('imwhitespace', 'im', function(tag){
			
			tag.prototype.canPrepend = function (str){
				return this.validate(str + this.code());
			};
			
			tag.prototype.canAppend = function (str){
				return this.validate(this.code() + str);
			};
			
			tag.prototype.validate = function (){
				return false;
			};
		});
		
		tag$.defineTag('imnewline', 'imwhitespace', function(tag){
			
			tag.type('newline');
			tag.alias('\n');
			
			tag.prototype.canPrepend = function (str){
				if (str.match(/^[\n\t\ ]+$/)) {
					// should not really be able to prepend here
					// it shold rather insert a new newline in
					// an iminsert, and that should be able to
					// decide that no reparse is needed
					return true;
				};
				return false;
			};
			
			tag.prototype.validate = function (val){
				if(val === undefined) val = this.code();
				return val == '\n';
			};
			
			tag.prototype.indent = function (){
				this.view().insert(this.region().end(),'\t');
				return this;
			};
			
			tag.prototype.undent = function (){
				this.log('undent newline');
				var reg = this.region().clone().collapse(true).clone(0,1);
				if (reg.text() == '\t') {
					this.log('can undent!!');
					this.view().erase(reg);
				};
				
				// view.observer.pause do
				//	next.orphanize if next?.matches('._imtab')
				return this;
			};
			
			tag.prototype.mutated = function (){
				// log 'imnewline mutated!!'
				// remove node if it is orphanized
				if (this.code() == '') {
					this.log('remove whole node');
					return this.orphanize();
				} else {
					this.log('reparse newline');
					return this.view().highlighter().reparse({nodes: [this.dom()],code: this.code()});
				};
			};
		});
		
		
		
		tag$.defineTag('imspace', 'imwhitespace', function(tag){
			
			tag.type('whitespace');
			
			tag.prototype.validate = function (val){
				if(val === undefined) val = this.code();
				return (/^[ ]+$/).test(val);
			};
			
			// this should be the default for all nodes, no?
			tag.prototype.mutated = function (o){
				if(o === undefined) o = {};
				if (!o.deep && this.validate(this.code())) { return this };
				return tag.__super__.mutated.apply(this,arguments);
			};
		});
		
		tag$.defineTag('imsemicolon', 'imwhitespace', function(tag){
			tag.type('semicolon');
			tag.alias(';');
		});
		
		tag$.defineTag('imtab', 'imwhitespace', function(tag){
			
			tag.type('tab');
			tag.alias('\t');
			
			tag.prototype.onedit = function (e){
				if (e.isSurrounded()) {
					this.log('delete tab?!?');
					if (e.text()) { // otherwise we really are done
						e.redirect(this.prev() || this.next() || this.parent());
					} else {
						e.handled();
					};
					
					e.region().collapse(false);
					this.orphanize();
					return;
				};
			};
			
			tag.prototype.validate = function (val){
				if(val === undefined) val = this.code();
				return val == '\t';
			};
		});
		
		tag$.defineTag('imcomment', 'im', function(tag){
			
			tag.type('comment');
			
			tag.prototype.validate = function (code){
				return COMMENT.test(code);
			};
			
			tag.prototype.mutated = function (){
				this.log('imcomment mutated');
				return tag.__super__.mutated.apply(this,arguments);
			};
			
			tag.prototype.repair = function (){
				this;
				this.log('repair comment');
				var region = this.region().endAtLine();
				var full = region.text(); // should not include the last line?
				var nodes = region.nodes(false);
				this.log('whole region should be',region,full,nodes);
				this.log('all nodes',nodes);
				
				// VERY temporary
				if (nodes.length > 1) {
					this.setCode(full);
					while (nodes.length > 1){
						var el = nodes.pop();
						el.node.orphanize();
					};
				};
				return this;
			};
			
			tag.prototype.oninserted = function (e){
				return this.repair();
			};
			
			tag.prototype.canPrepend = function (text){
				return false;
			};
			
			tag.prototype.canAppend = function (text){
				if (!text.match(/[\n]/)) { return true };
			};
		});
		
		
		// allow inserting additional tabs directly here?
		
		return tag$.defineTag('eof');
	
	})()

/***/ },
/* 56 */
/***/ function(module, exports) {

	(function(){
		
		
		tag$.defineTag('imwarn', 'im', function(tag){
			
			
			
			tag.prototype.message = function(v){ return this.getAttribute('message'); }
			tag.prototype.setMessage = function(v){ this.setAttribute('message',v); return this; };
			
			tag.prototype.build = function (){
				this.log('built error with error',this.object());
				return this;
			};
		});
		
		return tag$.defineTag('imerr', 'imwarn');
	
	})()

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		var Router = __webpack_require__(58).Router;
		
		function App(){
			this.setCache({});
			this.setDeps({});
			this.reset();
			this.tick();
			this;
		};
		
		exports.App = App; // export class 
		
		
		App.prototype.req = function(v){ return this._req; }
		App.prototype.setReq = function(v){ this._req = v; return this; };
		
		
		App.prototype.res = function(v){ return this._res; }
		App.prototype.setRes = function(v){ this._res = v; return this; };
		
		
		App.prototype.deps = function(v){ return this._deps; }
		App.prototype.setDeps = function(v){ this._deps = v; return this; };
		
		
		App.prototype.site = function(v){ return this._site; }
		App.prototype.setSite = function(v){ this._site = v; return this; };
		
		
		App.prototype.cache = function(v){ return this._cache; }
		App.prototype.setCache = function(v){ this._cache = v; return this; };
		
		App.prototype.reset = function (){
			this.setCache({});
			return this;
		};
		
		App.prototype.router = function (){
			return this._router || (this._router = new Router(this));
		};
		
		App.prototype.path = function (){
			return  false ? (this.req().path) : (this._path);
		};
		
		App.prototype.hash = function (){
			return '';
		};
		
		App.prototype.hash = function (){
			return  false ? ('') : (document.location.hash.substr(1));
		};
		
		App.prototype.tick = function (){
			if (true) {
				this._path = document.location.pathname;
			};
			
			return this;
		};
		
		App.prototype.schedule = function (){
			Imba.schedule(this);
			return this;
		};
		
		App.prototype.unschedule = function (){
			Imba.unschedule(this);
			return this;
		};
		
		App.prototype.fetchDocument = function (src,cb){
			
			var deps_, $1, $3, $2;
			if (false) {
				console.log('fetch document',src);
				
				var fs = require('fs');
				var path = require('path');
				
				var filepath = ("" + __dirname + "/../docs/" + src).replace(/\/\//g,'/');
				
				var res = this.deps()[src];
				
				if (!res) {
					var body = fs.readFileSync(filepath,'utf-8');
					
					if (src.match(/\.md$/)) {
						res = this.Markdown.render(body);
					} else if (src.match(/\.json$/)) {
						res = JSON.parse(body);
					} else if (src.match(/\.imba$/)) {
						var html = this.Highlighter.highlight(body,{mode: 'full'});
						res = {body: body,html: html};
					};
				};
				
				(deps_ = this.deps())[($1 = src)] || (deps_[$1] = res);
				
				if (this.site()) {
					($3 = this.site().deps())[($2 = src)] || ($3[$2] = res);
				};
				cb && cb(res);
			} else {
				if (DEPS[src]) {
					cb && cb(DEPS[src]);
					return {then: function(v) { return v(res); }}; // fake promise hack
				};
				
				var xhr = new XMLHttpRequest();
				xhr.addEventListener('load',function(res) {
					DEPS[src] = JSON.parse(xhr.responseText);
					return cb && cb(DEPS[src]);
					// XHR = xhr
					// console.log 'response here',xhr:responseText
				});
				xhr.open("GET",src);
				xhr.send();
			};
			
			return this;
		};
		
		
		function Doc(path){
			this._path = path;
			this._ready = false;
			this.fetch();
			this;
		};
		
		exports.Doc = Doc; // export class 
		var cache = {};
		
		Doc.get = function (path){
			var $1;
			var cache = APP.cache();
			return cache[($1 = 'doc-' + path)] || (cache[$1] = new this(path));
		};
		
		
		
		Doc.prototype.path = function(v){ return this._path; }
		Doc.prototype.setPath = function(v){ this._path = v; return this; };
		
		Doc.prototype.ready = function (){
			return this._ready;
		};
		
		Doc.prototype.fetch = function (){
			var self = this;
			if (false) {
				// console.log 'fetch Guide on server',path
				return APP.fetchDocument(self._path + '.md',function(res) {
					// console.log 'fetch Guide on server done',path
					return self.load(res);
				});
			};
			
			return self._promise || (self._promise = APP.fetchDocument(self._path + '.md',function(res) {
				return self.load(res);
			}));
		};
		
		Doc.prototype.load = function (doc){
			this._object = doc;
			this._meta = doc.meta || {};
			this._ready = true;
			Imba.emit(this,'ready');
			return this;
		};
		
		Doc.prototype.title = function (){
			return this._object.title || 'path';
		};
		
		Doc.prototype.toc = function (){
			return this._object && this._object.toc[0];
		};
		
		Doc.prototype.body = function (){
			return this._object && this._object.body;
		};
		return Doc;
	
	})()

/***/ },
/* 58 */
/***/ function(module, exports) {

	(function(){
		// externs;
		
		function Router(app){
			var self = this;
			self._app = app;
			
			if (Imba.isClient()) {
				window.onpopstate = function(e) {
					self.refresh();
					console.log('popstate');
					return Imba.setTimeout(0,function() { return true; });
				};
			};
			self;
		};
		
		exports.Router = Router; // export class 
		
		
		Router.prototype.path = function(v){ return this._path; }
		Router.prototype.setPath = function(v){ this._path = v; return this; };
		
		Router.slug = function (str){
			str = str.replace(/^\s+|\s+$/g,'').toLowerCase(); // trim
			// remove accents, swap ñ for n, etc
			var from = "àáäâåèéëêìíïîòóöôùúüûñç·/_,:;";
			var to = "aaaaaeeeeiiiioooouuuunc------";
			
			// for (var i=0, l=from.length ; i<l ; i++)
			// 	str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i))
			
			str = str.replace(/[^a-z0-9 -]/g,''); // remove invalid chars
			str = str.replace(/\s+/g,'-'); // collapse whitespace and replace by -
			str = str.replace(/-+/g,'-'); // collapse dashes
			
			return str;
		};
		
		Router.prototype.refresh = function (){
			return this;
		};
		
		Router.prototype.path = function (){
			return this._app.path();
		};
		
		Router.prototype.hash = function (){
			return this._app.hash();
		};
		
		Router.prototype.ext = function (){
			var path = this.path();
			var m = path.match(/\.([^\/]+)$/);
			return m && m[1] || '';
		};
		
		Router.prototype.go = function (href,state,replace){
			if(state === undefined) state = {};
			if(replace === undefined) replace = false;
			if (href == '/install') {
				// redirects here
				href = '/guides#toc-getting-started-installation';
			};
			
			if (replace) {
				history.replaceState(state,null,href);
			} else {
				history.pushState(state,null,href);
			};
			
			if (!href.match(/\#/)) {
				window.scrollTo(0,0);
			};
			
			return this;
		};
		
		Router.prototype.scoped = function (reg,part){
			var path = this.path() + '#' + this.hash();
			if ((typeof reg=='string'||reg instanceof String)) {
				var nxt = path[reg.length];
				return path.substr(0,reg.length) == reg && (!nxt || nxt == '-' || nxt == '/' || nxt == '#' || nxt == '?' || nxt == '_');
			} else if (reg instanceof RegExp) {
				var m = path.match(reg);
				return part && m ? (m[part]) : (m);
			} else {
				return false;
			};
		};
		
		Router.prototype.match = function (reg,part){
			var path = this.path() + '#' + this.hash();
			
			if ((typeof reg=='string'||reg instanceof String)) {
				return path == reg;
			} else if (reg instanceof RegExp) {
				var m = path.match(reg);
				return part && m ? (m[part]) : (m);
			} else {
				return false;
			};
		};
		return Router;
		
	
	})()

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		
		__webpack_require__(60);
		__webpack_require__(61);
		
		__webpack_require__(63);
		__webpack_require__(64);
		__webpack_require__(65);
		__webpack_require__(66);
		__webpack_require__(67);
		__webpack_require__(68);
		__webpack_require__(69);
		return __webpack_require__(70);
	
	})()

/***/ },
/* 60 */
/***/ function(module, exports) {

	(function(){
		tag$.extendTag('element', function(tag){
			
			
			tag.prototype.route = function(v){ return this.getAttribute('route'); }
			tag.prototype.setRoute = function(v){ this.setAttribute('route',v); return this; };
			
			tag.prototype.setHtml = function (html){
				this._dom.innerHTML = html;
				return this;
			};
			
			tag.prototype.go = function (route){
				return this;
			};
			
			tag.prototype.router = function (){
				return APP.router();
			};
			
			tag.prototype.reroute = function (){
				this.flag('scoped',this.router().scoped(this.route(),this));
				return this.flag('selected',this.router().match(this.route(),this));
			};
			
			tag.prototype.setTransform = function (value){
				this.css('transform',value);
				return this;
			};
			
			tag.prototype.transform = function (){
				return this.css('transform');
			};
		});
		
		tag$.extendTag('script', function(tag){
			
			tag.prototype.setChildren = function (value){
				this._children = value;
				this.dom().innerHTML = value;
				return this;
			};
		});
		
		tag$.extendTag('canvas', function(tag){
			
			tag.prototype.dpr = function (){
				return this._dpr || (this._dpr = window.devicePixelRatio || 1);
			};
			
			tag.prototype.setWidth = function (width){
				if (width != this._width) {
					this.dom().width = width * this.dpr();
					this.css({width: width});
					this._width = width;
				};
				return this;
			};
			
			tag.prototype.setHeight = function (height){
				if (height != this._height) {
					this.dom().height = height * this.dpr();
					this.css({height: height});
					this._height = height;
				};
				return this;
			};
		});
		
		return tag$.extendTag('a', function(tag){
			
			tag.prototype.route = function (){
				return this._route || this.href();
			};
			
			tag.prototype.ontap = function (e){
				if (e.event().metaKey || e.event().altKey) {
					e._responder = null;
					return e.halt();
				};
				
				if (this.href()[0] == '#' || this.href()[0] == '/') {
					e.cancel().halt();
					this.router().go(this.href(),{});
					Imba.Events.trigger('route',this);
				} else {
					e._responder = null;
					return e.halt();
				};
				return this;
			};
			
			tag.prototype.render = function (){
				return this.reroute();
			};
		});
	
	})()

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// for markdown rendering
		tag$.defineTag('md', function(tag){
			
			
			tag.prototype.__src = {watch: 'reload',name: 'src'};
			tag.prototype.src = function(v){ return this.getAttribute('src'); }
			tag.prototype.setSrc = function(v){
				var a = this.src();
				if(v != a) { this.setAttribute('src',v); }
				if(v != a) { this.reload && this.reload(v,a,this.__src) }
				return this;
			};
			
			tag.prototype.__html = {watch: 'htmlDidSet',name: 'html'};
			tag.prototype.html = function(v){ return this._html; }
			tag.prototype.setHtml = function(v){
				var a = this.html();
				if(v != a) { this._html = v; }
				if(v != a) { this.htmlDidSet && this.htmlDidSet(v,a,this.__html) }
				return this;
			};
			
			
			tag.prototype.doc = function(v){ return this._doc; }
			tag.prototype.setDoc = function(v){ this._doc = v; return this; };
			
			tag.prototype.body = function (){
				return this;
			};
			
			tag.prototype.setup = function (){
				return this;
			};
			
			tag.prototype.ghsrc = function (){
				return ("https://github.com/somebee/imba.io/blob/master/docs" + this.src());
			};
			
			tag.prototype.htmlDidSet = function (html){
				this.body().dom().innerHTML = html;
				this.setup();
				return this;
			};
			
			tag.prototype.render = function (){
				var self = this;
				if (false) {
					APP.fetchDocument(self.src() + '.md',function(doc) {
						return self.assemble(doc);
					});
				} else if (self._snippets) {
					for (var i = 0, ary = iter$(self._snippets), len = ary.length; i < len; i++) {
						ary[i].end(); // simulate real rendering here?
					};
				};
				return self;
			};
			
			// not on frontpage?!
			tag.prototype.assemble = function (doc){
				return this.flag('md').setHtml(doc.body).synced();
			};
			
			tag.prototype.build = function (){
				tag.__super__.build.apply(this,arguments);
				if (Imba.isClient() && this.src()) { return this.reload() };
			};
			
			tag.prototype.awaken = function (){
				// log "awakened md from client(!)"
				this._snippets = q$('._snippet',this).toArray();
				return this;
			};
			
			tag.prototype.preload = function (html){
				this._dom.innerHTML = html;
				this._snippets = q$('._snippet',this).toArray();
				return this;
			};
			
			tag.prototype.reload = function (){
				var self = this;
				if (Imba.isClient()) {
					// console.log 'reloading markdown'
					self._snippets = [];
					APP.fetchDocument(self.src() + '.md',function(res) {
						// console.log 'returned from markdown here?!',res
						self.assemble((self.setDoc(res),res));
						self._snippets = q$('._snippet',self).toArray();
						self.parent().dom().scrollTop = 0;
						return self;
					});
				};
				return self;
			};
		});
		
		// define renderer
		var marked = __webpack_require__(62);
		var mdr = new (marked.Renderer)();
		
		mdr.heading = function (text,lvl){
			return ("<h" + lvl + ">" + text + "</h" + lvl + ">");
		};
		
		return tag$.defineTag('marked', function(tag){
			
			tag.prototype.renderer = function (){
				return this;
			};
			
			tag.prototype.setText = function (text){
				return this.setContent(text,0);
			};
			
			tag.prototype.setContent = function (val,typ){
				if (val != this._content) {
					this._content = val;
					this.dom().innerHTML = marked(val,{renderer: mdr});
				};
				return this;
			};
		});
	
	})()

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 */
	
	;(function() {
	
	/**
	 * Block-Level Grammar
	 */
	
	var block = {
	  newline: /^\n+/,
	  code: /^( {4}[^\n]+\n*)+/,
	  fences: noop,
	  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
	  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
	  nptable: noop,
	  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
	  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
	  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
	  table: noop,
	  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
	  text: /^[^\n]+/
	};
	
	block.bullet = /(?:[*+-]|\d+\.)/;
	block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
	block.item = replace(block.item, 'gm')
	  (/bull/g, block.bullet)
	  ();
	
	block.list = replace(block.list)
	  (/bull/g, block.bullet)
	  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
	  ('def', '\\n+(?=' + block.def.source + ')')
	  ();
	
	block.blockquote = replace(block.blockquote)
	  ('def', block.def)
	  ();
	
	block._tag = '(?!(?:'
	  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
	  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
	  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';
	
	block.html = replace(block.html)
	  ('comment', /<!--[\s\S]*?-->/)
	  ('closed', /<(tag)[\s\S]+?<\/\1>/)
	  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
	  (/tag/g, block._tag)
	  ();
	
	block.paragraph = replace(block.paragraph)
	  ('hr', block.hr)
	  ('heading', block.heading)
	  ('lheading', block.lheading)
	  ('blockquote', block.blockquote)
	  ('tag', '<' + block._tag)
	  ('def', block.def)
	  ();
	
	/**
	 * Normal Block Grammar
	 */
	
	block.normal = merge({}, block);
	
	/**
	 * GFM Block Grammar
	 */
	
	block.gfm = merge({}, block.normal, {
	  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
	  paragraph: /^/,
	  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
	});
	
	block.gfm.paragraph = replace(block.paragraph)
	  ('(?!', '(?!'
	    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
	    + block.list.source.replace('\\1', '\\3') + '|')
	  ();
	
	/**
	 * GFM + Tables Block Grammar
	 */
	
	block.tables = merge({}, block.gfm, {
	  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
	  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
	});
	
	/**
	 * Block Lexer
	 */
	
	function Lexer(options) {
	  this.tokens = [];
	  this.tokens.links = {};
	  this.options = options || marked.defaults;
	  this.rules = block.normal;
	
	  if (this.options.gfm) {
	    if (this.options.tables) {
	      this.rules = block.tables;
	    } else {
	      this.rules = block.gfm;
	    }
	  }
	}
	
	/**
	 * Expose Block Rules
	 */
	
	Lexer.rules = block;
	
	/**
	 * Static Lex Method
	 */
	
	Lexer.lex = function(src, options) {
	  var lexer = new Lexer(options);
	  return lexer.lex(src);
	};
	
	/**
	 * Preprocessing
	 */
	
	Lexer.prototype.lex = function(src) {
	  src = src
	    .replace(/\r\n|\r/g, '\n')
	    .replace(/\t/g, '    ')
	    .replace(/\u00a0/g, ' ')
	    .replace(/\u2424/g, '\n');
	
	  return this.token(src, true);
	};
	
	/**
	 * Lexing
	 */
	
	Lexer.prototype.token = function(src, top, bq) {
	  var src = src.replace(/^ +$/gm, '')
	    , next
	    , loose
	    , cap
	    , bull
	    , b
	    , item
	    , space
	    , i
	    , l;
	
	  while (src) {
	    // newline
	    if (cap = this.rules.newline.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[0].length > 1) {
	        this.tokens.push({
	          type: 'space'
	        });
	      }
	    }
	
	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      cap = cap[0].replace(/^ {4}/gm, '');
	      this.tokens.push({
	        type: 'code',
	        text: !this.options.pedantic
	          ? cap.replace(/\n+$/, '')
	          : cap
	      });
	      continue;
	    }
	
	    // fences (gfm)
	    if (cap = this.rules.fences.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'code',
	        lang: cap[2],
	        text: cap[3] || ''
	      });
	      continue;
	    }
	
	    // heading
	    if (cap = this.rules.heading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[1].length,
	        text: cap[2]
	      });
	      continue;
	    }
	
	    // table no leading pipe (gfm)
	    if (top && (cap = this.rules.nptable.exec(src))) {
	      src = src.substring(cap[0].length);
	
	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/\n$/, '').split('\n')
	      };
	
	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }
	
	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i].split(/ *\| */);
	      }
	
	      this.tokens.push(item);
	
	      continue;
	    }
	
	    // lheading
	    if (cap = this.rules.lheading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[2] === '=' ? 1 : 2,
	        text: cap[1]
	      });
	      continue;
	    }
	
	    // hr
	    if (cap = this.rules.hr.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'hr'
	      });
	      continue;
	    }
	
	    // blockquote
	    if (cap = this.rules.blockquote.exec(src)) {
	      src = src.substring(cap[0].length);
	
	      this.tokens.push({
	        type: 'blockquote_start'
	      });
	
	      cap = cap[0].replace(/^ *> ?/gm, '');
	
	      // Pass `top` to keep the current
	      // "toplevel" state. This is exactly
	      // how markdown.pl works.
	      this.token(cap, top, true);
	
	      this.tokens.push({
	        type: 'blockquote_end'
	      });
	
	      continue;
	    }
	
	    // list
	    if (cap = this.rules.list.exec(src)) {
	      src = src.substring(cap[0].length);
	      bull = cap[2];
	
	      this.tokens.push({
	        type: 'list_start',
	        ordered: bull.length > 1
	      });
	
	      // Get each top-level item.
	      cap = cap[0].match(this.rules.item);
	
	      next = false;
	      l = cap.length;
	      i = 0;
	
	      for (; i < l; i++) {
	        item = cap[i];
	
	        // Remove the list item's bullet
	        // so it is seen as the next token.
	        space = item.length;
	        item = item.replace(/^ *([*+-]|\d+\.) +/, '');
	
	        // Outdent whatever the
	        // list item contains. Hacky.
	        if (~item.indexOf('\n ')) {
	          space -= item.length;
	          item = !this.options.pedantic
	            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
	            : item.replace(/^ {1,4}/gm, '');
	        }
	
	        // Determine whether the next list item belongs here.
	        // Backpedal if it does not belong in this list.
	        if (this.options.smartLists && i !== l - 1) {
	          b = block.bullet.exec(cap[i + 1])[0];
	          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
	            src = cap.slice(i + 1).join('\n') + src;
	            i = l - 1;
	          }
	        }
	
	        // Determine whether item is loose or not.
	        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	        // for discount behavior.
	        loose = next || /\n\n(?!\s*$)/.test(item);
	        if (i !== l - 1) {
	          next = item.charAt(item.length - 1) === '\n';
	          if (!loose) loose = next;
	        }
	
	        this.tokens.push({
	          type: loose
	            ? 'loose_item_start'
	            : 'list_item_start'
	        });
	
	        // Recurse.
	        this.token(item, false, bq);
	
	        this.tokens.push({
	          type: 'list_item_end'
	        });
	      }
	
	      this.tokens.push({
	        type: 'list_end'
	      });
	
	      continue;
	    }
	
	    // html
	    if (cap = this.rules.html.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: this.options.sanitize
	          ? 'paragraph'
	          : 'html',
	        pre: !this.options.sanitizer
	          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	        text: cap[0]
	      });
	      continue;
	    }
	
	    // def
	    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.links[cap[1].toLowerCase()] = {
	        href: cap[2],
	        title: cap[3]
	      };
	      continue;
	    }
	
	    // table (gfm)
	    if (top && (cap = this.rules.table.exec(src))) {
	      src = src.substring(cap[0].length);
	
	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
	      };
	
	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }
	
	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i]
	          .replace(/^ *\| *| *\| *$/g, '')
	          .split(/ *\| */);
	      }
	
	      this.tokens.push(item);
	
	      continue;
	    }
	
	    // top-level paragraph
	    if (top && (cap = this.rules.paragraph.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'paragraph',
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1]
	      });
	      continue;
	    }
	
	    // text
	    if (cap = this.rules.text.exec(src)) {
	      // Top-level should never reach here.
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'text',
	        text: cap[0]
	      });
	      continue;
	    }
	
	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }
	
	  return this.tokens;
	};
	
	/**
	 * Inline-Level Grammar
	 */
	
	var inline = {
	  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
	  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
	  url: noop,
	  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
	  link: /^!?\[(inside)\]\(href\)/,
	  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
	  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
	  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
	  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
	  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
	  br: /^ {2,}\n(?!\s*$)/,
	  del: noop,
	  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
	};
	
	inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
	inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;
	
	inline.link = replace(inline.link)
	  ('inside', inline._inside)
	  ('href', inline._href)
	  ();
	
	inline.reflink = replace(inline.reflink)
	  ('inside', inline._inside)
	  ();
	
	/**
	 * Normal Inline Grammar
	 */
	
	inline.normal = merge({}, inline);
	
	/**
	 * Pedantic Inline Grammar
	 */
	
	inline.pedantic = merge({}, inline.normal, {
	  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
	});
	
	/**
	 * GFM Inline Grammar
	 */
	
	inline.gfm = merge({}, inline.normal, {
	  escape: replace(inline.escape)('])', '~|])')(),
	  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
	  del: /^~~(?=\S)([\s\S]*?\S)~~/,
	  text: replace(inline.text)
	    (']|', '~]|')
	    ('|', '|https?://|')
	    ()
	});
	
	/**
	 * GFM + Line Breaks Inline Grammar
	 */
	
	inline.breaks = merge({}, inline.gfm, {
	  br: replace(inline.br)('{2,}', '*')(),
	  text: replace(inline.gfm.text)('{2,}', '*')()
	});
	
	/**
	 * Inline Lexer & Compiler
	 */
	
	function InlineLexer(links, options) {
	  this.options = options || marked.defaults;
	  this.links = links;
	  this.rules = inline.normal;
	  this.renderer = this.options.renderer || new Renderer;
	  this.renderer.options = this.options;
	
	  if (!this.links) {
	    throw new
	      Error('Tokens array requires a `links` property.');
	  }
	
	  if (this.options.gfm) {
	    if (this.options.breaks) {
	      this.rules = inline.breaks;
	    } else {
	      this.rules = inline.gfm;
	    }
	  } else if (this.options.pedantic) {
	    this.rules = inline.pedantic;
	  }
	}
	
	/**
	 * Expose Inline Rules
	 */
	
	InlineLexer.rules = inline;
	
	/**
	 * Static Lexing/Compiling Method
	 */
	
	InlineLexer.output = function(src, links, options) {
	  var inline = new InlineLexer(links, options);
	  return inline.output(src);
	};
	
	/**
	 * Lexing/Compiling
	 */
	
	InlineLexer.prototype.output = function(src) {
	  var out = ''
	    , link
	    , text
	    , href
	    , cap;
	
	  while (src) {
	    // escape
	    if (cap = this.rules.escape.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += cap[1];
	      continue;
	    }
	
	    // autolink
	    if (cap = this.rules.autolink.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[2] === '@') {
	        text = cap[1].charAt(6) === ':'
	          ? this.mangle(cap[1].substring(7))
	          : this.mangle(cap[1]);
	        href = this.mangle('mailto:') + text;
	      } else {
	        text = escape(cap[1]);
	        href = text;
	      }
	      out += this.renderer.link(href, null, text);
	      continue;
	    }
	
	    // url (gfm)
	    if (!this.inLink && (cap = this.rules.url.exec(src))) {
	      src = src.substring(cap[0].length);
	      text = escape(cap[1]);
	      href = text;
	      out += this.renderer.link(href, null, text);
	      continue;
	    }
	
	    // tag
	    if (cap = this.rules.tag.exec(src)) {
	      if (!this.inLink && /^<a /i.test(cap[0])) {
	        this.inLink = true;
	      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
	        this.inLink = false;
	      }
	      src = src.substring(cap[0].length);
	      out += this.options.sanitize
	        ? this.options.sanitizer
	          ? this.options.sanitizer(cap[0])
	          : escape(cap[0])
	        : cap[0]
	      continue;
	    }
	
	    // link
	    if (cap = this.rules.link.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.inLink = true;
	      out += this.outputLink(cap, {
	        href: cap[2],
	        title: cap[3]
	      });
	      this.inLink = false;
	      continue;
	    }
	
	    // reflink, nolink
	    if ((cap = this.rules.reflink.exec(src))
	        || (cap = this.rules.nolink.exec(src))) {
	      src = src.substring(cap[0].length);
	      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = this.links[link.toLowerCase()];
	      if (!link || !link.href) {
	        out += cap[0].charAt(0);
	        src = cap[0].substring(1) + src;
	        continue;
	      }
	      this.inLink = true;
	      out += this.outputLink(cap, link);
	      this.inLink = false;
	      continue;
	    }
	
	    // strong
	    if (cap = this.rules.strong.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.strong(this.output(cap[2] || cap[1]));
	      continue;
	    }
	
	    // em
	    if (cap = this.rules.em.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.em(this.output(cap[2] || cap[1]));
	      continue;
	    }
	
	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.codespan(escape(cap[2], true));
	      continue;
	    }
	
	    // br
	    if (cap = this.rules.br.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.br();
	      continue;
	    }
	
	    // del (gfm)
	    if (cap = this.rules.del.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.del(this.output(cap[1]));
	      continue;
	    }
	
	    // text
	    if (cap = this.rules.text.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.text(escape(this.smartypants(cap[0])));
	      continue;
	    }
	
	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }
	
	  return out;
	};
	
	/**
	 * Compile Link
	 */
	
	InlineLexer.prototype.outputLink = function(cap, link) {
	  var href = escape(link.href)
	    , title = link.title ? escape(link.title) : null;
	
	  return cap[0].charAt(0) !== '!'
	    ? this.renderer.link(href, title, this.output(cap[1]))
	    : this.renderer.image(href, title, escape(cap[1]));
	};
	
	/**
	 * Smartypants Transformations
	 */
	
	InlineLexer.prototype.smartypants = function(text) {
	  if (!this.options.smartypants) return text;
	  return text
	    // em-dashes
	    .replace(/---/g, '\u2014')
	    // en-dashes
	    .replace(/--/g, '\u2013')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	};
	
	/**
	 * Mangle Links
	 */
	
	InlineLexer.prototype.mangle = function(text) {
	  if (!this.options.mangle) return text;
	  var out = ''
	    , l = text.length
	    , i = 0
	    , ch;
	
	  for (; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }
	
	  return out;
	};
	
	/**
	 * Renderer
	 */
	
	function Renderer(options) {
	  this.options = options || {};
	}
	
	Renderer.prototype.code = function(code, lang, escaped) {
	  if (this.options.highlight) {
	    var out = this.options.highlight(code, lang);
	    if (out != null && out !== code) {
	      escaped = true;
	      code = out;
	    }
	  }
	
	  if (!lang) {
	    return '<pre><code>'
	      + (escaped ? code : escape(code, true))
	      + '\n</code></pre>';
	  }
	
	  return '<pre><code class="'
	    + this.options.langPrefix
	    + escape(lang, true)
	    + '">'
	    + (escaped ? code : escape(code, true))
	    + '\n</code></pre>\n';
	};
	
	Renderer.prototype.blockquote = function(quote) {
	  return '<blockquote>\n' + quote + '</blockquote>\n';
	};
	
	Renderer.prototype.html = function(html) {
	  return html;
	};
	
	Renderer.prototype.heading = function(text, level, raw) {
	  return '<h'
	    + level
	    + ' id="'
	    + this.options.headerPrefix
	    + raw.toLowerCase().replace(/[^\w]+/g, '-')
	    + '">'
	    + text
	    + '</h'
	    + level
	    + '>\n';
	};
	
	Renderer.prototype.hr = function() {
	  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	};
	
	Renderer.prototype.list = function(body, ordered) {
	  var type = ordered ? 'ol' : 'ul';
	  return '<' + type + '>\n' + body + '</' + type + '>\n';
	};
	
	Renderer.prototype.listitem = function(text) {
	  return '<li>' + text + '</li>\n';
	};
	
	Renderer.prototype.paragraph = function(text) {
	  return '<p>' + text + '</p>\n';
	};
	
	Renderer.prototype.table = function(header, body) {
	  return '<table>\n'
	    + '<thead>\n'
	    + header
	    + '</thead>\n'
	    + '<tbody>\n'
	    + body
	    + '</tbody>\n'
	    + '</table>\n';
	};
	
	Renderer.prototype.tablerow = function(content) {
	  return '<tr>\n' + content + '</tr>\n';
	};
	
	Renderer.prototype.tablecell = function(content, flags) {
	  var type = flags.header ? 'th' : 'td';
	  var tag = flags.align
	    ? '<' + type + ' style="text-align:' + flags.align + '">'
	    : '<' + type + '>';
	  return tag + content + '</' + type + '>\n';
	};
	
	// span level renderer
	Renderer.prototype.strong = function(text) {
	  return '<strong>' + text + '</strong>';
	};
	
	Renderer.prototype.em = function(text) {
	  return '<em>' + text + '</em>';
	};
	
	Renderer.prototype.codespan = function(text) {
	  return '<code>' + text + '</code>';
	};
	
	Renderer.prototype.br = function() {
	  return this.options.xhtml ? '<br/>' : '<br>';
	};
	
	Renderer.prototype.del = function(text) {
	  return '<del>' + text + '</del>';
	};
	
	Renderer.prototype.link = function(href, title, text) {
	  if (this.options.sanitize) {
	    try {
	      var prot = decodeURIComponent(unescape(href))
	        .replace(/[^\w:]/g, '')
	        .toLowerCase();
	    } catch (e) {
	      return '';
	    }
	    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
	      return '';
	    }
	  }
	  var out = '<a href="' + href + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += '>' + text + '</a>';
	  return out;
	};
	
	Renderer.prototype.image = function(href, title, text) {
	  var out = '<img src="' + href + '" alt="' + text + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += this.options.xhtml ? '/>' : '>';
	  return out;
	};
	
	Renderer.prototype.text = function(text) {
	  return text;
	};
	
	/**
	 * Parsing & Compiling
	 */
	
	function Parser(options) {
	  this.tokens = [];
	  this.token = null;
	  this.options = options || marked.defaults;
	  this.options.renderer = this.options.renderer || new Renderer;
	  this.renderer = this.options.renderer;
	  this.renderer.options = this.options;
	}
	
	/**
	 * Static Parse Method
	 */
	
	Parser.parse = function(src, options, renderer) {
	  var parser = new Parser(options, renderer);
	  return parser.parse(src);
	};
	
	/**
	 * Parse Loop
	 */
	
	Parser.prototype.parse = function(src) {
	  this.inline = new InlineLexer(src.links, this.options, this.renderer);
	  this.tokens = src.reverse();
	
	  var out = '';
	  while (this.next()) {
	    out += this.tok();
	  }
	
	  return out;
	};
	
	/**
	 * Next Token
	 */
	
	Parser.prototype.next = function() {
	  return this.token = this.tokens.pop();
	};
	
	/**
	 * Preview Next Token
	 */
	
	Parser.prototype.peek = function() {
	  return this.tokens[this.tokens.length - 1] || 0;
	};
	
	/**
	 * Parse Text Tokens
	 */
	
	Parser.prototype.parseText = function() {
	  var body = this.token.text;
	
	  while (this.peek().type === 'text') {
	    body += '\n' + this.next().text;
	  }
	
	  return this.inline.output(body);
	};
	
	/**
	 * Parse Current Token
	 */
	
	Parser.prototype.tok = function() {
	  switch (this.token.type) {
	    case 'space': {
	      return '';
	    }
	    case 'hr': {
	      return this.renderer.hr();
	    }
	    case 'heading': {
	      return this.renderer.heading(
	        this.inline.output(this.token.text),
	        this.token.depth,
	        this.token.text);
	    }
	    case 'code': {
	      return this.renderer.code(this.token.text,
	        this.token.lang,
	        this.token.escaped);
	    }
	    case 'table': {
	      var header = ''
	        , body = ''
	        , i
	        , row
	        , cell
	        , flags
	        , j;
	
	      // header
	      cell = '';
	      for (i = 0; i < this.token.header.length; i++) {
	        flags = { header: true, align: this.token.align[i] };
	        cell += this.renderer.tablecell(
	          this.inline.output(this.token.header[i]),
	          { header: true, align: this.token.align[i] }
	        );
	      }
	      header += this.renderer.tablerow(cell);
	
	      for (i = 0; i < this.token.cells.length; i++) {
	        row = this.token.cells[i];
	
	        cell = '';
	        for (j = 0; j < row.length; j++) {
	          cell += this.renderer.tablecell(
	            this.inline.output(row[j]),
	            { header: false, align: this.token.align[j] }
	          );
	        }
	
	        body += this.renderer.tablerow(cell);
	      }
	      return this.renderer.table(header, body);
	    }
	    case 'blockquote_start': {
	      var body = '';
	
	      while (this.next().type !== 'blockquote_end') {
	        body += this.tok();
	      }
	
	      return this.renderer.blockquote(body);
	    }
	    case 'list_start': {
	      var body = ''
	        , ordered = this.token.ordered;
	
	      while (this.next().type !== 'list_end') {
	        body += this.tok();
	      }
	
	      return this.renderer.list(body, ordered);
	    }
	    case 'list_item_start': {
	      var body = '';
	
	      while (this.next().type !== 'list_item_end') {
	        body += this.token.type === 'text'
	          ? this.parseText()
	          : this.tok();
	      }
	
	      return this.renderer.listitem(body);
	    }
	    case 'loose_item_start': {
	      var body = '';
	
	      while (this.next().type !== 'list_item_end') {
	        body += this.tok();
	      }
	
	      return this.renderer.listitem(body);
	    }
	    case 'html': {
	      var html = !this.token.pre && !this.options.pedantic
	        ? this.inline.output(this.token.text)
	        : this.token.text;
	      return this.renderer.html(html);
	    }
	    case 'paragraph': {
	      return this.renderer.paragraph(this.inline.output(this.token.text));
	    }
	    case 'text': {
	      return this.renderer.paragraph(this.parseText());
	    }
	  }
	};
	
	/**
	 * Helpers
	 */
	
	function escape(html, encode) {
	  return html
	    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;');
	}
	
	function unescape(html) {
	  return html.replace(/&([#\w]+);/g, function(_, n) {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}
	
	function replace(regex, opt) {
	  regex = regex.source;
	  opt = opt || '';
	  return function self(name, val) {
	    if (!name) return new RegExp(regex, opt);
	    val = val.source || val;
	    val = val.replace(/(^|[^\[])\^/g, '$1');
	    regex = regex.replace(name, val);
	    return self;
	  };
	}
	
	function noop() {}
	noop.exec = noop;
	
	function merge(obj) {
	  var i = 1
	    , target
	    , key;
	
	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }
	
	  return obj;
	}
	
	
	/**
	 * Marked
	 */
	
	function marked(src, opt, callback) {
	  if (callback || typeof opt === 'function') {
	    if (!callback) {
	      callback = opt;
	      opt = null;
	    }
	
	    opt = merge({}, marked.defaults, opt || {});
	
	    var highlight = opt.highlight
	      , tokens
	      , pending
	      , i = 0;
	
	    try {
	      tokens = Lexer.lex(src, opt)
	    } catch (e) {
	      return callback(e);
	    }
	
	    pending = tokens.length;
	
	    var done = function(err) {
	      if (err) {
	        opt.highlight = highlight;
	        return callback(err);
	      }
	
	      var out;
	
	      try {
	        out = Parser.parse(tokens, opt);
	      } catch (e) {
	        err = e;
	      }
	
	      opt.highlight = highlight;
	
	      return err
	        ? callback(err)
	        : callback(null, out);
	    };
	
	    if (!highlight || highlight.length < 3) {
	      return done();
	    }
	
	    delete opt.highlight;
	
	    if (!pending) return done();
	
	    for (; i < tokens.length; i++) {
	      (function(token) {
	        if (token.type !== 'code') {
	          return --pending || done();
	        }
	        return highlight(token.text, token.lang, function(err, code) {
	          if (err) return done(err);
	          if (code == null || code === token.text) {
	            return --pending || done();
	          }
	          token.text = code;
	          token.escaped = true;
	          --pending || done();
	        });
	      })(tokens[i]);
	    }
	
	    return;
	  }
	  try {
	    if (opt) opt = merge({}, marked.defaults, opt);
	    return Parser.parse(Lexer.lex(src, opt), opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/chjj/marked.';
	    if ((opt || marked.defaults).silent) {
	      return '<p>An error occured:</p><pre>'
	        + escape(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}
	
	/**
	 * Options
	 */
	
	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  return marked;
	};
	
	marked.defaults = {
	  gfm: true,
	  tables: true,
	  breaks: false,
	  pedantic: false,
	  sanitize: false,
	  sanitizer: null,
	  mangle: true,
	  smartLists: false,
	  silent: false,
	  highlight: null,
	  langPrefix: 'lang-',
	  smartypants: false,
	  headerPrefix: '',
	  renderer: new Renderer,
	  xhtml: false
	};
	
	/**
	 * Expose
	 */
	
	marked.Parser = Parser;
	marked.parser = Parser.parse;
	
	marked.Renderer = Renderer;
	
	marked.Lexer = Lexer;
	marked.lexer = Lexer.lex;
	
	marked.InlineLexer = InlineLexer;
	marked.inlineLexer = InlineLexer.output;
	
	marked.parse = marked;
	
	if (true) {
	  module.exports = marked;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return marked; });
	} else {
	  this.marked = marked;
	}
	
	}).call(function() {
	  return this || ( true ? window : global);
	}());


/***/ },
/* 63 */
/***/ function(module, exports) {

	(function(){
		tag$.defineTag('site', 'html', function(tag){
			
			
			
			tag.prototype.deps = function(v){ return this._deps; }
			tag.prototype.setDeps = function(v){ this._deps = v; return this; };
			
			tag.prototype.head = function (){
				return tag$.$head().setContent([
					tag$.$title().setText("imba").end(),
					tag$.$meta().setCharset("utf-8").end(),
					tag$.$meta().setName("viewport").setContent("width=device-width, initial-scale=1, maximum-scale=1,minimum-scale=1").end(),
					tag$.$meta().setName("Description").setContent("Imba is a rich programming language for the web.").end(),
					tag$.$meta().setName("keywords").setContent("imba javascript language js").end(),
					tag$.$link().setHref('http://fonts.googleapis.com/css?family=Source+Code+Pro:400,500,600').setRel('stylesheet').setType('text/css').end(),
					tag$.$link().setRel("stylesheet").setHref("/css/site.css").setMedia("screen").end(),
					tag$.$script().setText('DEPS = {};').end(),
					tag$.$script().setSrc("/vendor/ga.js").end()
				],2).end();
			};
			
			tag.prototype.body = function (){
				return tag$.$body().setId('site').setContent([
					tag$.$site_nav().setId('header').flag('awaken').end(),
					tag$.$home().setRoute('/home').end(),
					tag$.$guides().setRoute('/guides').end(),
					tag$.$docs().setRoute('/docs').end(),
					tag$.$blog().setRoute('/blog').end()
				],2).end();
			};
			
			tag.prototype.scripts = function (){
				var self = this, t0;
				return tag$.$div().flag('scripts').setContent([
					(function(t0) {
						for (var o = self.deps(), i = 0, keys = Object.keys(o), l = keys.length, res = []; i < l; i++){
							res.push(tag$.$script().setType("text/javascript").setSrc((keys[i] + '.dep')).end());
						};
						return res;
					})(t0),
					tag$.$script().setSrc("/vendor/hl.js").end(),
					tag$.$script().setSrc("/client.js").end()
				],0).end();
			};
			
			tag.prototype.render = function (){
				// dirty workarounds
				APP.setSite(this);
				this.setDeps({});
				APP.fetchDocument('/guides.md');
				var body = this.body();
				body.append(this.scripts());
				
				this.flag('light').setChildren([
					this.head(),
					body
				],1).synced();
				APP.setSite(null);
				return this;
			};
		});
		
		
		return tag$.defineTag('site-nav', function(tag){
			
			tag.prototype.toggleMenu = function (){
				return q$$('body').toggleFlag('menu');
			};
			
			tag.prototype.render = function (){
				var t0, t1, t2, t3, t4, t5, t6, t7;
				return this.setChildren(
					(t0 = this.$a=this.$a || tag$.$nav().flag('content')).setContent([
						(t1 = t0.$$a=t0.$$a || tag$.$a().flag('menu').setHandler('tap','toggleMenu',this)).setContent((t1.$$a = t1.$$a || tag$.$b()).end(),2).end(),
						(t2 = t0.$$b=t0.$$b || tag$.$a().flag('tab').flag('logo').setHref('/home')).setContent((t2.$$a = t2.$$a || tag$.$i()).setText('imba').end(),2).end(),
						(t0.$$c = t0.$$c || tag$.$span().flag('greedy')).end(),
						(t3 = t0.$$d=t0.$$d || tag$.$a().flag('tab').flag('home').setHref('/home')).setContent((t3.$$a = t3.$$a || tag$.$i()).setText('home').end(),2).end(),
						(t4 = t0.$$e=t0.$$e || tag$.$a().flag('tab').flag('guides').setHref('/guides')).setContent((t4.$$a = t4.$$a || tag$.$i()).setText('guides').end(),2).end(),
						(t5 = t0.$$f=t0.$$f || tag$.$a().flag('tab').flag('docs').setHref('/docs')).setContent((t5.$$a = t5.$$a || tag$.$i()).setText('docs').end(),2).end(),
						(t6 = t0.$$g=t0.$$g || tag$.$a().flag('tab').flag('blog').setHref('/blog')).setContent((t6.$$a = t6.$$a || tag$.$i()).setText('blog').end(),2).end(),
						
						(t7 = t0.$$h=t0.$$h || tag$.$a().flag('github').setHref('https://github.com/somebee/imba')).setContent((t7.$$a = t7.$$a || tag$.$i()).setText('github').end(),2).end()
					],2).end()
				,2).synced();
			};
			
			tag.prototype.awaken = function (){
				return this.schedule({fps: 0});
			};
		});
	
	})()

/***/ },
/* 64 */
/***/ function(module, exports) {

	(function(){
		
		
		tag$.defineTag('navmenu', function(tag){
			
			tag.prototype.onroute = function (e){
				document.body.classList.remove('menu');
				return this;
			};
		});
		
		tag$.defineTag('nav-list');
		
		tag$.defineTag('nav-link', function(tag){
			
			
			
			tag.prototype.href = function(v){ return this.getAttribute('href'); }
			tag.prototype.setHref = function(v){ this.setAttribute('href',v); return this; };
			
			tag.prototype.render = function (){
				var t0;
				return this.setChildren((t0 = this.$a=this.$a || tag$.$a()).setHref(this.href()).setContent(this._content,3).end(),2).synced();
			};
		});
		
		return tag$.defineTag('toc', function(tag){
			
			tag.prototype.toggle = function (){
				return this.toggleFlag('collapsed');
			};
		});
	
	})()

/***/ },
/* 65 */
/***/ function(module, exports) {

	(function(){
		
		return tag$.defineTag('page', function(tag){
			tag.prototype.body = function (){
				return (this._body = this._body || tag$.$div().setRef('body',this)).setText("Content here").end();
			};
			
			tag.prototype.nav = function (){
				return (this._nav = this._nav || tag$.$div().setRef('nav',this)).setText("Navigation here").end();
			};
			
			tag.prototype.assemble = function (){
				return this.setChildren([
					this.nav(),
					this.body()
				],1).synced();
			};
			
			tag.prototype.ready = function (){
				return true;
			};
			
			tag.prototype.render = function (){
				// log 'render page',route
				var scoped = this.router().scoped(this.route(),this);
				this.flag('scoped',scoped);
				this.flag('selected',this.router().match(this.route(),this));
				
				if (!(scoped && this.ready())) { return this };
				return this.assemble();
			};
			
			tag.prototype.awaken = function (){
				return this.schedule({fps: 1});
			};
		});
	
	})()

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		function shuffle(array){
			var counter = array.length,temp,index;
			
			// While there are elements in the array
			while (counter > 0){
				// Pick a random index
				index = Math.floor(Math.random() * counter);
				counter--; // Decrease counter by 1
				
				// And swap the last element with it
				temp = array[counter];
				array[counter] = array[index];
				array[index] = temp;
			};
			
			return array;
		};
		
		tag$.defineTag('pattern', function(tag){
			
			tag.prototype.build = function (){
				if (false) { return this };
				
				var parts = {tags: [],keywords: [],methods: []};
				var items = [];
				var lines = [];
				
				for (var o = Imba.Tag.prototype, i = 0, keys = Object.keys(o), l = keys.length; i < l; i++){
					k = keys[i];items.push(("<em>" + k + "</em>"));
					parts.methods.push(("<em>" + k + "</em>"));
				};
				
				for (var i = 0, ary = iter$(HTML_TAGS), len_ = ary.length, k1; i < len_; i++) {
					// for own k,v of Imba.TAGS
					// if v and v:prototype isa Imba.Tag
					k1 = ary[i];
					items.push(("<u>&lt;" + k1 + "&gt;</u>"));
					parts.tags.push(("<u>&lt;" + k1 + "&gt;</u>"));
				};
				
				var words = "def if else elif while until for in of var let class extend export import tag global";
				
				for (var i = 0, ary = iter$(words.split(" ")), len_ = ary.length, k2; i < len_; i++) {
					k2 = ary[i];
					items.push(("<i>" + k2 + "</i>"));
					parts.keywords.push(("<i>" + k2 + "</i>"));
				};
				
				var shuffled = shuffle(items);
				var all = [].concat(shuffled);
				var count = items.length - 1;
				
				for (var len = 12, ln = 0; ln <= len; ln++) {
					var chars = 0;
					lines[ln] = [];
					while (chars < 300){
						var item = (shuffled.pop() || all[Math.floor(count * Math.random())]);
						if (item) {
							chars += item.length;
							lines[ln].push(item);
						} else {
							chars = 400;
						};
					};
				};
				
				this.dom().innerHTML = '<div>' + lines.map(function(ln) {
					return '<div class="line">' + ln.join(" ") + '</div>';
				}).join('') + '</div>';
				return this;
			};
			
			tag.prototype.awaken = function (){
				this.log('awakening pattern!!');
				return this;
				
				for (var i = 0, ary = iter$(q$('.line',this)), len = ary.length; i < len; i++) {
					var z = 20 + i * 10;
					// z = parseInt(-z + Math.random * z * 2)
					ary[i].css('transform',("translateZ(" + z + "px)"));
				};
				return this;
			};
		});
		
		return tag$.defineTag('home', 'page', function(tag){
			
			var todos = {demo: true,autorun: true};
			var clock = {demo: true,autorun: true};
			var reminders = {demo: true,autorun: true};
			var hero = {autorun: true};
			var canvas = {demo: true,autorun: true};
			
			tag.prototype.awaken = function (){
				var snippets = document.querySelectorAll('code[data-src]');
				for (var i = 0, ary = iter$(snippets), len = ary.length, snippet; i < len; i++) {
					snippet = ary[i];
					var src = snippet.getAttribute('data-src');
					// console.log 'fetching snippet for ',src
					DEPS[src] = {html: snippet.innerHTML};
				};
				
				return tag.__super__.awaken.apply(this,arguments);
			};
			
			tag.prototype.nav = function (){
				return null;
			};
			
			tag.prototype.body = function (){
				var t0, t1, t2, t3, t4;
				return (t0 = this._body=this._body || tag$.$div().setRef('body',this)).setContent([
					(t1 = t0.$$a=t0.$$a || tag$.$div().setId('hero').flag('dark')).setContent([
						(this._pattern = this._pattern || tag$.$pattern().setRef('pattern',this).flag('awaken')).end(),
						(t1.$$b = t1.$$b || tag$.$example().flag('hero').flag('dark').setSrc('/home/examples/hero.imba')).end()
					],2).end(),
					
					(t2 = this._content=this._content || tag$.$div().setRef('content',this)).setContent([
						(t2.$$a = t2.$$a || tag$.$marked().flag('section').flag('md').flag('welcome').flag('huge').flag('light')).setText("# Ruby, Python and React got together. Nine months later, Imba was born.\n\nImba is a new programming language for the web that compiles to highly \nperformant and readable JavaScript. It has language level support for defining, \nextending, subclassing, instantiating and rendering dom nodes. For a semi-complex \napplication like TodoMVC, it is more than \n[10 times faster than React](http://somebee.github.io/todomvc-render-benchmark/index.html) \nwith less code, and a much smaller library.\n\n---\n\n- ## Imba.inspiration\n  Imba brings the best from Ruby, Python, and React (+ JSX) together in a clean language and runtime.\n\n- ## Imba.interoperability\n  Imba compiles down to clean and readable JavaScript. Use any JS library in Imba and vica-versa.\n\n- ## Imba.performance\n  Build your application views using Imba's native tags for unprecedented performance.\n").end(),
						
						(t2.$$b = t2.$$b || tag$.$example().flag('dark').setHeading("Simple reminders").setSrc('/home/examples/reminders.imba')).end(),
						
						(t2.$$c = t2.$$c || tag$.$marked().flag('section').flag('md')).setText("## Reusable components\n\nA custom tag / component can maintain internal state and control how to render itself.\nWith the performance of DOM reconciliation in Imba, you can use one-way declarative binding,\neven for animations. Write all your views in a straight-forward linear fashion as if you could\nrerender your whole application on **every single** data/state change.").end(),
						
						(t2.$$d = t2.$$d || tag$.$example().flag('dark').setHeading("World clock").setSrc('/home/examples/clock.imba')).end(),
						
						(t2.$$e = t2.$$e || tag$.$marked().flag('section').flag('md')).setText("## Extend native tags\n\nIn addition to defining custom tags, you can also extend native tags, or inherit from them.\nBinding to dom events is as simple as defining methods on your tags; all events will be\nefficiently delegated and handled by Imba. Let's define a simple sketchpad...").end(),
						
						(t2.$$f = t2.$$f || tag$.$example().flag('dark').setHeading("Custom canvas").setSrc('/home/examples/canvas.imba')).end(),
						
						(t3 = t2.$$g=t2.$$g || tag$.$footer()).setContent(
							(t4 = t3.$$a=t3.$$a || tag$.$nav()).setContent([
								(t4.$$a = t4.$$a || tag$.$a().flag('button').flag('huge').flag('main').setHref('/install')).setText("Install").end(),
								(t4.$$b = t4.$$b || tag$.$a().flag('button').flag('huge').setHref('/guides')).setText("Learn more").end()
							],2).end()
						,2).end()
					],2).end()
				],2).end();
			};
			
			// def awaken
			// 	# awaken the snippets
			// 	schedule
			// 	for el in %(snippet)
			// 		el
			// 	self
			
			// def tick
			// 	log 'home.tick'
			// 	self
			
			// def assemble
			// 	return self if Imba.isClient
			// 	super
			// 	# flag('scoped',router.scoped(route,self))
			// 	# flag('selected',router.match(route,self))
		});
	
	})()

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		__webpack_require__(65);
		
		var Doc = __webpack_require__(57).Doc;
		
		tag$.defineTag('blog', 'page', function(tag){
			
			tag.prototype.doc = function (){
				if (this.router().scoped('/blog')) {
					return Doc.get(this.router().path());
				};
			};
			
			tag.prototype.nav = function (){
				var t0, t1;
				return (t0 = this._nav=this._nav || tag$.$navmenu().setRef('nav',this)).setContent(
					(t1 = t0.$$a=t0.$$a || tag$.$div().flag('content')).setContent(
						(t1.$$a = t1.$$a || tag$.$h1()).setText("No items?").end()
					,2).end()
				,2).end();
			};
			tag.prototype.body = function (){
				var t0;
				return (t0 = this._body=this._body || tag$.$div().setRef('body',this).flag('light')).setContent([
					(this.doc()) ? (Imba.static([
						(t0.$$a = t0.$$a || tag$.$h1()).setText("Blogpost?").end(),
						(t0.$$b = t0.$$b || tag$.$blogpost()).setObject(this.doc()).end()
					],2)) : void(0),
					(t0.$$c = t0.$$c || tag$.$h4()).setText("No posts").end()
				],1).end();
			};
		});
		
		return tag$.defineTag('blogpost', function(tag){
			
			tag.prototype.render = function (){
				var object_;
				if (!(object_ = this.object()) && object_.ready  &&  object_.ready()) { return this };
				return this.flag('md').setBody((this.object().body())).synced();
			};
			
			tag.prototype.setBody = function (body){
				if (body != this._body) {
					this._body = body;
					this.dom().innerHTML = body;
					if (Imba.isClient()) this.reawaken();
				};
				return this;
			};
			
			tag.prototype.reawaken = function (){
				for (var i = 0, ary = iter$(q$('._snippet',this)), len = ary.length; i < len; i++) {
					ary[i];
				};
				return this;
			};
		});
	
	})()

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		__webpack_require__(65);
		
		function Guide(path){
			this._path = path;
			this._ready = false;
			this.fetch();
			this;
		};
		
		var cache = {};
		
		Guide.get = function (path){
			var $1;
			var cache = APP.cache();
			return cache[($1 = 'guide-' + path)] || (cache[$1] = new this(path));
		};
		
		
		
		Guide.prototype.path = function(v){ return this._path; }
		Guide.prototype.setPath = function(v){ this._path = v; return this; };
		
		Guide.prototype.ready = function (){
			return this._ready;
		};
		
		Guide.prototype.fetch = function (){
			var self = this;
			if (false) {
				// console.log 'fetch Guide on server',path
				return APP.fetchDocument(self._path + '.md',function(res) {
					// console.log 'fetch Guide on server done',path
					return self.load(res);
				});
			};
			
			return self._promise || (self._promise = APP.fetchDocument(self._path + '.md',function(res) {
				return self.load(res);
			}));
		};
		
		Guide.prototype.load = function (doc){
			this._object = doc;
			this._meta = doc.meta || {};
			this._ready = true;
			Imba.emit(this,'ready');
			return this;
		};
		
		Guide.prototype.title = function (){
			return this._object.title || 'path';
		};
		
		Guide.prototype.toc = function (){
			return this._object && this._object.toc[0];
		};
		
		Guide.prototype.body = function (){
			return this._object && this._object.body;
		};
		
		
		tag$.defineTag('guide-toc', 'toc', function(tag){
			
			
			
			tag.prototype.toc = function(v){ return this._toc; }
			tag.prototype.setToc = function(v){ this._toc = v; return this; };
			
			
			tag.prototype.level = function(v){ return this.getAttribute('level'); }
			tag.prototype.setLevel = function(v){ this.setAttribute('level',v); return this; };
			
			
			tag.prototype.route = function(v){ return this.getAttribute('route'); }
			tag.prototype.setRoute = function(v){ this.setAttribute('route',v); return this; };
			
			tag.prototype.toc = function (){
				return this._toc || this.object().toc();
			};
			
			tag.prototype.route = function (){
				return ("" + (this.object().path()) + "#" + (this.toc().slug));
			};
			
			tag.prototype.toggle = function (){
				return this.toggleFlag('collapsed');
			};
			
			tag.prototype.render = function (){
				var t0, t1, self = this, t2, t3;
				if (!this.object().ready()) { return this };
				
				this.reroute();
				
				return this.flag('entry').setLevel((this.toc().level)).setChildren([
					this.toc().children.length && this.toc().level < 2 ? (Imba.static([
						(t0 = this.$a=this.$a || tag$.$div().flag('header').setHandler('tap','toggle',this)).setContent(
							(t1 = t0.$$a=t0.$$a || tag$.$a()).setHref(this.route()).setContent(this.toc().title,3).end()
						,2).end(),
						(t2 = self.$b=self.$b || tag$.$div().flag('content')).setContent(
							(function(t2) {
								for (var i = 0, ary = iter$(self.toc().children), len = ary.length, res = []; i < len; i++) {
									res.push((t2['$$a' + i] = t2['$$a' + i] || tag$.$guide_toc()).setToc(ary[i]).setObject(self.object()).end());
								};
								return res;
							})(t2)
						,3).end()
					],2)) : (
						(t3 = self.$c=self.$c || tag$.$a()).setHref(self.route()).setContent(self.toc().title,3).end()
					)
				],1).synced();
			};
		});
		
		
		tag$.defineTag('guide', function(tag){
			
			tag.prototype.render = function (){
				var object_;
				if (!(object_ = this.object()) && object_.ready  &&  object_.ready()) { return this };
				return this.flag('md').setBody((this.object().body())).synced();
			};
			
			tag.prototype.setBody = function (body){
				if (body != this._body) {
					this._body = body;
					this.dom().innerHTML = body;
					if (Imba.isClient()) this.reawaken();
				};
				return this;
			};
			
			tag.prototype.reawaken = function (){
				for (var i = 0, ary = iter$(q$('._snippet',this)), len = ary.length; i < len; i++) {
					ary[i];
				};
				return this;
			};
		});
		
		
		return tag$.defineTag('guides', 'page', function(tag){
			
			tag.prototype.nav = function (){
				var t0, t1;
				return (t0 = this._nav=this._nav || tag$.$navmenu().setRef('nav',this)).setContent(
					(t1 = t0.$$a=t0.$$a || tag$.$div().flag('content')).setContent([
						(t1.$$a = t1.$$a || tag$.$guide_toc()).setObject(Guide.get('/guides')).end(),
						(t1.$$b = t1.$$b || tag$.$guide_toc()).setObject(Guide.get('/guides/language')).end()
					// <guide-toc[Guide.get('/guides/tips')]>
					],2).end()
				,2).end();
			};
			
			tag.prototype.body = function (){
				var t0;
				return (t0 = this._body=this._body || tag$.$div().setRef('body',this).flag('light')).setContent([
					(this.guide()) ? ((t0.$$a = t0.$$a || tag$.$guide()).setObject(this.guide()).end()) : void(0)
				// <guide@doc.md.l src="{router.path}">
				],1).end();
			};
			
			tag.prototype.onroute = function (e){
				// log 'onroute guides',router.hash
				var self = this;
				e.halt();
				
				var scroll = function() {
					var el;
					if (el = self.first('#' + self.router().hash())) {
						el.dom().scrollIntoView(true);
						self._scrollFreeze = window.scrollY;
						return el;
					};
					return false;
				};
				
				if (self.router().hash()) {
					self.render();
					scroll() || setTimeout(scroll,20,function() {  });
				};
				
				
				return self;
			};
			
			tag.prototype.guide = function (){
				if (this.router().scoped('/guides')) {
					return Guide.get(this.router().path());
				};
			};
			
			
			tag.prototype.awaken = function (){
				var self = this;
				if (Imba.isClient()) {
					// @doc = %%(guide)
					self.schedule({fps: 1});
					window.addEventListener('scroll',function() {
						// console.log 'check scrolling'
						return self.scrolled();
					});
				};
				return self;
			};
			
			tag.prototype.scrolled = function (){
				if (!this.hasFlag('scoped')) { return };
				
				var items = q$('[id]',this);
				var match;
				
				// should probably cache these periodically
				var scrollTop = window.scrollY;
				var wh = window.innerHeight;
				var dh = document.body.scrollHeight;
				
				if (this._scrollFreeze >= 0) {
					var diff = Math.abs(scrollTop - this._scrollFreeze);
					if (diff < 50) { return this };
					this._scrollFreeze = -1;
				};
				
				var scrollBottom = dh - (scrollTop + wh);
				
				// console.log scrollTop,wh,dh,scrollBottom
				
				if (scrollBottom == 0) {
					match = items.last();
				} else {
					for (var i = 0, ary = iter$(items), len = ary.length, item; i < len; i++) {
						item = ary[i];
						var t = (item.dom().offsetTop + 30 + 60); // hack
						var dist = scrollTop - t;
						// console.log "{item.id} {t} {dist}"
						
						if (dist < 0) {
							match = item;break;
						};
					};
				};
				
				if (match) {
					// console.log "match is {match.id}"
					if (this._hash != match.id()) {
						this._hash = match.id();
						this.router().go('#' + this._hash,{},true);
						this.render();
					};
				};
				return this;
			};
			
			tag.prototype.tick = function (){
				this.render();
				return this;
			};
		});
	
	})()

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		function pathToAnchor(path){
			return 'api-' + path.replace(/\./g,'_').replace(/\#/g,'__');
		};
		
		tag$.defineTag('api-desc', function(tag){
			
			tag.prototype.setHtml = function (html){
				if (html != this._html) {
					this.dom().innerHTML = this._html = html;
				};
				return this;
			};
		});
		
		tag$.defineTag('api-ref', function(tag){
			
			tag.prototype.render = function (){
				return this.synced();
			};
		});
		
		tag$.defineTag('api-item');
		
		tag$.defineTag('api-path', 'span', function(tag){
			
			tag.prototype.build = function (){
				var object_;
				var items = [];
				if ((typeof (object_ = this.object())=='string'||object_ instanceof String)) {
					this.setHtml(this.object().replace(/\b([\w]+|\.|\#)\b/g,function(m,i) {
						if (i == '.' || i == '#') {
							return ("<i>" + i + "</i>");
						} else if (i[0] == i[0].toUpperCase()) {
							return ("<b class='const'>" + i + "</b>");
						} else {
							return ("<b class='id'>" + i + "</b>");
						};
					}));
				};
				return this;
			};
		});
		
		
		tag$.defineTag('api-link', function(tag){
			
			
			tag.prototype.name = function(v){ return this.getAttribute('name'); }
			tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
			
			tag.prototype.render = function (){
				var t0;
				return this.setChildren([
					(this.$a = this.$a || tag$.$api_path().flag('value')).setObject(this.object().value).end(),
					(t0 = this.$b=this.$b || tag$.$span().flag('desc')).setContent(this.object().desc,3).end()
				],2).synced();
			};
		});
		
		tag$.defineTag('api-return', 'api-link');
		
		tag$.defineTag('api-class', 'api-item', function(tag){
			
			
			tag.prototype.__object = {watch: 'parse',name: 'object'};
			tag.prototype.object = function(v){ return this._object; }
			tag.prototype.setObject = function(v){
				var a = this.object();
				if(v != a) { this._object = v; }
				if(v != a) { this.parse && this.parse(v,a,this.__object) }
				return this;
			};
			
			tag.prototype.parse = function (){
				for (var i = 0, ary = iter$(this.object()['.']), len = ary.length, m, res = []; i < len; i++) {
					m = ary[i];
					if (!m.desc) { continue; };
					res.push(m);
				};
				this._statics = res;
				for (var i = 0, ary = iter$(this.object()['#']), len = ary.length, m1, res = []; i < len; i++) {
					m1 = ary[i];
					if (!m1.desc) { continue; };
					res.push(m1);
				};
				this._methods = res;
				this._properties = [];
				return this;
			};
			
			tag.prototype.render = function (){
				var t0, t1, t2, t3, t4, self = this, t5, t6, t7;
				return this.setChildren([
					(this.$a = this.$a || tag$.$span().flag('toc-anchor')).setId(pathToAnchor(this.object().namepath)).end(),
					(t0 = this.$b=this.$b || tag$.$div().flag('header')).setContent((t1 = t0.$$a=t0.$$a || tag$.$div().flag('title')).setContent((t1.$$a = t1.$$a || tag$.$api_path()).setObject(this.object().namepath).end(),2).end(),2).end(),
					(this.$c = this.$c || tag$.$api_desc()).setHtml(this.object().html).end(),
					(this.object().ctor) ? (
						(t2 = this.$d=this.$d || tag$.$div().flag('content').flag('ctor')).setContent(
							(t2.$$a = t2.$$a || tag$.$api_method()).setPath((this.object().namepath + '.new')).setObject(this.object().ctor).end()
						,2).end()
					) : void(0),
					
					(t3 = self.$e=self.$e || tag$.$div().flag('content')).setContent([
						(this._statics.length > 0) ? (
							(t4 = t3.$$a=t3.$$a || tag$.$div().flag('section')).setContent([
								(t4.$$a = t4.$$a || tag$.$h2().flag('header')).setText('Static Methods').end(),
								(t5 = t4.$$b=t4.$$b || tag$.$div().flag('content').flag('list')).setContent((function(t5) {
									for (var i = 0, ary = iter$(self._statics), len = ary.length, res = []; i < len; i++) {
										res.push((t5['$$a' + i] = t5['$$a' + i] || tag$.$api_method().flag('doc')).setIname(self.object().namepath).setObject(ary[i]).end());
									};
									return res;
								})(t5),3).end()
							],2).end()
						) : void(0),
						
						(self._methods.length > 0) ? (
							(t6 = t3.$$b=t3.$$b || tag$.$div().flag('section')).setContent([
								(t6.$$a = t6.$$a || tag$.$h2().flag('header')).setText('Instance Methods').end(),
								(t7 = t6.$$b=t6.$$b || tag$.$div().flag('content').flag('list')).setContent((function(t7) {
									for (var i = 0, ary = iter$(self._methods), len = ary.length, res = []; i < len; i++) {
										res.push((t7['$$a' + i] = t7['$$a' + i] || tag$.$api_method().flag('doc')).setIname(self.object().iname).setObject(ary[i]).end());
									};
									return res;
								})(t7),3).end()
							],2).end()
						) : void(0)
					],1).end()
				],1).synced();
			};
		});
		
		tag$.defineTag('api-value', function(tag){
			
			tag.prototype.render = function (){
				var object_, $1;
				if (this.object().type) {
					this.flag(this.object().type).setChildren(
						this.object().value
					,3).synced();
				} else if ((typeof (object_ = this.object())=='string'||object_ instanceof String)) {
					this.flag('str').setText(this.object()).synced();
				} else if ((typeof ($1 = this.object())=='number'||$1 instanceof Number)) {
					this.flag('num').setText(this.object()).synced();
				};
				return this;
			};
		});
		
		
		tag$.defineTag('api-param', function(tag){
			
			tag.prototype.type = function (){
				return this.object().type;
			};
			
			tag.prototype.render = function (){
				var self = this, t0, t1;
				return this.flag(self.type()).setChildren([
					self.type() == 'NamedParams' ? (
						(function(self) {
							for (var i = 0, ary = iter$(self.object().nodes), len = ary.length, res = []; i < len; i++) {
								res.push((self['$a' + i] = self['$a' + i] || tag$.$api_param()).setObject(ary[i]).end());
							};
							return res;
						})(self)
					) : (Imba.static([
						(t0 = self.$b=self.$b || tag$.$div().flag('name')).setContent(self.object().name,3).end(),
						(self.object().defaults) ? (Imba.static([
							(t1 = self.$c=self.$c || tag$.$i()).setContent([self.type() == 'NamedParam' ? (': ') : (' = ')],1).end(),
							(self.$d = self.$d || tag$.$api_value()).setObject(self.object().defaults).end()
						],2)) : void(0)
					],3))
				],1).synced();
			};
		});
		
		tag$.defineTag('api-method', 'api-item', function(tag){
			
			
			
			tag.prototype.iname = function(v){ return this._iname; }
			tag.prototype.setIname = function(v){ this._iname = v; return this; };
			
			
			tag.prototype.path = function(v){ return this._path; }
			tag.prototype.setPath = function(v){ this._path = v; return this; };
			
			tag.prototype.tags = function (){
				var t0;
				return (t0 = this._tags=this._tags || tag$.$div().setRef('tags',this)).setContent([
					(this.object().deprecated) ? (
						(t0.$$a = t0.$$a || tag$.$div().flag('deprecated').flag('red')).setText('Method is deprecated').end()
					) : void(0),
					(this.object().return) ? ((t0.$$b = t0.$$b || tag$.$api_return().setName('returns')).setObject(this.object().return).end()) : void(0)
				],1).end();
			};
			
			tag.prototype.path = function (){
				return this._path || (this.iname() + '.' + this.object().name);
			};
			
			tag.prototype.slug = function (){
				return pathToAnchor(this.object().namepath);
			};
			
			tag.prototype.render = function (){
				var t0, self = this, t1;
				return this.flag('deprecated',this.object().deprecated).setChildren([
					(this.$a = this.$a || tag$.$span().flag('toc-anchor')).setId(this.slug()).end(),
					(t0 = self.$b=self.$b || tag$.$div().flag('header')).setContent([
						(t0.$$a = t0.$$a || tag$.$api_path()).setObject(this.path()).end(),
						(t1 = t0.$$b=t0.$$b || tag$.$div().flag('params')).setContent((function(t1) {
							for (var i = 0, ary = iter$(self.object().params), len = ary.length, res = []; i < len; i++) {
								res.push((t1['$$a' + i] = t1['$$a' + i] || tag$.$api_param()).setObject(ary[i]).end());
							};
							return res;
						})(t1),3).end(),
						(t0.$$c = t0.$$c || tag$.$div().flag('grow')).end()
					],2).end(),
					(self.$c = self.$c || tag$.$api_desc().flag('md')).setHtml(self.object().html).end(),
					self.tags()
				],1).synced();
			};
		});
		
		tag$.defineTag('doc-link', 'a', function(tag){
			
			tag.prototype.render = function (){
				this.setHref(("/docs#" + pathToAnchor(this.object().namepath))).setChildren((this.$a = this.$a || tag$.$api_path()).setObject(this.object().namepath).end(),2).synced();
				return tag.__super__.render.apply(this,arguments);
			};
			
			tag.prototype.ontap = function (){
				tag.__super__.ontap.apply(this,arguments);
				return this.up(q$('._docs',this)).refocus();
			};
		});
		
		tag$.defineTag('doc-group', 'toc', function(tag){
			
			tag.prototype.ontap = function (){
				return this.toggleFlag('collapsed');
			};
		});
		
		
		return tag$.defineTag('docs', 'page', function(tag){
			
			
			tag.prototype.__version = {'default': '0.14.1',name: 'version'};
			tag.prototype.version = function(v){ return this._version; }
			tag.prototype.setVersion = function(v){ this._version = v; return this; }
			tag.prototype._version = '0.14.1';
			
			
			tag.prototype.roots = function(v){ return this._roots; }
			tag.prototype.setRoots = function(v){ this._roots = v; return this; };
			
			tag.prototype.src = function (){
				return ("/api/" + this.version() + ".json");
			};
			
			tag.prototype.docs = function (){
				return this._docs;
			};
			
			tag.prototype.awaken = function (){
				this.load();
				this.schedule();
				return this;
			};
			
			tag.prototype.build = function (){
				this.load();
				return tag.__super__.build.apply(this,arguments);
			};
			
			tag.prototype.load = function (){
				var self = this;
				if (false) {
					// return self
					APP.fetchDocument(self.src(),function(res) {
						self._docs = JSON.parse(JSON.stringify(res));
						return self.generate();
					});
					return self;
				};
				
				return self._request || (self._request = APP.fetchDocument(self.src(),function(res) {
					DOCS = self._docs = res;
					DOCMAP = self._docs.entities;
					self.generate();
					return self.loaded();
				}));
			};
			
			tag.prototype.loaded = function (){
				var el;
				this.render();
				// really?
				if (document.location.hash) {
					if (el = this.first(document.location.hash)) {
						// console.log 'should scroll here?!?!?!',el
						el.dom().scrollIntoView();
					};
				};
				return this;
			};
			
			tag.prototype.refocus = function (){
				var el;
				if (el = this.first(document.location.hash)) {
					el.dom().scrollIntoView();
				};
				return this;
			};
			
			tag.prototype.lookup = function (path){
				return this.docs().entities[path];
			};
			
			tag.prototype.generate = function (){
				this._roots = [];
				var ents = this._docs.entities;
				
				for (var o = this.docs().entities, item, i = 0, keys = Object.keys(o), l = keys.length; i < l; i++){
					item = o[keys[i]];if (item.type == 'class' || keys[i] == 'Imba') {
						item['.'] = (item['.'] || []).sort().map(function(path) { return ents[path]; }).filter(function(v) { return v.type == 'method' && v.desc; });
						item['#'] = (item['#'] || []).sort().map(function(path) { return ents[path]; }).filter(function(v) { return v.type == 'method' && v.desc; });
						
						if (item.desc) { this._roots.push(item) };
					};
				};
				return this;
			};
			
			tag.prototype.render = function (){
				if (!(this.docs())) { return this };
				return tag.__super__.render.apply(this,arguments);
			};
			
			tag.prototype.body = function (){
				var self = this, t0;
				return (t0 = self._body=self._body || tag$.$div().setRef('body',this).flag('light')).setContent(
					(function(t0) {
						for (var i = 0, ary = iter$(self.roots()), len = ary.length, res = []; i < len; i++) {
							res.push((t0['$$a' + i] = t0['$$a' + i] || tag$.$api_class().flag('doc').flag('l')).setObject(ary[i]).end());
						};
						return res;
					})(t0)
				,3).end();
			};
			tag.prototype.nav = function (){
				var t0, self = this, t1;
				return (t0 = self._nav=self._nav || tag$.$navmenu().setRef('nav',this)).setContent(
					(t1 = t0.$$a=t0.$$a || tag$.$div().flag('content')).setContent(
						(function(t1) {
							var t2, t3, t4, t5, t6;
							for (var i = 0, ary = iter$(self.roots()), len = ary.length, root, res = []; i < len; i++) {
								root = ary[i];
								res.push((t2 = t1['$$a' + i]=t1['$$a' + i] || tag$.$doc_group().flag('class').flag('section').flag('compact')).setContent([
									(t3 = t2.$$a=t2.$$a || tag$.$div().flag('header')).setContent((t3.$$a = t3.$$a || tag$.$doc_link().flag('class')).setObject(root).end(),2).end(),
									(t4 = t2.$$b=t2.$$b || tag$.$div().flag('content')).setContent([
										(t5 = t4.$$a=t4.$$a || tag$.$div().flag('static')).setContent(
											(function(t5) {
												var t6;
												for (var j = 0, items = iter$(root['.']), len_ = items.length, meth, res1 = []; j < len_; j++) {
													meth = items[j];
													if (!meth.desc) { continue; };
													res1.push((t6 = t5['$$a' + j]=t5['$$a' + j] || tag$.$div().flag('entry')).setContent((t6.$$a = t6.$$a || tag$.$doc_link()).setObject(meth).end(),2).end());
												};
												return res1;
											})(t5)
										,3).end(),
										(t6 = t4.$$b=t4.$$b || tag$.$div().flag('instance')).setContent(
											(function(t6) {
												var t7;
												for (var j = 0, items = iter$(root['#']), len_ = items.length, meth, res1 = []; j < len_; j++) {
													meth = items[j];
													if (!meth.desc) { continue; };
													res1.push((t7 = t6['$$a' + j]=t6['$$a' + j] || tag$.$div().flag('entry')).setContent((t7.$$a = t7.$$a || tag$.$doc_link()).setObject(meth).end(),2).end());
												};
												return res1;
											})(t6)
										,3).end()
									],2).end()
								],2).end());
							};
							return res;
						})(t1)
					,3).end()
				,2).end();
			};
		});
		
		
	
	})()

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	(function(){
		function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
		// externs;
		
		// var hljs = require 'highlight.js'
		
		tag$.defineTag('tool', 'button', function(tag){
			
			
			tag.prototype.action = function(v){ return this._action; }
			tag.prototype.setAction = function(v){ this._action = v; return this; };
			
			tag.prototype.render = function (){
				return this.flag('sym').synced();
			};
			
			tag.prototype.onclick = function (e){
				this.log('button click',e);
				return e.halt();
			};
			
			tag.prototype.ontouchstart = function (e){
				this.log('touchstart');
				true;
				return e.event().preventDefault();
			};
		});
		
		tag$.defineTag('snippet-hint', function(tag){
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag.prototype.render = function (){
				return this.setText("I am a hint!!").synced();
			};
		});
		
		tag$.defineTag('overlays', function(tag){
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag.prototype.render = function (){
				var root;
				if (root = this.view()._root) {
					var left = 0,top = 0,el = root.dom();
					
					while (el && !el.contains(this._dom)){
						left += el.offsetLeft;
						top += el.offsetTop - el.scrollTop;
						el = el.parentNode;
					};
					
					this._dom.style.left = left + 'px';
					this._dom.style.top = top + 'px';
				};
				
				return this;
			};
		});
		
		tag$.defineTag('hint-label', function(tag){
			
			tag.prototype.setLabel = function (text){
				if (text != this._label) {
					this._label = text;
					this.dom().innerHTML = text;
				};
				return this;
			};
		});
		
		tag$.defineTag('overlay-hint', function(tag){
			
			
			tag.prototype.type = function(v){ return this.getAttribute('type'); }
			tag.prototype.setType = function(v){ this.setAttribute('type',v); return this; };
			
			
			
			tag.prototype.view = function(v){ return this._view; }
			tag.prototype.setView = function(v){ this._view = v; return this; };
			
			tag.prototype.__row = {watch: 'rowDidSet',name: 'row'};
			tag.prototype.row = function(v){ return this._row; }
			tag.prototype.setRow = function(v){
				var a = this.row();
				if(v != a) { this._row = v; }
				if(v != a) { this.rowDidSet && this.rowDidSet(v,a,this.__row) }
				return this;
			};
			
			tag.prototype.__col = {watch: 'colDidSet',name: 'col'};
			tag.prototype.col = function(v){ return this._col; }
			tag.prototype.setCol = function(v){
				var a = this.col();
				if(v != a) { this._col = v; }
				if(v != a) { this.colDidSet && this.colDidSet(v,a,this.__col) }
				return this;
			};
			
			tag.prototype.__len = {watch: 'lenDidSet',name: 'len'};
			tag.prototype.len = function(v){ return this._len; }
			tag.prototype.setLen = function(v){
				var a = this.len();
				if(v != a) { this._len = v; }
				if(v != a) { this.lenDidSet && this.lenDidSet(v,a,this.__len) }
				return this;
			};
			
			tag.prototype.rowDidSet = function (new$,old){
				var val = ("" + (this.object().row() * this.view().lineHeight()) + "px");
				return this._dom.style.top = val;
			};
			
			tag.prototype.colDidSet = function (new$,old){
				var val = ("" + (this.object().col() * this.view().charWidth()) + "px");
				return this._dom.style.left = val;
			};
			
			tag.prototype.lenDidSet = function (new$,old){
				var width = ("" + (new$ * this.view().charWidth()) + "px");
				return this._dom.style.width = width;
			};
			
			tag.prototype.render = function (){
				// console.log 'hint at',object.row
				var reg = this.object().region();
				
				if (reg) {
					this.setRow(this.object().row());
					this.setCol(this.object().col());
					this.setLen(reg.size());
				};
				
				return this.flag('warn').flag('global',(!reg)).setType((this.object().type())).setChildren(
					(this.$a = this.$a || tag$.$hint_label().flag('label')).setLabel(this.object().label()).end()
				,2).synced();
			};
		});
		
		tag$.defineTag('jsview', function(tag){
			
			tag.prototype.render = function (){
				return this.setChildren((this._code = this._code || tag$.$code().setRef('code',this)).end(),2).synced();
			};
			
			tag.prototype.load = function (code,cb){
				// should compile bare
				var self = this;
				code = code.replace(/\/\/\# sourceMapping(.*)$/,'');
				code = code.replace(/^\(function\(\)\{\n/,'');
				code = code.replace(/\n?\}\)\(\)\n?$/,'');
				// code = code.replace(/^\t/mg,'')
				this._code.textContent = code;
				
				this.flag('huge',code.length > 1000);
				
				setTimeout(function() {
					hljs.configure({classPrefix: ''});
					var hl = hljs.highlight('javascript',code);
					self._code.setHtml(hl.value);
					return cb && cb(self);
				},0);
				
				return self;
			};
		});
		
		tag$.defineTag('console', function(tag){
			
			
			tag.prototype.editor = function(v){ return this._editor; }
			tag.prototype.setEditor = function(v){ this._editor = v; return this; };
			
			tag.prototype.reset = function (){
				this.empty();
				return this;
			};
			
			tag.prototype.log = function (val){
				console.log.apply(console,arguments);
				
				if (this.editor()) {
					this.editor().flag('console');
				};
				// console.log 'logging val',val
				
				if (val == this) {
					return;
				};
				
				if (val && val.dom) {
					val = val.dom().outerHTML;
				} else if (val instanceof Object) {
					val = JSON.stringify(val);
				};
				
				if (val != undefined) {
					this.append(tag$.$div().flag('json').setContent(val,0).end());
				};
				
				return;
			};
		});
		
		
		// this is basically like an editor
		tag$.defineTag('snippet', function(tag){
			
			var counter = 0;
			
			
			
			tag.prototype.imba = function(v){ return this._imba; }
			tag.prototype.setImba = function(v){ this._imba = v; return this; };
			
			
			tag.prototype.config = function(v){ return this._config; }
			tag.prototype.setConfig = function(v){ this._config = v; return this; };
			
			tag.prototype.__src = {watch: 'reload',name: 'src'};
			tag.prototype.src = function(v){ return this._src; }
			tag.prototype.setSrc = function(v){
				var a = this.src();
				if(v != a) { this._src = v; }
				if(v != a) { this.reload && this.reload(v,a,this.__src) }
				return this;
			};
			
			
			
			tag.prototype.heading = function(v){ return this.getAttribute('heading'); }
			tag.prototype.setHeading = function(v){ this.setAttribute('heading',v); return this; };
			
			
			tag.prototype.layout = function(v){ return this.getAttribute('layout'); }
			tag.prototype.setLayout = function(v){ this.setAttribute('layout',v); return this; };
			
			
			tag.prototype.tab = function(v){ return this.getAttribute('tab'); }
			tag.prototype.setTab = function(v){ this.setAttribute('tab',v); return this; };
			
			
			tag.prototype.__active = {watch: 'activeDidSet',name: 'active'};
			tag.prototype.active = function(v){ return this._active; }
			tag.prototype.setActive = function(v){
				var a = this.active();
				if(v != a) { this._active = v; }
				if(v != a) { this.activeDidSet && this.activeDidSet(v,a,this.__active) }
				return this;
			};
			
			tag.prototype.id = function (){
				var dom_;
				return (dom_ = this.dom()).id || (dom_.id = ("snippet" + (counter++)));
			};
			
			tag.prototype.activeDidSet = function (bool){
				return bool ? (this.schedule({fps: 60})) : (this.unschedule());
			};
			
			tag.prototype.input = function (){
				return (this._input = this._input || tag$.$imcaptor().setRef('input',this)).end();
			};
			
			tag.prototype.view = function (){
				return this._view || (this._view = (this._view = this._view || tag$.$imview().setRef('view',this)).setInput(this.input()).end());
			};
			
			tag.prototype.build = function (){
				
				var self = this, t0, t1, t2, t3, t4, t5;
				if (false) {
					if (self.src() && self.src().match(/\.imba$/)) {
						APP.fetchDocument(self.src(),function(res) {
							var v_;
							return (self.setImba(v_ = res.html),v_);
						});
					};
					// prerender shell
					self.setChildren([
						(t0 = self._main=self._main || tag$.$section().setRef('main',self)).setContent([
							(t1 = self._header=self._header || tag$.$header().setRef('header',self)).setContent([
								(t2 = t1.$$a=t1.$$a || tag$.$div().flag('title').flag('path')).setContent(self.heading(),3).end(),
								(t3 = t1.$$b=t1.$$b || tag$.$div().flag('tools')).setContent([
									(t3.$$a = t3.$$a || tag$.$tool().flag('reset').setTitle('reset').setHandler('tap','reset',self)).setText('reset').end(),
									(t3.$$b = t3.$$b || tag$.$tool().flag('js').setTitle('show js').setHandler('tap','toggleJS',self)).setText('show js').end(),
									(t3.$$c = t3.$$c || tag$.$tool().flag('run').setTitle('run').setHandler('tap','run',self)).setText('run').end()
								],2).end()
							],2).end(),
							(t4 = self._view=self._view || tag$.$div().setRef('view',self)).setContent((t5 = t4.$$a=t4.$$a || tag$.$code().flag('imbacode')).dataset('src',(self.src())).setContent(self.imba(),3).end(),2).end()
						],2).end(),
						(self._inspector = self._inspector || tag$.$div().setRef('inspector',self)).end()
					],2).synced();
					return self;
				};
				
				tag.__super__.build.apply(self,arguments);
				if (self.src()) { return self.reload() };
			};
			
			tag.prototype.setConfig = function (cfg){
				var v_;
				if (cfg != this._options) {
					this._options = cfg;
					if (cfg.title) { (this.setHeading(v_ = cfg.title),v_) };
				};
				return this;
			};
			
			tag.prototype.copts = function (){
				return this._copts || (this._copts = {
					bare: false,
					standalone: false,
					sourceMapInline: true,
					filename: ("" + this.id() + ".imba"),
					targetPath: ("" + this.id() + ".js"),
					sourcePath: ("" + this.id() + ".imba")
				});
			};
			
			tag.prototype.option = function (key){
				return this._options ? (this._options[key]) : (null);
			};
			
			tag.prototype.configure = function (o){
				this._options = o;
				return this.render();
			};
			
			tag.prototype.awaken = function (){
				var config = {};
				try {
					var code = q$$('.imbacode',this).dom().innerHTML;
				} catch (e) { };
				
				if (code) {
					config.html = code;
					this.view().load(null,{html: code});
					this.configure(config);
				};
				
				return this;
			};
			
			tag.prototype.load = function (code,o){
				if(o === undefined) o = {};
				if (code || o.html) { this.view().load(code,o) };
				return this;
			};
			
			tag.prototype.code = function (){
				return this.view().code();
			};
			
			tag.prototype.compile = function (code,o,blk){
				// cache latest compilation - return?
				if(blk==undefined && typeof o == 'function') blk = o,o = this.copts();
				if(o==undefined) o = this.copts();
				return Scrimbla.worker().compile(code,o,blk);
			};
			
			tag.prototype.overlays = function (){
				for (var i = 0, ary = iter$(this.view().hints()), len = ary.length, hint, res = []; i < len; i++) {
					hint = ary[i];
					if (!hint.active()) { continue; };
					res.push((this['_' + 'hint' + i] = this['_' + 'hint' + i] || tag$.$overlay_hint()).setView(this.view()).setObject(hint).end());
				};
				return res;
			};
			
			tag.prototype.toggleJS = function (){
				if (this.tab() != 'js') {
					this.showjs();
				} else {
					this.setTab('imba');
				};
				return this;
			};
			
			tag.prototype.oninputfocus = function (e){
				VIEW = this; // hack
				this.flag('focus');
				return (this.setActive(true),true);
			};
			
			tag.prototype.oninputblur = function (e){
				this.unflag('focus');
				var rel = e.event().relatedTarget;
				if (!(rel && this.dom().contains(rel))) {
					this.unflag('focus');
					this.setActive(false);
				};
				return this;
			};
			
			tag.prototype.render = function (){
				var t0, t1, t2, t3, t4, t5;
				if (false) { return this };
				
				return this.setChildren([
					this._input,
					(t0 = this._main=this._main || tag$.$section().setRef('main',this)).setContent([
						(t1 = this._header=this._header || tag$.$header().setRef('header',this)).setContent([
							(t2 = t1.$$a=t1.$$a || tag$.$div().flag('title').flag('path')).setContent(this.heading(),3).end(),
							(t3 = t1.$$b=t1.$$b || tag$.$div().flag('tools')).setContent([
								(t3.$$a = t3.$$a || tag$.$tool().flag('reset').setTitle('reset').setHandler('tap','reset',this)).setText('reset').end(),
								(t3.$$b = t3.$$b || tag$.$tool().flag('js').setTitle('show js').setHandler('tap','toggleJS',this)).setText('show js').end(),
								(t3.$$c = t3.$$c || tag$.$tool().flag('run').setTitle('run').setHandler('tap','run',this)).setText('run').end()
							],2).end()
						],2).end(),
						(t4 = this._overlays=this._overlays || tag$.$overlays().setRef('overlays',this)).setView(this.view()).setContent(this.overlays(),3).end(),
						(this._jsview = this._jsview || tag$.$jsview().setRef('jsview',this)).end(),
						this._view.end(),
						(this._console = this._console || tag$.$console().setRef('console',this).flag('dark')).setEditor(this).end()
					],1).end(),
					(t5 = this._inspector=this._inspector || tag$.$div().setRef('inspector',this)).setContent(this.playground(),3).end()
				],1).synced();
			};
			
			tag.prototype.sandbox = function (){
				return (this._sandbox = this._sandbox || tag$.$sandbox().setRef('sandbox',this).flag('playground')).setEditor(this).end();
			};
			
			tag.prototype.playground = function (){
				return this.sandbox();
			};
			
			tag.prototype.reload = function (){
				var self = this;
				if (!self._built) { return };
				
				if (DEPS[self.src()]) {
					var res = DEPS[self.src()];
					self.view().load(null,{html: res.html,filename: self.src()});
					if (self.autorun()) {
						setTimeout(function() { return self.run(); },50);
					};
					return self;
				};
				
				// get imba document?!?
				APP.fetchDocument(self.src(),function(res) {
					self.view().load(res.body,{filename: self.src()});
					if (self.autorun()) {
						return setTimeout(function() { return self.run(); },50);
					};
				});
				return self;
			};
			
			tag.prototype.onrun = function (){
				return this.run();
			};
			
			tag.prototype.autorun = function (){
				return false;
			};
			
			tag.prototype.oneditedasync = function (){
				this.flag('dirty');
				return this;
			};
			
			tag.prototype.onsave = function (){
				this.view().hints().clear();
				return this.run();
			};
			
			tag.prototype.reset = function (e){
				this._console.reset();
				if (this._options.html) {
					this.view().load(null,{html: this._options.html});
				};
				if (e) {
					e.cancel();
				};
				this.unflag('dirty');
				this.view().caret().normalize().dirty();
				return this;
			};
			
			tag.prototype.run = function (){
				var self = this;
				self.flag('running');
				self.compile(self.code(),self.copts(),function(res) {
					self.view().hints().rem(function(hint) { return hint.group() == 'runtime'; });
					
					if (res.data && res.data.code) {
						// @jsview.load(res:data:code) if res:data
						try {
							return self._sandbox.run(res.data);
						} catch (e) {
							return console.log('error');
						};
					};
				});
				return self;
			};
			
			tag.prototype.showjs = function (){
				var self = this;
				var o = {bare: true,standalone: false,filename: 'a.imba'};
				
				return self.compile(self.code(),o,function(res) {
					if (res.data && res.data.code) {
						return self._jsview.load(res.data.code,function() { var v_;
						return (self.setTab(v_ = 'js'),v_); });
					} else if (res.data && res.data.error) {
						return console.log('has error');
					};
				});
			};
			
			tag.prototype.runError = function (o){
				o.type = 'error';
				o.group = 'runtime';
				// console.log 'runError',o
				// only show error if we have a line and column
				return this.view().hints().add(o).activate();
			};
			
			tag.prototype.runLog = function (o){
				o.type = 'log';
				o.group = 'runtime';
				o.message || (o.message = JSON.stringify(o.params[0]));
				// console.log 'runLog',o
				
				if (o.nr != null && !o.loc) {
					var logs = this.view().find('.identifier.log,.identifier[name="log"]').toArray();
					var node = logs[o.nr];
					
					o.node = node;
					
					if (node) {
						var reg = node.region(); // node.next ? node.next.region : 
						console.log('found loc!!',node,reg);
						// let col = view.buffer.line(reg.row)[:length]
						o.loc = reg.endAtLine().collapse(); // {line: reg.row, column: col} #  reg.toJSON # {line: reg.row, column: 100}
						
						// o:loc = logs[o:nr].region.toJSON
					};
				};
				return this.view().hints().add(o).activate();
			};
			
			tag.prototype.runResult = function (o){
				// console.log 'runResult',o
				this.flag('repl',!!o);
				this._console.log(o);
				return this;
			};
		});
		
		tag$.defineTag('example', 'snippet', function(tag){
			
			tag.prototype.autorun = function (){
				return true;
			};
		});
		
		if (true) {
			Imba.Event.PROCESSING;
			
			
				
				var prev = Imba.Event.prototype.process;
				
				Imba.Event.prototype.process = function (){
					Imba.Event.PROCESSING = this;
					return prev.call(this);
				};
			
		};
		
		
		return tag$.defineTag('sandbox', function(tag){
			
			
			
			tag.prototype.editor = function(v){ return this._editor; }
			tag.prototype.setEditor = function(v){ this._editor = v; return this; };
			
			tag.prototype.render = function (){
				return this;
			};
			
			tag.prototype.console = function (){
				return this.editor()._console;
			};
			
			tag.prototype.onerror = function (msg,url,line,col,err){
				
				var stack_;
				if (url.match(/snippet(\d+)\.(imba|js)/)) {
					
					var id = url.split('.').shift();
					var snippet = tag$wrap(document.getElementById(id));
					
					if (snippet) {
						snippet.playground().onerror(msg,'',line,col,err);
						return;
					};
				} else if (url == 'undefined') {
					// safari?
					var ev = Imba.Event.PROCESSING;
					console.log('last event target',ev && ev.target());
					if (ev && ev.target()) {
						snippet = ev.target().closest(q$('._snippet',this));
						if (snippet) {
							return snippet.playground().onerror(msg,'',line,col,err);
						};
					};
				};
				
				console.log('caught the error here!!!',arguments,this);
				var locs = [];
				
				err && (stack_ = err.stack) && stack_.replace  &&  stack_.replace(/(\<anonymous\>|snippet\d+\.imba)\:(\d+):(\d+)/g,function(m,source,line,col) {
					locs.push({line: parseInt(line),column: parseInt(col)});
					return "";
				});
				
				locs.push({line: line,column: col});
				
				if (locs[0]) {
					var map = this.object().sourcemap;
					var consumer = Scrimbla.SourceMap.SourceMapConsumer(map);
					var loc = consumer.originalPositionFor(locs[0]);
					console.log('original location is',loc);
					this.editor().runError({message: msg,loc: loc});
				};
				
				return true;
			};
			
			tag.prototype.onlog = function (nr,pars){
				this.editor().runLog({nr: nr,params: pars});
				return this;
			};
			
			tag.prototype.empty = function (){
				for (var i = 0, ary = iter$(q$('.scheduled_',this)), len = ary.length; i < len; i++) {
					ary[i].unschedule();
				};
				return tag.__super__.empty.apply(this,arguments);
			};
			
			tag.prototype.present = function (res){
				var node;
				if (res && (res.prototype instanceof Imba.Tag)) {
					node = new res(res.createNode());
				} else if (res instanceof Imba.Tag) {
					node = res;
				};
				
				if (node) {
					this.empty().append(node);
					node.end();
				};
				
				return this.console().log(node || res);
			};
			
			tag.prototype.run = function (src){
				var self = this;
				var code = src.code;
				if (!code) { return self };
				
				self._object = src;
				
				try {
					window.onerror = function(msg,url,line,col,err) {
						console.log('caught error',msg,url,line,col,err,this);
						return self.onerror(msg,url,line,col,err);
					};
					
					code = code + '\n//# sourceURL=' + self.editor().id() + '.imba';
					var tag$ = Imba.TAGS.__clone();
					var console = self.console();
					var res = eval(code);
					self.present(res);
				} catch (e) {
					self.log('immediate error in eval-inline',e);
					self.onerror(e.message,'',e.lineNr || e.line || 0,e.column,e);
				};
				
				return self;
			};
		});
	
	})()

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,