{"id":123974969,"number":2,"title":"Creating reusable components","user":{"login":"somebee","id":8467,"gravatar_id":"","type":"User","site_admin":false},"labels":[{"id":304175541,"name":"article","color":"5319e7","default":false},{"id":304914159,"name":"tip","color":"eb6420","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-12-27T12:10:53Z","updated_at":"2016-01-07T19:45:29Z","closed_at":null,"body":"One valuable pattern in Imba is to create reusable and extendable tags for components and controls. Here we'll show you how to create a basic tag whose rendertree is composed of separate segments.\n\n``` imba\ntag panel\n\n    def header\n        <@header> title or \"Panel\"\n\n    def body\n        <@body> \"My content\"\n\n    def render\n        <self>\n            header\n            body\n\n# Now we can inherit from panel, and only override the body.\ntag settings < panel\n\n    def body # override body\n        <@body>\n            <div> \"Stuff in settings\"\n            <div> \"More settings\"\n```\n\n> Tip! When splitting the rendering into several methods outside of `<self>` all top-level tags **must** have an explicit name using the @-syntax like `<div@myname>`. Otherwise the div and its children will be recreated on every render. When tags have a name they will be created once (on the first call) and cached inline. This is one of the things that make Imba really fast.\n## Wrapping content\n\nAs you might know, tags are compiled to chains of setters. `<div.hello> \"world\"` will compile to something along the lines of `div().flag('hello').setContent(['world']).end()`. As you can see, the inner content of a tag is using a setter. We can override setContent to simply store a reference to the content, and then include the content somewhere inside the render-tree of the tag.\n\n> Overriding setContent is not something we'd recommend unless you really understand how rendering in Imba works. To learn more about rendering, see [guide](http://imba.io/guides/rendering).\n\n``` imba\ntag panel\n    def setContent value\n        @content = value\n        self\n\n    def render\n        <self>\n            <div.header> title\n            <div.body> @content\n            <div.footer> \"My footer\"\n\n# spawn a panel with some buttons\n<panel title=\"Settings\">\n    <button> \"Save\"\n    <button> \"Load\"\n```\n\nAll panels we spawn will now always wrap their content inside a div.body.\n","closed_by":null,"md":"<p>One valuable pattern in Imba is to create reusable and extendable tags for components and controls. Here we&#39;ll show you how to create a basic tag whose rendertree is composed of separate segments.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"></code></div></section><div class=\"inspector\"></div></div><blockquote>\n<p>Tip! When splitting the rendering into several methods outside of <code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok keyword self'>self</b><b class='_imclose tag_close'>&gt;</b></b></code> all top-level tags <strong>must</strong> have an explicit name using the @-syntax like <code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imtok ivar'>@myname</b><b class='_imclose tag_close'>&gt;</b></b></code>. Otherwise the div and its children will be recreated on every render. When tags have a name they will be created once (on the first call) and cached inline. This is one of the things that make Imba really fast.</p>\n<div id=\"toc-wrapping-content\" class=\"toc-anchor\"></div><h2><span>Wrapping content</span></h2></blockquote>\n<p>As you might know, tags are compiled to chains of setters. <code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>hello</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imspace'> </b><b class='_imstr string'>\"world\"</b></code> will compile to something along the lines of <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>div</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>flag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'hello'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>setContent</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imstr string'>'world'</b><b class='_imclose sb sbr'>]</b></b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>end</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code>. As you can see, the inner content of a tag is using a setter. We can override setContent to simply store a reference to the content, and then include the content somewhere inside the render-tree of the tag.</p>\n<blockquote>\n<p>Overriding setContent is not something we&#39;d recommend unless you really understand how rendering in Imba works. To learn more about rendering, see <a href=\"http://imba.io/guides/rendering\">guide</a>.</p>\n</blockquote>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"></code></div></section><div class=\"inspector\"></div></div><p>All panels we spawn will now always wrap their content inside a div.body.</p>\n"}