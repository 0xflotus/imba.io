{"id":123974969,"number":2,"title":"Creating reusable components","user":{"login":"somebee","id":8467,"gravatar_id":"","type":"User","site_admin":false},"labels":[{"name":"article","color":"5319e7"},{"name":"tip","color":"eb6420"}],"state":"open","locked":false,"assignee":null,"milestone":null,"comments":3,"created_at":"2015-12-27T12:10:53Z","updated_at":"2015-12-29T14:31:49Z","closed_at":null,"body":"One valuable pattern in Imba is to create reusable and extendable tags for components and controls. Here we'll show you how to create a basic tag whose rendertree is composed of separate segments.\r\n\r\n```imba\r\ntag panel\r\n\r\n    def header\r\n        <@header> title or \"Panel\"\r\n\r\n    def body\r\n        <@body> \"My content\"\r\n\r\n    def render\r\n        <self>\r\n            header\r\n            body\r\n\r\n# Now we can inherit from panel, and only override the body.\r\ntag settings < panel\r\n    \r\n    def body # override body\r\n        <@body>\r\n            <div> \"Stuff in settings\"\r\n            <div> \"More settings\"\r\n```\r\n\r\n> Tip! When splitting the rendering into several methods outside of `<self>` all top-level tags **must** have an explicit name using the @-syntax like `<div@myname>`. Otherwise the div and its children will be recreated on every render. When tags have a name they will be created once (on the first call) and cached inline. This is one of the things that make Imba really fast.\r\n\r\n## Wrapping content\r\n\r\nAs you might know, tags are compiled to chains of setters. `<div.hello> \"world\"` will compile to something along the lines of `div().flag('hello').setContent(['world']).end()`. As you can see, the inner content of a tag is using a setter. We can override setContent to simply store a reference to the content, and then include the content somewhere inside the render-tree of the tag.\r\n> Overriding setContent is not something we'd recommend unless you really understand how rendering in Imba works. To learn more about rendering, see [guide](http://imba.io/guides/rendering).\r\n\r\n```imba\r\ntag panel\r\n    def setContent value\r\n        @content = value\r\n        self\r\n\r\n    def render\r\n        <self>\r\n            <div.header> title\r\n            <div.body> @content\r\n            <div.footer> \"My footer\"\r\n\r\n# spawn a panel with some buttons\r\n<panel title=\"Settings\">\r\n    <button> \"Save\"\r\n    <button> \"Load\"\r\n```\r\n\r\nAll panels we spawn will now always wrap their content inside a div.body.","closed_by":null,"md":"<p>One valuable pattern in Imba is to create reusable and extendable tags for components and controls. Here we&#39;ll show you how to create a basic tag whose rendertree is composed of separate segments.</p>\n<div class='_snippet'><section class='main'><header class='header'><div class='title path'></div><div class='tools'><button class='_tool reset sym' title=\"reset\">reset</button><button class='_tool js sym' title=\"show js\">show js</button><button class='_tool run sym' title=\"run\">run</button></div></header><div class='view'><code class='imbacode'><b class='_imtok keyword tag'>tag</b><b class='_imspace'> </b><b class='_imtok tag_type'>panel</b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>header</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok ivar'>@header</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok _imidentifier identifier access'>title</b><b class='_imspace'> </b><b class='_imtok keyword logic'>or</b><b class='_imspace'> </b><b class='_imstr string'>\"Panel\"</b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>body</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok ivar'>@body</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"My content\"</b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>render</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok keyword self'>self</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier access'>header</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier access'>body</b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_im _imcomment'># Now we can inherit from panel, and only override the body.</b><b class='_imnewline'>\n</b><b class='_imtok keyword tag'>tag</b><b class='_imspace'> </b><b class='_imtok tag_type'>settings</b><b class='_imspace'> </b><b class='_imop op compare'><</b><b class='_imspace'> </b><b class='_imtok tag_type'>panel</b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>body</b><b class='_imspace'> </b><b class='_im _imcomment'># override body</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok ivar'>@body</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"Stuff in settings\"</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"More settings\"</b></b></b></code></div></section><div class='inspector'></div></div><blockquote>\n<p>Tip! When splitting the rendering into several methods outside of <code class='code md imba inline'><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok keyword self'>self</b><b class='_imclose tag_close'>></b></b></code> all top-level tags <strong>must</strong> have an explicit name using the @-syntax like <code class='code md imba inline'><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imtok ivar'>@myname</b><b class='_imclose tag_close'>></b></b></code>. Otherwise the div and its children will be recreated on every render. When tags have a name they will be created once (on the first call) and cached inline. This is one of the things that make Imba really fast.</p>\n</blockquote>\n<div class='toc-anchor' id=\"toc-wrapping-content\"></div><h2><span>Wrapping content</span></h2><p>As you might know, tags are compiled to chains of setters. <code class='code md imba inline'><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>hello</b><b class='_imclose tag_close'>></b></b><b class='_imspace'> </b><b class='_imstr string'>\"world\"</b></code> will compile to something along the lines of <code class='code md imba inline'><b class='_imtok _imidentifier identifier'>div</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>flag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'hello'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>setContent</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imstr string'>'world'</b><b class='_imclose sb sbr'>]</b></b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>end</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code>. As you can see, the inner content of a tag is using a setter. We can override setContent to simply store a reference to the content, and then include the content somewhere inside the render-tree of the tag.</p>\n<blockquote>\n<p>Overriding setContent is not something we&#39;d recommend unless you really understand how rendering in Imba works. To learn more about rendering, see <a href=\"http://imba.io/guides/rendering\">guide</a>.</p>\n</blockquote>\n<div class='_snippet'><section class='main'><header class='header'><div class='title path'></div><div class='tools'><button class='_tool reset sym' title=\"reset\">reset</button><button class='_tool js sym' title=\"show js\">show js</button><button class='_tool run sym' title=\"run\">run</button></div></header><div class='view'><code class='imbacode'><b class='_imtok keyword tag'>tag</b><b class='_imspace'> </b><b class='_imtok tag_type'>panel</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>setContent</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok paramvar lvar' eref='v0'>value</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok ivar'>@content</b><b class='_imspace'> </b><b class='_imop op eq'>=</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>value</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok keyword self'>self</b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>render</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok keyword self'>self</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>header</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok _imidentifier identifier access'>title</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>body</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok ivar'>@content</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>footer</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"My footer\"</b></b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_im _imcomment'># spawn a panel with some buttons</b><b class='_imnewline'>\n</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>panel</b><b class='_imspace'> </b><b class='_imtok tag_attr'>title</b><b class='_imop op eq'>=</b><b class='_imstr string'>\"Settings\"</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>button</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"Save\"</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'><</b><b class='_imtok tag_type'>button</b><b class='_imclose tag_close'>></b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"Load\"</b></b></b></code></div></section><div class='inspector'></div></div><p>All panels we spawn will now always wrap their content inside a div.body.</p>\n"}