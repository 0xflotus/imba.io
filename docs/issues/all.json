[{"id":123974969,"number":2,"title":"Creating reusable components","user":{"login":"somebee","id":8467,"gravatar_id":"","type":"User","site_admin":false},"labels":[{"name":"article","color":"5319e7"},{"name":"tip","color":"eb6420"}],"state":"open","locked":false,"assignee":null,"milestone":null,"comments":3,"created_at":"2015-12-27T12:10:53Z","updated_at":"2015-12-29T14:31:49Z","closed_at":null,"body":"One valuable pattern in Imba is to create reusable and extendable tags for components and controls. Here we'll show you how to create a basic tag whose rendertree is composed of separate segments.\r\n\r\n```imba\r\ntag panel\r\n\r\n    def header\r\n        <@header> title or \"Panel\"\r\n\r\n    def body\r\n        <@body> \"My content\"\r\n\r\n    def render\r\n        <self>\r\n            header\r\n            body\r\n\r\n# Now we can inherit from panel, and only override the body.\r\ntag settings < panel\r\n    \r\n    def body # override body\r\n        <@body>\r\n            <div> \"Stuff in settings\"\r\n            <div> \"More settings\"\r\n```\r\n\r\n> Tip! When splitting the rendering into several methods outside of `<self>` all top-level tags **must** have an explicit name using the @-syntax like `<div@myname>`. Otherwise the div and its children will be recreated on every render. When tags have a name they will be created once (on the first call) and cached inline. This is one of the things that make Imba really fast.\r\n\r\n## Wrapping content\r\n\r\nAs you might know, tags are compiled to chains of setters. `<div.hello> \"world\"` will compile to something along the lines of `div().flag('hello').setContent(['world']).end()`. As you can see, the inner content of a tag is using a setter. We can override setContent to simply store a reference to the content, and then include the content somewhere inside the render-tree of the tag.\r\n> Overriding setContent is not something we'd recommend unless you really understand how rendering in Imba works. To learn more about rendering, see [guide](http://imba.io/guides/rendering).\r\n\r\n```imba\r\ntag panel\r\n    def setContent value\r\n        @content = value\r\n        self\r\n\r\n    def render\r\n        <self>\r\n            <div.header> title\r\n            <div.body> @content\r\n            <div.footer> \"My footer\"\r\n\r\n# spawn a panel with some buttons\r\n<panel title=\"Settings\">\r\n    <button> \"Save\"\r\n    <button> \"Load\"\r\n```\r\n\r\nAll panels we spawn will now always wrap their content inside a div.body."},{"id":123974410,"number":1,"title":"Welcome to imba.io","user":{"login":"somebee","id":8467,"gravatar_id":"","type":"User","site_admin":false},"labels":[{"name":"article","color":"5319e7"}],"state":"open","locked":false,"assignee":null,"milestone":null,"comments":0,"created_at":"2015-12-27T11:54:02Z","updated_at":"2015-12-29T14:56:55Z","closed_at":null,"body":"We've finally launched a decent site with documentation and guides. Up until now, it has been very difficult to learn Imba, even if you were really interested. We still have a long road ahead, but at least\r\nwe have docs, guides, and examples to lead the way.\r\n\r\n## Dogfooding\r\n\r\nThe whole site is written in Imba, and uses the same code on server and client (including rendering and routing). All navigation after initial page-load happens through the [history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) rendered locally on the client, while any full reload should return the same page from the server. This is a great benefit of using the same code in both environments. The source can be found at [somebee/imba.io](http://github.com/somebee/imba.io). Even though it is still quite messy and the comments are few and far between, it is a good example of how to structure a site / project of decent size in imba.\r\n\r\n## Scrimbla\r\n\r\nEvery snippet on the site is editable, and runnable, thanks to a brand new web-based code editor written in Imba. It still has *many* quirks and issues, but it already includes some cool features, like live error \r\nreporting, both compile-time errors and runtime errors (with proper sourcemapping). The long-term plan is to make Scrimbla the goto editor for coding imba, but for now it is only used for these tiny snippets around here.\r\n\r\n```imba\r\nvar msg = \"I am editable\"\r\n```\r\n\r\n> The editor is **very** experimental. Expect crashes, quirks, and tons of weird issues. When you do, please [file an issue](https://github.com/somebee/scrimbla/issues) over at [somebee/scrimbla](https://github.com/somebee/scrimbla).\r\n\r\n## Going forward\r\n\r\nThe documentation is still lacking, and the ecosystem is in its early days. We are working on a more usable playground for testing \r\n\r\nWe'd love for you to try it out. If you run into any trouble, make sure to [file an issue](http://github.com/somebee/imba/issues) or contact us on [gitter](https://gitter.im/somebee/imba). We'll do everything we can to help you out! Happy coding!"}]