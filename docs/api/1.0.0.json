{"version":"1.0.0","methods":{},"classes":{},"entities":{"Imba":{"type":"object",".":["Imba.Scheduler","Imba.Tag","Imba.Tags","Imba.EventManager","Imba.Event","Imba.Touch","Imba.TouchGesture","Imba.Pointer"]},"Variable.isClient":{"type":"method","name":"isClient","namepath":"Variable.isClient","params":[],"desc":"True if running in client environment.","scopenr":5,"loc":[168,199],"return":{"name":"return","value":"bool","desc":""},"html":"<p>True if running in client environment.</p>\n"},"Variable.isServer":{"type":"method","name":"isServer","namepath":"Variable.isServer","params":[],"desc":"True if running in server environment.","scopenr":6,"loc":[263,295],"return":{"name":"return","value":"bool","desc":""},"html":"<p>True if running in server environment.</p>\n"},"Variable.setTimeout":{"type":"method","name":"setTimeout","namepath":"Variable.setTimeout","params":[{"type":"RequiredParam","name":"delay"},{"type":"BlockParam","name":"block","defaults":null}],"desc":"Light wrapper around native setTimeout that expects the block / function\nas last argument (instead of first). It also triggers an event to Imba\nafter the timeout to let schedulers update (to rerender etc) afterwards.","scopenr":8,"loc":[525,606],"html":"<p>Light wrapper around native setTimeout that expects the block / function\nas last argument (instead of first). It also triggers an event to Imba\nafter the timeout to let schedulers update (to rerender etc) afterwards.</p>\n"},"Variable.setInterval":{"type":"method","name":"setInterval","namepath":"Variable.setInterval","params":[{"type":"RequiredParam","name":"interval"},{"type":"BlockParam","name":"block","defaults":null}],"desc":"Light wrapper around native setInterval that expects the block / function\nas last argument (instead of first). It also triggers an event to Imba\nafter every interval to let schedulers update (to rerender etc) afterwards.","scopenr":10,"loc":[839,928],"html":"<p>Light wrapper around native setInterval that expects the block / function\nas last argument (instead of first). It also triggers an event to Imba\nafter every interval to let schedulers update (to rerender etc) afterwards.</p>\n"},"Variable.clearInterval":{"type":"method","name":"clearInterval","namepath":"Variable.clearInterval","params":[{"type":"RequiredParam","name":"id"}],"desc":"Clear interval with specified id","scopenr":11,"loc":[971,1015],"html":"<p>Clear interval with specified id</p>\n"},"Variable.clearTimeout":{"type":"method","name":"clearTimeout","namepath":"Variable.clearTimeout","params":[{"type":"RequiredParam","name":"id"}],"desc":"Clear timeout with specified id","scopenr":12,"loc":[1057,1099],"html":"<p>Clear timeout with specified id</p>\n"},"Variable.subclass":{"type":"method","name":"subclass","namepath":"Variable.subclass","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"sup"}],"scopenr":15,"loc":[1102,1358]},"Variable.iterable":{"type":"method","name":"iterable","namepath":"Variable.iterable","params":[{"type":"RequiredParam","name":"o"}],"desc":"Lightweight method for making an object iterable in imbas for/in loops.\nIf the compiler cannot say for certain that a target in a for loop is an\narray, it will cache the iterable version before looping.\n\n```imba\n# this is the whole method\ndef Imba.iterable o\n\treturn o ? (o:toArray ? o.toArray : o) : []\n\nclass CustomIterable\n\tdef toArray\n\t\t[1,2,3]\n\n# will return [2,4,6]\nfor x in CustomIterable.new\n\tx * 2\n\n```","scopenr":18,"loc":[1780,1844],"html":"<p>Lightweight method for making an object iterable in imbas for/in loops.\nIf the compiler cannot say for certain that a target in a for loop is an\narray, it will cache the iterable version before looping.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_im _imcomment'># this is the whole method</b><b class='_imnewline'>\n</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok const'>Imba</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>iterable</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok paramvar lvar' eref='v0'>o</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword return'>return</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>o</b><b class='_imspace'> </b><b class='_imop op ternary'>?</b><b class='_imspace'> </b><b class='_imparens paren'><b class='_imopen rb rbl'>(</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>o</b><b class='_imop op cdot'>:</b><b class='_imtok _imidentifier identifier'>toArray</b><b class='_imspace'> </b><b class='_imop op ternary'>?</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>o</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>toArray</b><b class='_imspace'> </b><b class='_imop op colon'>:</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>o</b><b class='_imclose rb rbr'>)</b></b><b class='_imspace'> </b><b class='_imop op colon'>:</b><b class='_imspace'> </b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imclose sb sbr'>]</b></b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtok keyword class'>class</b><b class='_imspace'> </b><b class='_imtok const'>CustomIterable</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>toArray</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imnum number'>1</b><b class='_imop op comma'>,</b><b class='_imnum number'>2</b><b class='_imop op comma'>,</b><b class='_imnum number'>3</b><b class='_imclose sb sbr'>]</b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_im _imcomment'># will return [2,4,6]</b><b class='_imnewline'>\n</b><b class='_imtok keyword for'>for</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v1'>x</b><b class='_imspace'> </b><b class='_imtok keyword in'>in</b><b class='_imspace'> </b><b class='_imtok const'>CustomIterable</b><b class='_imop op dot'>.</b><b class='_imtok new'>new</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier lvar' eref='v1'>x</b><b class='_imspace'> </b><b class='_imop op math'>*</b><b class='_imspace'> </b><b class='_imnum number'>2</b></code></div></section><div class=\"inspector\"></div></div>"},"Variable.await":{"type":"method","name":"await","namepath":"Variable.await","params":[{"type":"RequiredParam","name":"value"}],"desc":"Coerces a value into a promise. If value is array it will\ncall `Promise.all(value)`, or if it is not a promise it will\nwrap the value in `Promise.resolve(value)`. Used for experimental\nawait syntax.","scopenr":21,"loc":[2071,2198],"return":{"name":"return","value":"Promise","desc":""},"html":"<p>Coerces a value into a promise. If value is array it will\ncall <code class=\"code md imba inline\"><b class='_imtok const'>Promise</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>all</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imtok _imidentifier identifier'>value</b><b class='_imclose rb rbr'>)</b></b></code>, or if it is not a promise it will\nwrap the value in <code class=\"code md imba inline\"><b class='_imtok const'>Promise</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>resolve</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imtok _imidentifier identifier'>value</b><b class='_imclose rb rbr'>)</b></b></code>. Used for experimental\nawait syntax.</p>\n"},"Variable.toCamelCase":{"type":"method","name":"toCamelCase","namepath":"Variable.toCamelCase","params":[{"type":"RequiredParam","name":"str"}],"scopenr":24,"loc":[2223,2341]},"Variable.indexOf":{"type":"method","name":"indexOf","namepath":"Variable.indexOf","params":[{"type":"RequiredParam","name":"a"},{"type":"RequiredParam","name":"b"}],"scopenr":26,"loc":[2343,2426]},"Variable.len":{"type":"method","name":"len","namepath":"Variable.len","params":[{"type":"RequiredParam","name":"a"}],"scopenr":28,"loc":[2428,2508]},"Variable.prop":{"type":"method","name":"prop","namepath":"Variable.prop","params":[{"type":"RequiredParam","name":"scope"},{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"opts"}],"scopenr":30,"loc":[2510,2615]},"Variable.attr":{"type":"method","name":"attr","namepath":"Variable.attr","params":[{"type":"RequiredParam","name":"scope"},{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"opts"}],"scopenr":34,"loc":[2617,2961]},"Variable.propDidSet":{"type":"method","name":"propDidSet","namepath":"Variable.propDidSet","params":[{"type":"RequiredParam","name":"object"},{"type":"RequiredParam","name":"property"},{"type":"RequiredParam","name":"val"},{"type":"RequiredParam","name":"prev"}],"scopenr":37,"loc":[2963,3166]},"&emit__":{"type":"method","name":"emit__","namepath":"&emit__","params":[{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"args"},{"type":"RequiredParam","name":"node"}],"scopenr":44,"loc":[3184,3611]},"Variable.listen":{"type":"method","name":"listen","namepath":"Variable.listen","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"listener"},{"type":"RequiredParam","name":"path"}],"scopenr":45,"loc":[3659,3917]},"Variable.once":{"type":"method","name":"once","namepath":"Variable.once","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"listener"}],"scopenr":46,"loc":[3946,4053]},"Variable.unlisten":{"type":"method","name":"unlisten","namepath":"Variable.unlisten","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"cb"},{"type":"RequiredParam","name":"meth"}],"scopenr":51,"loc":[4075,4395]},"Variable.emit":{"type":"method","name":"emit","namepath":"Variable.emit","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"params"}],"scopenr":55,"loc":[4410,4596]},"Variable.observeProperty":{"type":"method","name":"observeProperty","namepath":"Variable.observeProperty","params":[{"type":"RequiredParam","name":"observer"},{"type":"RequiredParam","name":"key"},{"type":"RequiredParam","name":"trigger"},{"type":"RequiredParam","name":"target"},{"type":"RequiredParam","name":"prev"}],"scopenr":58,"loc":[4598,4833]},"Ticker":{"type":"class","namepath":"Ticker","inherits":null,"path":"Ticker","loc":[0,0],"#":["Ticker#initialize","Ticker#add","Ticker#tick","Ticker#schedule","Ticker#before","Ticker#after"]},"Ticker#initialize":{"type":"method","name":"initialize","namepath":"Ticker#initialize","params":[],"scopenr":84,"loc":[640,756]},"Ticker#add":{"type":"method","name":"add","namepath":"Ticker#add","params":[{"type":"RequiredParam","name":"item"},{"type":"RequiredParam","name":"force"}],"scopenr":87,"loc":[759,870]},"Ticker#tick":{"type":"method","name":"tick","namepath":"Ticker#tick","params":[{"type":"RequiredParam","name":"timestamp"}],"scopenr":94,"loc":[873,1208]},"Ticker#schedule":{"type":"method","name":"schedule","namepath":"Ticker#schedule","params":[],"scopenr":97,"loc":[1211,1335]},"Ticker#before":{"type":"method","name":"before","namepath":"Ticker#before","params":[],"scopenr":98,"loc":[1338,1355]},"Ticker#after":{"type":"method","name":"after","namepath":"Ticker#after","params":[],"scopenr":99,"loc":[1358,1388]},"Variable.commit":{"type":"method","name":"commit","namepath":"Variable.commit","params":[],"scopenr":101,"loc":[1416,1456]},"Variable.ticker":{"type":"method","name":"ticker","namepath":"Variable.ticker","params":[],"scopenr":102,"loc":[1458,1486]},"Variable.requestAnimationFrame":{"type":"method","name":"requestAnimationFrame","namepath":"Variable.requestAnimationFrame","params":[{"type":"RequiredParam","name":"callback"}],"scopenr":103,"loc":[1488,1560]},"Variable.cancelAnimationFrame":{"type":"method","name":"cancelAnimationFrame","namepath":"Variable.cancelAnimationFrame","params":[{"type":"RequiredParam","name":"id"}],"scopenr":104,"loc":[1562,1620]},"Imba.Scheduler":{"type":"class","namepath":"Imba.Scheduler","inherits":null,"path":"Imba.Scheduler","desc":"Instances of Imba.Scheduler manages when to call `tick()` on their target,\nat a specified framerate or when certain events occur. Root-nodes in your\napplications will usually have a scheduler to make sure they rerender when\nsomething changes. It is also possible to make inner components use their\nown schedulers to control when they render.","loc":[0,0],"iname":"scheduler","html":"<p>Instances of Imba.Scheduler manages when to call <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>tick</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code> on their target,\nat a specified framerate or when certain events occur. Root-nodes in your\napplications will usually have a scheduler to make sure they rerender when\nsomething changes. It is also possible to make inner components use their\nown schedulers to control when they render.</p>\n",".":["Imba.Scheduler.event"],"#":["Imba.Scheduler#initialize","Imba.Scheduler#rafDidSet","Imba.Scheduler#intervalDidSet","Imba.Scheduler#eventsDidSet","Imba.Scheduler#active","Imba.Scheduler#dt","Imba.Scheduler#configure","Imba.Scheduler#mark","Imba.Scheduler#flush","Imba.Scheduler#tick","Imba.Scheduler#requestTick","Imba.Scheduler#activate","Imba.Scheduler#deactivate","Imba.Scheduler#track","Imba.Scheduler#onevent"]},"Imba.Scheduler.event":{"type":"method","name":"event","namepath":"Imba.Scheduler.event","params":[{"type":"RequiredParam","name":"e"}],"scopenr":105,"loc":[2137,2181]},"Imba.Scheduler#initialize":{"type":"method","name":"initialize","namepath":"Imba.Scheduler#initialize","params":[{"type":"RequiredParam","name":"target"}],"desc":"Create a new Imba.Scheduler for specified target","scopenr":108,"loc":[2270,2546],"return":{"name":"return","value":"Imba.Scheduler","desc":""},"html":"<p>Create a new Imba.Scheduler for specified target</p>\n"},"Imba.Scheduler#rafDidSet":{"type":"method","name":"rafDidSet","namepath":"Imba.Scheduler#rafDidSet","params":[{"type":"RequiredParam","name":"bool"}],"scopenr":110,"loc":[2634,2701]},"Imba.Scheduler#intervalDidSet":{"type":"method","name":"intervalDidSet","namepath":"Imba.Scheduler#intervalDidSet","params":[{"type":"RequiredParam","name":"time"}],"scopenr":112,"loc":[2704,2843]},"Imba.Scheduler#eventsDidSet":{"type":"method","name":"eventsDidSet","namepath":"Imba.Scheduler#eventsDidSet","params":[{"type":"RequiredParam","name":"new"},{"type":"RequiredParam","name":"prev"}],"scopenr":114,"loc":[2846,3000]},"Imba.Scheduler#active":{"type":"method","name":"active","namepath":"Imba.Scheduler#active","params":[],"desc":"Check whether the current scheduler is active or not","scopenr":115,"loc":[3083,3103],"return":{"name":"return","value":"bool","desc":""},"html":"<p>Check whether the current scheduler is active or not</p>\n"},"Imba.Scheduler#dt":{"type":"method","name":"dt","namepath":"Imba.Scheduler#dt","params":[],"desc":"Delta time between the two last ticks","scopenr":116,"loc":[3173,3185],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Delta time between the two last ticks</p>\n"},"Imba.Scheduler#configure":{"type":"method","name":"configure","namepath":"Imba.Scheduler#configure","params":[{"type":"OptionalParam","name":"options","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_expression":false,"_traversed":true,"_parens":false,"_cache":null,"_value":null,"_nodes":[],"_indentation":null}}}],"desc":"Configure the scheduler","scopenr":120,"loc":[3239,3462],"return":{"name":"return","value":"self","desc":""},"html":"<p>Configure the scheduler</p>\n"},"Imba.Scheduler#mark":{"type":"method","name":"mark","namepath":"Imba.Scheduler#mark","params":[],"desc":"Mark the scheduler as dirty. This will make sure that\nthe scheduler calls `target.tick` on the next frame","scopenr":122,"loc":[3599,3662],"return":{"name":"return","value":"self","desc":""},"html":"<p>Mark the scheduler as dirty. This will make sure that\nthe scheduler calls <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>target</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>tick</b></code> on the next frame</p>\n"},"Imba.Scheduler#flush":{"type":"method","name":"flush","namepath":"Imba.Scheduler#flush","params":[],"desc":"Instantly trigger target.tick and mark scheduler as clean (not dirty/marked).\nThis is called implicitly from tick, but can also be called manually if you\nreally want to force a tick without waiting for the next frame.","scopenr":123,"loc":[3912,3977],"return":{"name":"return","value":"self","desc":""},"html":"<p>Instantly trigger target.tick and mark scheduler as clean (not dirty/marked).\nThis is called implicitly from tick, but can also be called manually if you\nreally want to force a tick without waiting for the next frame.</p>\n"},"Imba.Scheduler#tick":{"type":"method","name":"tick","namepath":"Imba.Scheduler#tick","params":[{"type":"RequiredParam","name":"delta"},{"type":"RequiredParam","name":"ticker"}],"desc":"Called automatically on every frame while the scheduler is active.\nIt will only call `target.tick` if the scheduler is marked dirty,\nor when according to @fps setting.\n\nIf you have set up a scheduler with an fps of 1, tick will still be\ncalled every frame, but `target.tick` will only be called once every\nsecond, and it will *make sure* each `target.tick` happens in separate\nseconds according to Date. So if you have a node that renders a clock\nbased on Date.now (or something similar), you can schedule it with 1fps,\nnever needing to worry about two ticks happening within the same second.\nThe same goes for 4fps, 10fps etc.","scopenr":126,"loc":[4701,4822],"fixme":"this expects raf to run at 60 fps ","protected":true,"return":{"name":"return","value":"self","desc":""},"html":"<p>Called automatically on every frame while the scheduler is active.\nIt will only call <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>target</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>tick</b></code> if the scheduler is marked dirty,\nor when according to @fps setting.</p>\n<p>If you have set up a scheduler with an fps of 1, tick will still be\ncalled every frame, but <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>target</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>tick</b></code> will only be called once every\nsecond, and it will <em>make sure</em> each <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>target</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>tick</b></code> happens in separate\nseconds according to Date. So if you have a node that renders a clock\nbased on Date.now (or something similar), you can schedule it with 1fps,\nnever needing to worry about two ticks happening within the same second.\nThe same goes for 4fps, 10fps etc.</p>\n"},"Imba.Scheduler#requestTick":{"type":"method","name":"requestTick","namepath":"Imba.Scheduler#requestTick","params":[],"scopenr":128,"loc":[4825,4912]},"Imba.Scheduler#activate":{"type":"method","name":"activate","namepath":"Imba.Scheduler#activate","params":[],"desc":"Start the scheduler if it is not already active.\n**While active**, the scheduler will override `target.commit`\nto do nothing. By default Imba.tag#commit calls render, so\nthat rendering is cascaded through to children when rendering\na node. When a scheduler is active (for a node), Imba disables\nthis automatic rendering.","scopenr":131,"loc":[5252,5411],"html":"<p>Start the scheduler if it is not already active.\n<strong>While active</strong>, the scheduler will override <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>target</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>commit</b></code>\nto do nothing. By default Imba.tag#commit calls render, so\nthat rendering is cascaded through to children when rendering\na node. When a scheduler is active (for a node), Imba disables\nthis automatic rendering.</p>\n"},"Imba.Scheduler#deactivate":{"type":"method","name":"deactivate","namepath":"Imba.Scheduler#deactivate","params":[],"desc":"Stop the scheduler if it is active.","scopenr":133,"loc":[5461,5750],"html":"<p>Stop the scheduler if it is active.</p>\n"},"Imba.Scheduler#track":{"type":"method","name":"track","namepath":"Imba.Scheduler#track","params":[],"scopenr":134,"loc":[5753,5772]},"Imba.Scheduler#onevent":{"type":"method","name":"onevent","namepath":"Imba.Scheduler#onevent","params":[{"type":"RequiredParam","name":"event"}],"scopenr":140,"loc":[5775,5968]},"Variable.document":{"type":"method","name":"document","namepath":"Variable.document","params":[],"desc":"Get the current document","scopenr":147,"loc":[214,304],"html":"<p>Get the current document</p>\n"},"Variable.root":{"type":"method","name":"root","namepath":"Variable.root","params":[],"desc":"Get the body element wrapped in an Imba.Tag","scopenr":148,"loc":[358,396],"html":"<p>Get the body element wrapped in an Imba.Tag</p>\n"},"Variable.static":{"type":"method","name":"static","namepath":"Variable.static","params":[{"type":"RequiredParam","name":"items"},{"type":"RequiredParam","name":"nr"}],"scopenr":149,"loc":[399,457]},"Variable.mount":{"type":"method","name":"mount","namepath":"Variable.mount","params":[{"type":"RequiredParam","name":"node"},{"type":"RequiredParam","name":"into"}],"desc":"","scopenr":150,"loc":[468,611]},"Variable.createTextNode":{"type":"method","name":"createTextNode","namepath":"Variable.createTextNode","params":[{"type":"RequiredParam","name":"node"}],"scopenr":152,"loc":[614,731]},"Imba.Tag":{"type":"class","namepath":"Imba.Tag","inherits":null,"path":"Imba.Tag","desc":"This is the baseclass that all tags in imba inherit from.","loc":[0,0],"iname":"node","html":"<p>This is the baseclass that all tags in imba inherit from.</p>\n",".":["Imba.Tag.buildNode","Imba.Tag.createNode","Imba.Tag.build","Imba.Tag.dom","Imba.Tag.inherit"],"#":["Imba.Tag#optimizeTagStructure","Imba.Tag#initialize","Imba.Tag#dom","Imba.Tag#setDom","Imba.Tag#ref","Imba.Tag#ref_","Imba.Tag#data=","Imba.Tag#data","Imba.Tag#object=","Imba.Tag#object","Imba.Tag#html=","Imba.Tag#html","Imba.Tag#width","Imba.Tag#height","Imba.Tag#setHandler","Imba.Tag#id=","Imba.Tag#id","Imba.Tag#setAttribute","Imba.Tag#setNestedAttr","Imba.Tag#setAttributeNS","Imba.Tag#removeAttribute","Imba.Tag#getAttribute","Imba.Tag#getAttributeNS","Imba.Tag#setContent","Imba.Tag#setChildren","Imba.Tag#setTemplate","Imba.Tag#template","Imba.Tag#renderTemplate","Imba.Tag#removeChild","Imba.Tag#appendChild","Imba.Tag#insertBefore","Imba.Tag#append","Imba.Tag#prepend","Imba.Tag#orphanize","Imba.Tag#text","Imba.Tag#text=","Imba.Tag#dataset","Imba.Tag#empty","Imba.Tag#render","Imba.Tag#build","Imba.Tag#setup","Imba.Tag#commit","Imba.Tag#tick","Imba.Tag#end","Imba.Tag#synced","Imba.Tag#awaken","Imba.Tag#flags","Imba.Tag#classes","Imba.Tag#flag","Imba.Tag#unflag","Imba.Tag#toggleFlag","Imba.Tag#hasFlag","Imba.Tag#setFlag","Imba.Tag#scheduler","Imba.Tag#schedule","Imba.Tag#unschedule","Imba.Tag#parent","Imba.Tag#children","Imba.Tag#querySelector","Imba.Tag#querySelectorAll","Imba.Tag#matches","Imba.Tag#closest","Imba.Tag#index","Imba.Tag#contains","Imba.Tag#log","Imba.Tag#css","Imba.Tag#trigger","Imba.Tag#style=","Imba.Tag#style","Imba.Tag#focus","Imba.Tag#blur","Imba.Tag#toString"]},"Imba.Tag.buildNode":{"type":"method","name":"buildNode","namepath":"Imba.Tag.buildNode","params":[],"scopenr":155,"loc":[828,988]},"Imba.Tag.createNode":{"type":"method","name":"createNode","namepath":"Imba.Tag.createNode","params":[],"scopenr":156,"loc":[991,1075]},"Imba.Tag.build":{"type":"method","name":"build","namepath":"Imba.Tag.build","params":[{"type":"RequiredParam","name":"ctx"}],"scopenr":157,"loc":[1078,1128]},"Imba.Tag.dom":{"type":"method","name":"dom","namepath":"Imba.Tag.dom","params":[],"scopenr":158,"loc":[1131,1169]},"Imba.Tag.inherit":{"type":"method","name":"inherit","namepath":"Imba.Tag.inherit","params":[{"type":"RequiredParam","name":"child"}],"desc":"Called when a tag type is being subclassed.","scopenr":161,"loc":[1227,1540],"html":"<p>Called when a tag type is being subclassed.</p>\n"},"Imba.Tag#optimizeTagStructure":{"type":"method","name":"optimizeTagStructure","namepath":"Imba.Tag#optimizeTagStructure","params":[],"desc":"Internal method called after a tag class has\nbeen declared or extended.","scopenr":172,"loc":[1639,2538],"private":true,"html":"<p>Internal method called after a tag class has\nbeen declared or extended.</p>\n"},"Imba.Tag#initialize":{"type":"method","name":"initialize","namepath":"Imba.Tag#initialize","params":[{"type":"RequiredParam","name":"dom"},{"type":"RequiredParam","name":"ctx"}],"scopenr":174,"loc":[2542,2657]},"Imba.Tag#dom":{"type":"method","name":"dom","namepath":"Imba.Tag#dom","params":[],"scopenr":175,"loc":[2710,2724]},"Imba.Tag#setDom":{"type":"method","name":"setDom","namepath":"Imba.Tag#setDom","params":[{"type":"RequiredParam","name":"dom"}],"scopenr":176,"loc":[2729,2781]},"Imba.Tag#ref":{"type":"method","name":"ref","namepath":"Imba.Tag#ref","params":[],"scopenr":177,"loc":[2784,2798]},"Imba.Tag#ref_":{"type":"method","name":"ref_","namepath":"Imba.Tag#ref_","params":[{"type":"RequiredParam","name":"ref"},{"type":"RequiredParam","name":"ctx"}],"desc":"Setting references for tags like\n`<div@header>` will compile to `tag('div').ref_('header',this).end()`\nBy default it adds the reference as a className to the tag.","scopenr":178,"loc":[3004,3086],"return":{"name":"return","value":"self","desc":""},"private":true,"html":"<p>Setting references for tags like\n<code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imtok ivar'>@header</b><b class='_imclose tag_close'>&gt;</b></b></code> will compile to <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>tag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'div'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>ref_</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'header'</b><b class='_imop op comma'>,</b><b class='_imtok keyword this'>this</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>end</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code>\nBy default it adds the reference as a className to the tag.</p>\n"},"Imba.Tag#data=":{"type":"method","name":"data=","namepath":"Imba.Tag#data=","params":[{"type":"RequiredParam","name":"data"}],"desc":"Set the data object for node","scopenr":179,"loc":[3146,3175],"return":{"name":"return","value":"self","desc":""},"html":"<p>Set the data object for node</p>\n"},"Imba.Tag#data":{"type":"method","name":"data","namepath":"Imba.Tag#data","params":[],"desc":"Get the data object for node","scopenr":180,"loc":[3218,3234],"html":"<p>Get the data object for node</p>\n"},"Imba.Tag#object=":{"type":"method","name":"object=","namepath":"Imba.Tag#object=","params":[{"type":"RequiredParam","name":"value"}],"scopenr":181,"loc":[3237,3324]},"Imba.Tag#object":{"type":"method","name":"object","namepath":"Imba.Tag#object","params":[],"scopenr":182,"loc":[3327,3344]},"Imba.Tag#html=":{"type":"method","name":"html=","namepath":"Imba.Tag#html=","params":[{"type":"RequiredParam","name":"html"}],"desc":"Set inner html of node","scopenr":184,"loc":[3381,3443],"html":"<p>Set inner html of node</p>\n"},"Imba.Tag#html":{"type":"method","name":"html","namepath":"Imba.Tag#html","params":[],"desc":"Get inner html of node","scopenr":185,"loc":[3480,3505],"html":"<p>Get inner html of node</p>\n"},"Imba.Tag#width":{"type":"method","name":"width","namepath":"Imba.Tag#width","params":[],"desc":"Get width of node (offsetWidth)","scopenr":186,"loc":[3583,3670],"deprecated":true,"return":{"name":"return","value":"number","desc":""},"html":"<p>Get width of node (offsetWidth)</p>\n"},"Imba.Tag#height":{"type":"method","name":"height","namepath":"Imba.Tag#height","params":[],"desc":"Get height of node (offsetHeight)","scopenr":187,"loc":[3749,3840],"deprecated":true,"return":{"name":"return","value":"number","desc":""},"html":"<p>Get height of node (offsetHeight)</p>\n"},"Imba.Tag#setHandler":{"type":"method","name":"setHandler","namepath":"Imba.Tag#setHandler","params":[{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"handler"},{"type":"RequiredParam","name":"ctx"}],"desc":"Method that is called by the compiled tag-chains, for\nbinding events on tags to methods etc.\n`<a :tap=fn>` compiles to `tag('a').setHandler('tap',fn,this).end()`\nwhere this refers to the context in which the tag is created.","scopenr":192,"loc":[4097,4368],"return":{"name":"return","value":"self","desc":""},"html":"<p>Method that is called by the compiled tag-chains, for\nbinding events on tags to methods etc.\n<code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>a</b><b class='_imspace'> </b><b class='_imtok tag_attr'>:tap</b><b class='_imop op eq'>=</b><b class='_imvalue'><b class='_imtok _imidentifier identifier'>fn</b></b><b class='_imclose tag_close'>&gt;</b></b></code> compiles to <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>tag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'a'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>setHandler</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'tap'</b><b class='_imop op comma'>,</b><b class='_imtok _imidentifier identifier'>fn</b><b class='_imop op comma'>,</b><b class='_imtok keyword this'>this</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>end</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code>\nwhere this refers to the context in which the tag is created.</p>\n"},"Imba.Tag#id=":{"type":"method","name":"id=","namepath":"Imba.Tag#id=","params":[{"type":"RequiredParam","name":"id"}],"scopenr":194,"loc":[4371,4412]},"Imba.Tag#id":{"type":"method","name":"id","namepath":"Imba.Tag#id","params":[],"scopenr":195,"loc":[4415,4430]},"Imba.Tag#setAttribute":{"type":"method","name":"setAttribute","namepath":"Imba.Tag#setAttribute","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"value"}],"desc":"Adds a new attribute or changes the value of an existing attribute\non the specified tag. If the value is null or false, the attribute\nwill be removed.","scopenr":198,"loc":[4613,4845],"return":{"name":"return","value":"self","desc":""},"html":"<p>Adds a new attribute or changes the value of an existing attribute\non the specified tag. If the value is null or false, the attribute\nwill be removed.</p>\n"},"Imba.Tag#setNestedAttr":{"type":"method","name":"setNestedAttr","namepath":"Imba.Tag#setNestedAttr","params":[{"type":"RequiredParam","name":"ns"},{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"value"}],"scopenr":201,"loc":[4848,5042]},"Imba.Tag#setAttributeNS":{"type":"method","name":"setAttributeNS","namepath":"Imba.Tag#setAttributeNS","params":[{"type":"RequiredParam","name":"ns"},{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"value"}],"scopenr":204,"loc":[5045,5276]},"Imba.Tag#removeAttribute":{"type":"method","name":"removeAttribute","namepath":"Imba.Tag#removeAttribute","params":[{"type":"RequiredParam","name":"name"}],"desc":"removes an attribute from the specified tag","scopenr":205,"loc":[5335,5387],"html":"<p>removes an attribute from the specified tag</p>\n"},"Imba.Tag#getAttribute":{"type":"method","name":"getAttribute","namepath":"Imba.Tag#getAttribute","params":[{"type":"RequiredParam","name":"name"}],"desc":"returns the value of an attribute on the tag.\nIf the given attribute does not exist, the value returned\nwill either be null or \"\" (the empty string)","scopenr":206,"loc":[5552,5598],"html":"<p>returns the value of an attribute on the tag.\nIf the given attribute does not exist, the value returned\nwill either be null or &quot;&quot; (the empty string)</p>\n"},"Imba.Tag#getAttributeNS":{"type":"method","name":"getAttributeNS","namepath":"Imba.Tag#getAttributeNS","params":[{"type":"RequiredParam","name":"ns"},{"type":"RequiredParam","name":"name"}],"scopenr":207,"loc":[5602,5659]},"Imba.Tag#setContent":{"type":"method","name":"setContent","namepath":"Imba.Tag#setContent","params":[{"type":"RequiredParam","name":"content"},{"type":"RequiredParam","name":"type"}],"desc":"Override this to provide special wrapping etc.","scopenr":208,"loc":[5736,5799],"return":{"name":"return","value":"self","desc":""},"html":"<p>Override this to provide special wrapping etc.</p>\n"},"Imba.Tag#setChildren":{"type":"method","name":"setChildren","namepath":"Imba.Tag#setChildren","params":[{"type":"RequiredParam","name":"nodes"},{"type":"RequiredParam","name":"type"}],"desc":"Set the children of node. type param is optional,\nand should only be used by Imba when compiling tag trees. ","scopenr":210,"loc":[5939,6039],"return":{"name":"return","value":"self","desc":""},"html":"<p>Set the children of node. type param is optional,\nand should only be used by Imba when compiling tag trees. </p>\n"},"Imba.Tag#setTemplate":{"type":"method","name":"setTemplate","namepath":"Imba.Tag#setTemplate","params":[{"type":"RequiredParam","name":"template"}],"desc":"Set the template that will render the content of node.","scopenr":213,"loc":[6124,6385],"return":{"name":"return","value":"self","desc":""},"html":"<p>Set the template that will render the content of node.</p>\n"},"Imba.Tag#template":{"type":"method","name":"template","namepath":"Imba.Tag#template","params":[],"scopenr":214,"loc":[6388,6407]},"Imba.Tag#renderTemplate":{"type":"method","name":"renderTemplate","namepath":"Imba.Tag#renderTemplate","params":[],"desc":"If no custom render-method is defined, and the node\nhas a template, this method will be used to render","scopenr":216,"loc":[6541,6624],"return":{"name":"return","value":"self","desc":""},"html":"<p>If no custom render-method is defined, and the node\nhas a template, this method will be used to render</p>\n"},"Imba.Tag#removeChild":{"type":"method","name":"removeChild","namepath":"Imba.Tag#removeChild","params":[{"type":"RequiredParam","name":"child"}],"desc":"Remove specified child from current node.","scopenr":219,"loc":[6697,6894],"return":{"name":"return","value":"self","desc":""},"html":"<p>Remove specified child from current node.</p>\n"},"Imba.Tag#appendChild":{"type":"method","name":"appendChild","namepath":"Imba.Tag#appendChild","params":[{"type":"RequiredParam","name":"node"}],"desc":"Append a single item (node or string) to the current node.\nIf supplied item is a string it will automatically. This is used\nby Imba internally, but will practically never be used explicitly.","scopenr":222,"loc":[7118,7376],"return":{"name":"return","value":"self","desc":""},"html":"<p>Append a single item (node or string) to the current node.\nIf supplied item is a string it will automatically. This is used\nby Imba internally, but will practically never be used explicitly.</p>\n"},"Imba.Tag#insertBefore":{"type":"method","name":"insertBefore","namepath":"Imba.Tag#insertBefore","params":[{"type":"RequiredParam","name":"node"},{"type":"RequiredParam","name":"rel"}],"desc":"Insert a node into the current node (self), before another.\nThe relative node must be a child of current node. ","scopenr":225,"loc":[7503,7788],"html":"<p>Insert a node into the current node (self), before another.\nThe relative node must be a child of current node. </p>\n"},"Imba.Tag#append":{"type":"method","name":"append","namepath":"Imba.Tag#append","params":[{"type":"RequiredParam","name":"item"}],"desc":"The .append method inserts the specified content as the last child\nof the target node. If the content is already a child of node it\nwill be moved to the end.\n\n\tvar root = <div.root>\n\tvar item = <div.item> \"This is an item\"\n\troot.append item # appends item to the end of root\n\n\troot.append \"some text\" # append text\n\troot.append [<ul>,<ul>] # append array","scopenr":232,"loc":[8165,8594],"html":"<p>The .append method inserts the specified content as the last child\nof the target node. If the content is already a child of node it\nwill be moved to the end.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_imtok keyword var'>var</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>root</b><b class='_imspace'> </b><b class='_imop op eq'>=</b><b class='_imspace'> </b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>root</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imnewline'>\n</b><b class='_imtok keyword var'>var</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v1'>item</b><b class='_imspace'> </b><b class='_imop op eq'>=</b><b class='_imspace'> </b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>item</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"This is an item\"</b></b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>root</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>append</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v1'>item</b></b><b class='_imspace'> </b><b class='_im _imcomment'># appends item to the end of root</b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>root</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>append</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"some text\"</b></b><b class='_imspace'> </b><b class='_im _imcomment'># append text</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>root</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>append</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>ul</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imop op comma'>,</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>ul</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imclose sb sbr'>]</b></b></b><b class='_imspace'> </b><b class='_im _imcomment'># append array</b></code></div></section><div class=\"inspector\"></div></div>"},"Imba.Tag#prepend":{"type":"method","name":"prepend","namepath":"Imba.Tag#prepend","params":[{"type":"RequiredParam","name":"item"}],"desc":"The .prepend method inserts the specified content as the first\nchild of the target node. If the content is already a child of \nnode it will be moved to the start.\n\n\tnode.prepend <div.top> # prepend node\n\tnode.prepend \"some text\" # prepend text\n\tnode.prepend [<ul>,<ul>] # prepend array","scopenr":234,"loc":[8955,9067],"todo":"Should support multiple arguments like append","html":"<p>The .prepend method inserts the specified content as the first\nchild of the target node. If the content is already a child of \nnode it will be moved to the start.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_imtok _imidentifier identifier access'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>prepend</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>top</b><b class='_imclose tag_close'>&gt;</b></b></b><b class='_imspace'> </b><b class='_im _imcomment'># prepend node</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier access'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>prepend</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>\"some text\"</b></b><b class='_imspace'> </b><b class='_im _imcomment'># prepend text</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier access'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>prepend</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imsquare square'><b class='_imopen sb sbl'>[</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>ul</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imop op comma'>,</b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>ul</b><b class='_imclose tag_close'>&gt;</b></b><b class='_imclose sb sbr'>]</b></b></b><b class='_imspace'> </b><b class='_im _imcomment'># prepend array</b></code></div></section><div class=\"inspector\"></div></div>"},"Imba.Tag#orphanize":{"type":"method","name":"orphanize","namepath":"Imba.Tag#orphanize","params":[],"desc":"Remove node from the dom tree","scopenr":236,"loc":[9128,9199],"return":{"name":"return","value":"self","desc":""},"html":"<p>Remove node from the dom tree</p>\n"},"Imba.Tag#text":{"type":"method","name":"text","namepath":"Imba.Tag#text","params":[{"type":"RequiredParam","name":"v"}],"desc":"Get text of node. Uses textContent behind the scenes (not innerText)\n[https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent]()","scopenr":237,"loc":[9390,9419],"return":{"name":"return","value":"string","desc":"inner text of node"},"html":"<p>Get text of node. Uses textContent behind the scenes (not innerText)\n<a href=\"\">https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</a></p>\n"},"Imba.Tag#text=":{"type":"method","name":"text=","namepath":"Imba.Tag#text=","params":[{"type":"RequiredParam","name":"txt"}],"desc":"Set text of node. Uses textContent behind the scenes (not innerText)\n[https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent]()","scopenr":238,"loc":[9573,9638],"html":"<p>Set text of node. Uses textContent behind the scenes (not innerText)\n<a href=\"\">https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</a></p>\n"},"Imba.Tag#dataset":{"type":"method","name":"dataset","namepath":"Imba.Tag#dataset","params":[{"type":"RequiredParam","name":"key"},{"type":"RequiredParam","name":"val"}],"desc":"Method for getting and setting data-attributes. When called with zero\narguments it will return the actual dataset for the tag.\n\n\tvar node = <div data-name='hello'>\n\t# get the whole dataset\n\tnode.dataset # {name: 'hello'}\n\t# get a single value\n\tnode.dataset('name') # 'hello'\n\t# set a single value\n\tnode.dataset('name','newname') # self","scopenr":246,"loc":[9999,10426],"html":"<p>Method for getting and setting data-attributes. When called with zero\narguments it will return the actual dataset for the tag.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_imtok keyword var'>var</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v0'>node</b><b class='_imspace'> </b><b class='_imop op eq'>=</b><b class='_imspace'> </b><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>div</b><b class='_imspace'> </b><b class='_imtok tag_attr'>data-name</b><b class='_imop op eq'>=</b><b class='_imvalue'><b class='_imstr string'>'hello'</b></b><b class='_imclose tag_close'>&gt;</b></b><b class='_imnewline'>\n</b><b class='_im _imcomment'># get the whole dataset</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>dataset</b><b class='_imspace'> </b><b class='_im _imcomment'># {name: 'hello'}</b><b class='_imnewline'>\n</b><b class='_im _imcomment'># get a single value</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>dataset</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'name'</b><b class='_imclose call rb rbr'>)</b></b><b class='_imspace'> </b><b class='_im _imcomment'># 'hello'</b><b class='_imnewline'>\n</b><b class='_im _imcomment'># set a single value</b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier lvar' eref='v0'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>dataset</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'name'</b><b class='_imop op comma'>,</b><b class='_imstr string'>'newname'</b><b class='_imclose call rb rbr'>)</b></b><b class='_imspace'> </b><b class='_im _imcomment'># self</b></code></div></section><div class=\"inspector\"></div></div>"},"Imba.Tag#empty":{"type":"method","name":"empty","namepath":"Imba.Tag#empty","params":[],"desc":"Remove all content inside node","scopenr":249,"loc":[10472,10640],"html":"<p>Remove all content inside node</p>\n"},"Imba.Tag#render":{"type":"method","name":"render","namepath":"Imba.Tag#render","params":[],"desc":"Empty placeholder. Override to implement custom render behaviour.\nWorks much like the familiar render-method in React.","scopenr":250,"loc":[10790,10807],"return":{"name":"return","value":"self","desc":""},"html":"<p>Empty placeholder. Override to implement custom render behaviour.\nWorks much like the familiar render-method in React.</p>\n"},"Imba.Tag#build":{"type":"method","name":"build","namepath":"Imba.Tag#build","params":[],"desc":"Called implicitly while tag is initializing. No initial props\nwill have been set at this point.","scopenr":251,"loc":[10934,10950],"return":{"name":"return","value":"self","desc":""},"html":"<p>Called implicitly while tag is initializing. No initial props\nwill have been set at this point.</p>\n"},"Imba.Tag#setup":{"type":"method","name":"setup","namepath":"Imba.Tag#setup","params":[],"desc":"Called once, implicitly through Imba.Tag#end. All initial props\nand children will have been set before setup is called.\nsetContent.","scopenr":252,"loc":[11114,11130],"return":{"name":"return","value":"self","desc":""},"html":"<p>Called once, implicitly through Imba.Tag#end. All initial props\nand children will have been set before setup is called.\nsetContent.</p>\n"},"Imba.Tag#commit":{"type":"method","name":"commit","namepath":"Imba.Tag#commit","params":[],"desc":"Called implicitly through Imba.Tag#end, for tags that are part of\na tag tree (that are rendered several times).","scopenr":253,"loc":[11273,11299],"return":{"name":"return","value":"self","desc":""},"html":"<p>Called implicitly through Imba.Tag#end, for tags that are part of\na tag tree (that are rendered several times).</p>\n"},"Imba.Tag#tick":{"type":"method","name":"tick","namepath":"Imba.Tag#tick","params":[],"desc":"Called by the tag-scheduler (if this tag is scheduled)\nBy default it will call this.render. Do not override unless\nyou really understand it.","scopenr":254,"loc":[11458,11482],"html":"<p>Called by the tag-scheduler (if this tag is scheduled)\nBy default it will call this.render. Do not override unless\nyou really understand it.</p>\n"},"Imba.Tag#end":{"type":"method","name":"end","namepath":"Imba.Tag#end","params":[],"desc":"A very important method that you will practically never manually.\nThe tag syntax of Imba compiles to a chain of setters, which always\nends with .end. `<a.large>` compiles to `tag('a').flag('large').end()`\n\nYou are highly adviced to not override its behaviour. The first time\nend is called it will mark the tag as initialized and call Imba.Tag#setup,\nand call Imba.Tag#commit every time.","scopenr":255,"loc":[11907,11921],"return":{"name":"return","value":"self","desc":""},"html":"<p>A very important method that you will practically never manually.\nThe tag syntax of Imba compiles to a chain of setters, which always\nends with .end. <code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok tag_type'>a</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>large</b><b class='_imclose tag_close'>&gt;</b></b></code> compiles to <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>tag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'a'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>flag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'large'</b><b class='_imclose rb rbr'>)</b></b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>end</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imclose rb rbr'>)</b></b></code></p>\n<p>You are highly adviced to not override its behaviour. The first time\nend is called it will mark the tag as initialized and call Imba.Tag#setup,\nand call Imba.Tag#commit every time.</p>\n"},"Imba.Tag#synced":{"type":"method","name":"synced","namepath":"Imba.Tag#synced","params":[],"desc":"This is called instead of Imba.Tag#end for `<self>` tag chains.\nDefaults to noop","scopenr":256,"loc":[12033,12050],"return":{"name":"return","value":"self","desc":""},"html":"<p>This is called instead of Imba.Tag#end for <code class=\"code md imba inline\"><b class='_imtagnode tagnode'><b class='_imopen tag_open'>&lt;</b><b class='_imtok keyword self'>self</b><b class='_imclose tag_close'>&gt;</b></b></code> tag chains.\nDefaults to noop</p>\n"},"Imba.Tag#awaken":{"type":"method","name":"awaken","namepath":"Imba.Tag#awaken","params":[],"scopenr":257,"loc":[12250,12267]},"Imba.Tag#flags":{"type":"method","name":"flags","namepath":"Imba.Tag#flags","params":[],"desc":"List of flags for this node. ","scopenr":258,"loc":[12313,12339],"html":"<p>List of flags for this node. </p>\n"},"Imba.Tag#classes":{"type":"method","name":"classes","namepath":"Imba.Tag#classes","params":[],"desc":"","scopenr":259,"loc":[12365,12434],"deprecated":true},"Imba.Tag#flag":{"type":"method","name":"flag","namepath":"Imba.Tag#flag","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"toggler"}],"desc":"Add speficied flag to current node.\nIf a second argument is supplied, it will be coerced into a Boolean,\nand used to indicate whether we should remove the flag instead.","scopenr":263,"loc":[12635,13031],"return":{"name":"return","value":"self","desc":""},"html":"<p>Add speficied flag to current node.\nIf a second argument is supplied, it will be coerced into a Boolean,\nand used to indicate whether we should remove the flag instead.</p>\n"},"Imba.Tag#unflag":{"type":"method","name":"unflag","namepath":"Imba.Tag#unflag","params":[{"type":"RequiredParam","name":"name"}],"desc":"Remove specified flag from node","scopenr":264,"loc":[13093,13145],"return":{"name":"return","value":"self","desc":""},"html":"<p>Remove specified flag from node</p>\n"},"Imba.Tag#toggleFlag":{"type":"method","name":"toggleFlag","namepath":"Imba.Tag#toggleFlag","params":[{"type":"RequiredParam","name":"name"}],"desc":"Toggle specified flag on node","scopenr":265,"loc":[13205,13261],"return":{"name":"return","value":"self","desc":""},"html":"<p>Toggle specified flag on node</p>\n"},"Imba.Tag#hasFlag":{"type":"method","name":"hasFlag","namepath":"Imba.Tag#hasFlag","params":[{"type":"RequiredParam","name":"name"}],"desc":"Check whether current node has specified flag","scopenr":266,"loc":[13337,13385],"return":{"name":"return","value":"bool","desc":""},"html":"<p>Check whether current node has specified flag</p>\n"},"Imba.Tag#setFlag":{"type":"method","name":"setFlag","namepath":"Imba.Tag#setFlag","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"value"}],"desc":"Set/update a named flag. It remembers the previous\nvalue of the flag, and removes it before setting the new value.\n\n\tnode.setFlag('type','todo')\n\tnode.setFlag('type','project')\n\t# todo is removed, project is added.","scopenr":270,"loc":[13636,13821],"return":{"name":"return","value":"self","desc":""},"html":"<p>Set/update a named flag. It remembers the previous\nvalue of the flag, and removes it before setting the new value.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_imtok _imidentifier identifier access'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>setFlag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'type'</b><b class='_imop op comma'>,</b><b class='_imstr string'>'todo'</b><b class='_imclose call rb rbr'>)</b></b><b class='_imnewline'>\n</b><b class='_imtok _imidentifier identifier access'>node</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>setFlag</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imstr string'>'type'</b><b class='_imop op comma'>,</b><b class='_imstr string'>'project'</b><b class='_imclose call rb rbr'>)</b></b><b class='_imnewline'>\n</b><b class='_im _imcomment'># todo is removed, project is added.</b></code></div></section><div class=\"inspector\"></div></div>"},"Imba.Tag#scheduler":{"type":"method","name":"scheduler","namepath":"Imba.Tag#scheduler","params":[],"desc":"Get the scheduler for this node. A new scheduler will be created\nif it does not already exist.","scopenr":271,"loc":[13959,14013],"return":{"name":"return","value":"Imba.Scheduler","desc":""},"html":"<p>Get the scheduler for this node. A new scheduler will be created\nif it does not already exist.</p>\n"},"Imba.Tag#schedule":{"type":"method","name":"schedule","namepath":"Imba.Tag#schedule","params":[{"type":"OptionalParam","name":"options","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_expression":false,"_traversed":true,"_parens":false,"_cache":null,"_value":null,"_nodes":[{"_traversed":true,"_key":"events","_value":{"type":"Bool","value":{"_type":"TRUE","_value":"yes","_loc":14229,"_len":3,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}},"_dynamic":false}],"_indentation":null}}}],"desc":"Shorthand to start scheduling a node. The method will basically\nproxy the arguments through to scheduler.configure, and then\nactivate the scheduler.","scopenr":272,"loc":[14197,14280],"return":{"name":"return","value":"self","desc":""},"html":"<p>Shorthand to start scheduling a node. The method will basically\nproxy the arguments through to scheduler.configure, and then\nactivate the scheduler.</p>\n"},"Imba.Tag#unschedule":{"type":"method","name":"unschedule","namepath":"Imba.Tag#unschedule","params":[],"desc":"Shorthand for deactivating scheduler (if tag has one).","scopenr":274,"loc":[14362,14420],"deprecated":true,"html":"<p>Shorthand for deactivating scheduler (if tag has one).</p>\n"},"Imba.Tag#parent":{"type":"method","name":"parent","namepath":"Imba.Tag#parent","params":[],"desc":"Get the parent of current node","scopenr":275,"loc":[14487,14533],"return":{"name":"return","value":"Imba.Tag","desc":""},"html":"<p>Get the parent of current node</p>\n"},"Imba.Tag#children":{"type":"method","name":"children","namepath":"Imba.Tag#children","params":[{"type":"RequiredParam","name":"sel"}],"desc":"Get the children of node","scopenr":277,"loc":[14594,14678],"return":{"name":"return","value":"Imba.Tag[]","desc":""},"html":"<p>Get the children of node</p>\n"},"Imba.Tag#querySelector":{"type":"method","name":"querySelector","namepath":"Imba.Tag#querySelector","params":[{"type":"RequiredParam","name":"q"}],"scopenr":278,"loc":[14682,14744]},"Imba.Tag#querySelectorAll":{"type":"method","name":"querySelectorAll","namepath":"Imba.Tag#querySelectorAll","params":[{"type":"RequiredParam","name":"q"}],"scopenr":280,"loc":[14747,14887]},"Imba.Tag#matches":{"type":"method","name":"matches","namepath":"Imba.Tag#matches","params":[{"type":"RequiredParam","name":"sel"}],"desc":"Check if this node matches a selector","scopenr":284,"loc":[14958,15224],"return":{"name":"return","value":"Boolean","desc":""},"html":"<p>Check if this node matches a selector</p>\n"},"Imba.Tag#closest":{"type":"method","name":"closest","namepath":"Imba.Tag#closest","params":[{"type":"RequiredParam","name":"sel"}],"desc":"Get the first element matching supplied selector / filter\ntraversing upwards, but including the node itself.","scopenr":289,"loc":[15368,15617],"return":{"name":"return","value":"Imba.Tag","desc":""},"html":"<p>Get the first element matching supplied selector / filter\ntraversing upwards, but including the node itself.</p>\n"},"Imba.Tag#index":{"type":"method","name":"index","namepath":"Imba.Tag#index","params":[],"desc":"Get the index of node.","scopenr":291,"loc":[15672,15780],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Get the index of node.</p>\n"},"Imba.Tag#contains":{"type":"method","name":"contains","namepath":"Imba.Tag#contains","params":[{"type":"RequiredParam","name":"node"}],"desc":"Check if node contains other node","scopenr":292,"loc":[15848,15908],"return":{"name":"return","value":"Boolean","desc":""},"html":"<p>Check if node contains other node</p>\n"},"Imba.Tag#log":{"type":"method","name":"log","namepath":"Imba.Tag#log","params":[{"type":"SplatParam","name":"args","defaults":null}],"desc":"Shorthand for console.log on elements","scopenr":293,"loc":[15977,16072],"return":{"name":"return","value":"self","desc":""},"html":"<p>Shorthand for console.log on elements</p>\n"},"Imba.Tag#css":{"type":"method","name":"css","namepath":"Imba.Tag#css","params":[{"type":"RequiredParam","name":"key"},{"type":"RequiredParam","name":"val"}],"scopenr":299,"loc":[16075,16481]},"Imba.Tag#trigger":{"type":"method","name":"trigger","namepath":"Imba.Tag#trigger","params":[{"type":"RequiredParam","name":"name"},{"type":"OptionalParam","name":"data","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_expression":false,"_traversed":true,"_parens":false,"_cache":null,"_value":null,"_nodes":[],"_indentation":null}}}],"desc":"Trigger an event from current node. Dispatched through the Imba event manager.\nTo dispatch actual dom events, use dom.dispatchEvent instead.","scopenr":301,"loc":[16660,16758],"return":{"name":"return","value":"Imba.Event","desc":""},"html":"<p>Trigger an event from current node. Dispatched through the Imba event manager.\nTo dispatch actual dom events, use dom.dispatchEvent instead.</p>\n"},"Imba.Tag#style=":{"type":"method","name":"style=","namepath":"Imba.Tag#style=","params":[{"type":"RequiredParam","name":"style"}],"scopenr":302,"loc":[16761,16814]},"Imba.Tag#style":{"type":"method","name":"style","namepath":"Imba.Tag#style","params":[],"scopenr":303,"loc":[16817,16850]},"Imba.Tag#focus":{"type":"method","name":"focus","namepath":"Imba.Tag#focus","params":[],"desc":"Focus on current node","scopenr":304,"loc":[16902,16930],"return":{"name":"return","value":"self","desc":""},"html":"<p>Focus on current node</p>\n"},"Imba.Tag#blur":{"type":"method","name":"blur","namepath":"Imba.Tag#blur","params":[],"desc":"Remove focus from current node","scopenr":305,"loc":[16991,17017],"return":{"name":"return","value":"self","desc":""},"html":"<p>Remove focus from current node</p>\n"},"Imba.Tag#toString":{"type":"method","name":"toString","namepath":"Imba.Tag#toString","params":[],"scopenr":306,"loc":[17020,17048]},"&extender":{"type":"method","name":"extender","namepath":"&extender","params":[{"type":"RequiredParam","name":"obj"},{"type":"RequiredParam","name":"sup"}],"scopenr":310,"loc":[17917,18154]},"&Tag":{"type":"method","name":"Tag","namepath":"&Tag","params":[],"scopenr":312,"loc":[18156,18225]},"&TagSpawner":{"type":"method","name":"TagSpawner","namepath":"&TagSpawner","params":[{"type":"RequiredParam","name":"type"}],"scopenr":314,"loc":[18227,18281]},"Imba.Tags":{"type":"class","namepath":"Imba.Tags","inherits":null,"path":"Imba.Tags","loc":[0,0],"#":["Imba.Tags#initialize","Imba.Tags#__clone","Imba.Tags#ns","Imba.Tags#defineNamespace","Imba.Tags#baseType","Imba.Tags#defineTag","Imba.Tags#defineSingleton","Imba.Tags#extendTag","Imba.Tags#optimizeTag"]},"Imba.Tags#initialize":{"type":"method","name":"initialize","namepath":"Imba.Tags#initialize","params":[],"scopenr":315,"loc":[18301,18322]},"Imba.Tags#__clone":{"type":"method","name":"__clone","namepath":"Imba.Tags#__clone","params":[{"type":"RequiredParam","name":"ns"}],"scopenr":316,"loc":[18325,18411]},"Imba.Tags#ns":{"type":"method","name":"ns","namepath":"Imba.Tags#ns","params":[{"type":"RequiredParam","name":"name"}],"scopenr":317,"loc":[18414,18481]},"Imba.Tags#defineNamespace":{"type":"method","name":"defineNamespace","namepath":"Imba.Tags#defineNamespace","params":[{"type":"RequiredParam","name":"name"}],"scopenr":318,"loc":[18484,18638]},"Imba.Tags#baseType":{"type":"method","name":"baseType","namepath":"Imba.Tags#baseType","params":[{"type":"RequiredParam","name":"name"}],"scopenr":320,"loc":[18641,18703]},"Imba.Tags#defineTag":{"type":"method","name":"defineTag","namepath":"Imba.Tags#defineTag","params":[{"type":"RequiredParam","name":"name"},{"type":"OptionalParam","name":"supr","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_value":{"_type":"STRING","_value":"''","_loc":18733,"_len":2,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}}},{"type":"BlockParam","name":"body","defaults":null}],"scopenr":329,"loc":[18706,19610]},"Imba.Tags#defineSingleton":{"type":"method","name":"defineSingleton","namepath":"Imba.Tags#defineSingleton","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"supr"},{"type":"BlockParam","name":"body","defaults":null}],"scopenr":330,"loc":[19613,19678]},"Imba.Tags#extendTag":{"type":"method","name":"extendTag","namepath":"Imba.Tags#extendTag","params":[{"type":"RequiredParam","name":"name"},{"type":"OptionalParam","name":"supr","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_value":{"_type":"STRING","_value":"''","_loc":19708,"_len":2,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}}},{"type":"BlockParam","name":"body","defaults":null}],"scopenr":334,"loc":[19681,19939]},"Imba.Tags#optimizeTag":{"type":"method","name":"optimizeTag","namepath":"Imba.Tags#optimizeTag","params":[{"type":"RequiredParam","name":"tagtype"}],"scopenr":335,"loc":[19942,20014]},"Variable.baseType":{"type":"method","name":"baseType","namepath":"Variable.baseType","params":[{"type":"RequiredParam","name":"name"}],"scopenr":337,"loc":[20264,20296]},"Variable.defineTag":{"type":"method","name":"defineTag","namepath":"Variable.defineTag","params":[{"type":"RequiredParam","name":"name"},{"type":"OptionalParam","name":"supr","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_value":{"_type":"STRING","_value":"''","_loc":20330,"_len":2,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}}},{"type":"BlockParam","name":"body","defaults":null}],"scopenr":338,"loc":[20298,20383]},"Variable.defineSingletonTag":{"type":"method","name":"defineSingletonTag","namepath":"Variable.defineSingletonTag","params":[{"type":"RequiredParam","name":"id"},{"type":"OptionalParam","name":"supr","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_value":{"_type":"STRING","_value":"'div'","_loc":20424,"_len":5,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}}},{"type":"BlockParam","name":"body","defaults":null}],"scopenr":339,"loc":[20385,20480]},"Variable.extendTag":{"type":"method","name":"extendTag","namepath":"Variable.extendTag","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"body"}],"scopenr":340,"loc":[20482,20550]},"Variable.getTagSingleton":{"type":"method","name":"getTagSingleton","namepath":"Variable.getTagSingleton","params":[{"type":"RequiredParam","name":"id"}],"scopenr":345,"loc":[20552,21227]},"Variable.getTagForDom":{"type":"method","name":"getTagForDom","namepath":"Variable.getTagForDom","params":[{"type":"RequiredParam","name":"dom"}],"scopenr":358,"loc":[21281,22464]},"Variable.generateCSSPrefixes":{"type":"method","name":"generateCSSPrefixes","namepath":"Variable.generateCSSPrefixes","params":[],"scopenr":363,"loc":[22466,22968]},"<element>":{"type":"tag","namepath":"<element>","inherits":null,"loc":[0,0],"#":["<element>#hasFlag","<element>#addFlag","<element>#unflag","<element>#toggleFlag","<element>#flag"]},"<element>#hasFlag":{"type":"method","name":"hasFlag","namepath":"<element>#hasFlag","params":[{"type":"RequiredParam","name":"ref"}],"scopenr":365,"loc":[23119,23206]},"<element>#addFlag":{"type":"method","name":"addFlag","namepath":"<element>#addFlag","params":[{"type":"RequiredParam","name":"ref"}],"scopenr":368,"loc":[23211,23330]},"<element>#unflag":{"type":"method","name":"unflag","namepath":"<element>#unflag","params":[{"type":"RequiredParam","name":"ref"}],"scopenr":370,"loc":[23335,23519]},"<element>#toggleFlag":{"type":"method","name":"toggleFlag","namepath":"<element>#toggleFlag","params":[{"type":"RequiredParam","name":"ref"}],"scopenr":372,"loc":[23524,23585]},"<element>#flag":{"type":"method","name":"flag","namepath":"<element>#flag","params":[{"type":"RequiredParam","name":"ref"},{"type":"RequiredParam","name":"bool"}],"scopenr":374,"loc":[23590,23703]},"<fragment>":{"type":"tag","namepath":"<fragment>","inherits":"<element>","loc":[0,0],".":["<fragment>.createNode"]},"<fragment>.createNode":{"type":"method","name":"createNode","namepath":"<fragment>.createNode","params":[],"scopenr":404,"loc":[92,150]},"<a>":{"type":"tag","namepath":"<a>","inherits":null,"loc":[0,0]},"<abbr>":{"type":"tag","namepath":"<abbr>","inherits":null,"loc":[0,0]},"<address>":{"type":"tag","namepath":"<address>","inherits":null,"loc":[0,0]},"<area>":{"type":"tag","namepath":"<area>","inherits":null,"loc":[0,0]},"<article>":{"type":"tag","namepath":"<article>","inherits":null,"loc":[0,0]},"<aside>":{"type":"tag","namepath":"<aside>","inherits":null,"loc":[0,0]},"<audio>":{"type":"tag","namepath":"<audio>","inherits":null,"loc":[0,0]},"<b>":{"type":"tag","namepath":"<b>","inherits":null,"loc":[0,0]},"<base>":{"type":"tag","namepath":"<base>","inherits":null,"loc":[0,0]},"<bdi>":{"type":"tag","namepath":"<bdi>","inherits":null,"loc":[0,0]},"<bdo>":{"type":"tag","namepath":"<bdo>","inherits":null,"loc":[0,0]},"<big>":{"type":"tag","namepath":"<big>","inherits":null,"loc":[0,0]},"<blockquote>":{"type":"tag","namepath":"<blockquote>","inherits":null,"loc":[0,0]},"<body>":{"type":"tag","namepath":"<body>","inherits":null,"loc":[0,0]},"<br>":{"type":"tag","namepath":"<br>","inherits":null,"loc":[0,0]},"<button>":{"type":"tag","namepath":"<button>","inherits":null,"loc":[0,0]},"<canvas>":{"type":"tag","namepath":"<canvas>","inherits":null,"loc":[0,0],"#":["<canvas>#context"]},"<canvas>#context":{"type":"method","name":"context","namepath":"<canvas>#context","params":[{"type":"OptionalParam","name":"type","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_value":{"_type":"STRING","_value":"'2d'","_loc":518,"_len":4,"_meta":null,"generated":false,"newLine":true,"spaced":false,"call":false}}}],"scopenr":422,"loc":[499,545]},"<caption>":{"type":"tag","namepath":"<caption>","inherits":null,"loc":[0,0]},"<cite>":{"type":"tag","namepath":"<cite>","inherits":null,"loc":[0,0]},"<code>":{"type":"tag","namepath":"<code>","inherits":null,"loc":[0,0]},"<col>":{"type":"tag","namepath":"<col>","inherits":null,"loc":[0,0]},"<colgroup>":{"type":"tag","namepath":"<colgroup>","inherits":null,"loc":[0,0]},"<data>":{"type":"tag","namepath":"<data>","inherits":null,"loc":[0,0]},"<datalist>":{"type":"tag","namepath":"<datalist>","inherits":null,"loc":[0,0]},"<dd>":{"type":"tag","namepath":"<dd>","inherits":null,"loc":[0,0]},"<del>":{"type":"tag","namepath":"<del>","inherits":null,"loc":[0,0]},"<details>":{"type":"tag","namepath":"<details>","inherits":null,"loc":[0,0]},"<dfn>":{"type":"tag","namepath":"<dfn>","inherits":null,"loc":[0,0]},"<div>":{"type":"tag","namepath":"<div>","inherits":null,"loc":[0,0]},"<dl>":{"type":"tag","namepath":"<dl>","inherits":null,"loc":[0,0]},"<dt>":{"type":"tag","namepath":"<dt>","inherits":null,"loc":[0,0]},"<em>":{"type":"tag","namepath":"<em>","inherits":null,"loc":[0,0]},"<embed>":{"type":"tag","namepath":"<embed>","inherits":null,"loc":[0,0]},"<fieldset>":{"type":"tag","namepath":"<fieldset>","inherits":null,"loc":[0,0]},"<figcaption>":{"type":"tag","namepath":"<figcaption>","inherits":null,"loc":[0,0]},"<figure>":{"type":"tag","namepath":"<figure>","inherits":null,"loc":[0,0]},"<footer>":{"type":"tag","namepath":"<footer>","inherits":null,"loc":[0,0]},"<form>":{"type":"tag","namepath":"<form>","inherits":null,"loc":[0,0]},"<h1>":{"type":"tag","namepath":"<h1>","inherits":null,"loc":[0,0]},"<h2>":{"type":"tag","namepath":"<h2>","inherits":null,"loc":[0,0]},"<h3>":{"type":"tag","namepath":"<h3>","inherits":null,"loc":[0,0]},"<h4>":{"type":"tag","namepath":"<h4>","inherits":null,"loc":[0,0]},"<h5>":{"type":"tag","namepath":"<h5>","inherits":null,"loc":[0,0]},"<h6>":{"type":"tag","namepath":"<h6>","inherits":null,"loc":[0,0]},"<head>":{"type":"tag","namepath":"<head>","inherits":null,"loc":[0,0]},"<header>":{"type":"tag","namepath":"<header>","inherits":null,"loc":[0,0]},"<hr>":{"type":"tag","namepath":"<hr>","inherits":null,"loc":[0,0]},"<html>":{"type":"tag","namepath":"<html>","inherits":null,"loc":[0,0]},"<i>":{"type":"tag","namepath":"<i>","inherits":null,"loc":[0,0]},"<iframe>":{"type":"tag","namepath":"<iframe>","inherits":null,"loc":[0,0]},"<img>":{"type":"tag","namepath":"<img>","inherits":null,"loc":[0,0]},"<input>":{"type":"tag","namepath":"<input>","inherits":null,"loc":[0,0]},"<ins>":{"type":"tag","namepath":"<ins>","inherits":null,"loc":[0,0]},"<kbd>":{"type":"tag","namepath":"<kbd>","inherits":null,"loc":[0,0]},"<keygen>":{"type":"tag","namepath":"<keygen>","inherits":null,"loc":[0,0]},"<label>":{"type":"tag","namepath":"<label>","inherits":null,"loc":[0,0]},"<legend>":{"type":"tag","namepath":"<legend>","inherits":null,"loc":[0,0]},"<li>":{"type":"tag","namepath":"<li>","inherits":null,"loc":[0,0]},"<link>":{"type":"tag","namepath":"<link>","inherits":null,"loc":[0,0]},"<main>":{"type":"tag","namepath":"<main>","inherits":null,"loc":[0,0]},"<map>":{"type":"tag","namepath":"<map>","inherits":null,"loc":[0,0]},"<mark>":{"type":"tag","namepath":"<mark>","inherits":null,"loc":[0,0]},"<menu>":{"type":"tag","namepath":"<menu>","inherits":null,"loc":[0,0]},"<menuitem>":{"type":"tag","namepath":"<menuitem>","inherits":null,"loc":[0,0]},"<meta>":{"type":"tag","namepath":"<meta>","inherits":null,"loc":[0,0]},"<meter>":{"type":"tag","namepath":"<meter>","inherits":null,"loc":[0,0]},"<nav>":{"type":"tag","namepath":"<nav>","inherits":null,"loc":[0,0]},"<noscript>":{"type":"tag","namepath":"<noscript>","inherits":null,"loc":[0,0]},"<ol>":{"type":"tag","namepath":"<ol>","inherits":null,"loc":[0,0]},"<optgroup>":{"type":"tag","namepath":"<optgroup>","inherits":null,"loc":[0,0]},"<option>":{"type":"tag","namepath":"<option>","inherits":null,"loc":[0,0]},"<output>":{"type":"tag","namepath":"<output>","inherits":null,"loc":[0,0]},"<p>":{"type":"tag","namepath":"<p>","inherits":null,"loc":[0,0]},"<object>":{"type":"tag","namepath":"<object>","inherits":null,"loc":[0,0]},"<param>":{"type":"tag","namepath":"<param>","inherits":null,"loc":[0,0]},"<pre>":{"type":"tag","namepath":"<pre>","inherits":null,"loc":[0,0]},"<progress>":{"type":"tag","namepath":"<progress>","inherits":null,"loc":[0,0]},"<q>":{"type":"tag","namepath":"<q>","inherits":null,"loc":[0,0]},"<rp>":{"type":"tag","namepath":"<rp>","inherits":null,"loc":[0,0]},"<rt>":{"type":"tag","namepath":"<rt>","inherits":null,"loc":[0,0]},"<ruby>":{"type":"tag","namepath":"<ruby>","inherits":null,"loc":[0,0]},"<s>":{"type":"tag","namepath":"<s>","inherits":null,"loc":[0,0]},"<samp>":{"type":"tag","namepath":"<samp>","inherits":null,"loc":[0,0]},"<script>":{"type":"tag","namepath":"<script>","inherits":null,"loc":[0,0]},"<section>":{"type":"tag","namepath":"<section>","inherits":null,"loc":[0,0]},"<select>":{"type":"tag","namepath":"<select>","inherits":null,"loc":[0,0],"#":["<select>#value=","<select>#value","<select>#syncValue","<select>#setChildren"]},"<select>#value=":{"type":"method","name":"value=","namepath":"<select>#value=","params":[{"type":"RequiredParam","name":"value"}],"scopenr":494,"loc":[2376,2525]},"<select>#value":{"type":"method","name":"value","namepath":"<select>#value","params":[],"scopenr":495,"loc":[2529,2550]},"<select>#syncValue":{"type":"method","name":"syncValue","namepath":"<select>#syncValue","params":[],"scopenr":497,"loc":[2554,2664]},"<select>#setChildren":{"type":"method","name":"setChildren","namepath":"<select>#setChildren","params":[],"scopenr":498,"loc":[2668,2703]},"<small>":{"type":"tag","namepath":"<small>","inherits":null,"loc":[0,0]},"<source>":{"type":"tag","namepath":"<source>","inherits":null,"loc":[0,0]},"<span>":{"type":"tag","namepath":"<span>","inherits":null,"loc":[0,0]},"<strong>":{"type":"tag","namepath":"<strong>","inherits":null,"loc":[0,0]},"<style>":{"type":"tag","namepath":"<style>","inherits":null,"loc":[0,0]},"<sub>":{"type":"tag","namepath":"<sub>","inherits":null,"loc":[0,0]},"<summary>":{"type":"tag","namepath":"<summary>","inherits":null,"loc":[0,0]},"<sup>":{"type":"tag","namepath":"<sup>","inherits":null,"loc":[0,0]},"<table>":{"type":"tag","namepath":"<table>","inherits":null,"loc":[0,0]},"<tbody>":{"type":"tag","namepath":"<tbody>","inherits":null,"loc":[0,0]},"<td>":{"type":"tag","namepath":"<td>","inherits":null,"loc":[0,0]},"<textarea>":{"type":"tag","namepath":"<textarea>","inherits":null,"loc":[0,0]},"<tfoot>":{"type":"tag","namepath":"<tfoot>","inherits":null,"loc":[0,0]},"<th>":{"type":"tag","namepath":"<th>","inherits":null,"loc":[0,0]},"<thead>":{"type":"tag","namepath":"<thead>","inherits":null,"loc":[0,0]},"<time>":{"type":"tag","namepath":"<time>","inherits":null,"loc":[0,0]},"<title>":{"type":"tag","namepath":"<title>","inherits":null,"loc":[0,0]},"<tr>":{"type":"tag","namepath":"<tr>","inherits":null,"loc":[0,0]},"<track>":{"type":"tag","namepath":"<track>","inherits":null,"loc":[0,0]},"<u>":{"type":"tag","namepath":"<u>","inherits":null,"loc":[0,0]},"<ul>":{"type":"tag","namepath":"<ul>","inherits":null,"loc":[0,0]},"<video>":{"type":"tag","namepath":"<video>","inherits":null,"loc":[0,0]},"<wbr>":{"type":"tag","namepath":"<wbr>","inherits":null,"loc":[0,0]},"<svg:element>":{"type":"tag","namepath":"<svg:element>","inherits":null,"loc":[0,0],".":["<svg:element>.namespaceURI","<svg:element>.buildNode","<svg:element>.inherit"]},"<svg:element>.namespaceURI":{"type":"method","name":"namespaceURI","namepath":"<svg:element>.namespaceURI","params":[],"scopenr":524,"loc":[49,101]},"<svg:element>.buildNode":{"type":"method","name":"buildNode","namepath":"<svg:element>.buildNode","params":[],"scopenr":526,"loc":[104,262]},"<svg:element>.inherit":{"type":"method","name":"inherit","namepath":"<svg:element>.inherit","params":[{"type":"RequiredParam","name":"child"}],"scopenr":528,"loc":[265,544]},"<svg:svg>":{"type":"tag","namepath":"<svg:svg>","inherits":null,"loc":[0,0]},"<svg:g>":{"type":"tag","namepath":"<svg:g>","inherits":null,"loc":[0,0]},"<svg:defs>":{"type":"tag","namepath":"<svg:defs>","inherits":null,"loc":[0,0]},"<svg:symbol>":{"type":"tag","namepath":"<svg:symbol>","inherits":null,"loc":[0,0]},"<svg:marker>":{"type":"tag","namepath":"<svg:marker>","inherits":null,"loc":[0,0]},"<svg:rect>":{"type":"tag","namepath":"<svg:rect>","inherits":null,"loc":[0,0]},"<svg:circle>":{"type":"tag","namepath":"<svg:circle>","inherits":null,"loc":[0,0]},"<svg:ellipse>":{"type":"tag","namepath":"<svg:ellipse>","inherits":null,"loc":[0,0]},"<svg:path>":{"type":"tag","namepath":"<svg:path>","inherits":null,"loc":[0,0]},"<svg:line>":{"type":"tag","namepath":"<svg:line>","inherits":null,"loc":[0,0]},"<svg:polyline>":{"type":"tag","namepath":"<svg:polyline>","inherits":null,"loc":[0,0]},"<svg:polygon>":{"type":"tag","namepath":"<svg:polygon>","inherits":null,"loc":[0,0]},"<svg:text>":{"type":"tag","namepath":"<svg:text>","inherits":null,"loc":[0,0]},"<svg:tspan>":{"type":"tag","namepath":"<svg:tspan>","inherits":null,"loc":[0,0]},"Imba.EventManager":{"type":"class","namepath":"Imba.EventManager","inherits":null,"path":"Imba.EventManager","desc":"Manager for listening to and delegating events in Imba. A single instance\nis always created by Imba (as `Imba.Events`), which handles and delegates all\nevents at the very root of the document. Imba does not capture all events\nby default, so if you want to make sure exotic or custom DOMEvents are delegated\nin Imba you will need to register them in `Imba.Events.register(myCustomEventName)`","loc":[0,0],"iname":"manager","html":"<p>Manager for listening to and delegating events in Imba. A single instance\nis always created by Imba (as <code class=\"code md imba inline\"><b class='_imtok const'>Imba</b><b class='_imop op dot'>.</b><b class='_imtok const'>Events</b></code>), which handles and delegates all\nevents at the very root of the document. Imba does not capture all events\nby default, so if you want to make sure exotic or custom DOMEvents are delegated\nin Imba you will need to register them in <code class=\"code md imba inline\"><b class='_imtok const'>Imba</b><b class='_imop op dot'>.</b><b class='_imtok const'>Events</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>register</b><b class='_imparens call'><b class='_imopen call rb rbl'>(</b><b class='_imtok _imidentifier identifier'>myCustomEventName</b><b class='_imclose rb rbr'>)</b></b></code></p>\n","#":["Imba.EventManager#enabled-did-set","Imba.EventManager#initialize","Imba.EventManager#register","Imba.EventManager#listen","Imba.EventManager#delegate","Imba.EventManager#create","Imba.EventManager#trigger","Imba.EventManager#onenable","Imba.EventManager#ondisable"],".":["Imba.EventManager.activate"]},"Imba.EventManager#enabled-did-set":{"type":"method","name":"enabled-did-set","namepath":"Imba.EventManager#enabled-did-set","params":[{"type":"RequiredParam","name":"bool"}],"scopenr":547,"loc":[606,667]},"Imba.EventManager.activate":{"type":"method","name":"activate","namepath":"Imba.EventManager.activate","params":[],"scopenr":564,"loc":[670,2414]},"Imba.EventManager#initialize":{"type":"method","name":"initialize","namepath":"Imba.EventManager#initialize","params":[{"type":"RequiredParam","name":"node"},{"type":"NamedParams","nodes":[{"type":"NamedParam","name":"events","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_expression":false,"_traversed":true,"_parens":false,"_cache":null,"_value":null,"_nodes":[],"_indentation":null}}}]}],"scopenr":567,"loc":[2418,2685]},"Imba.EventManager#register":{"type":"method","name":"register","namepath":"Imba.EventManager#register","params":[{"type":"RequiredParam","name":"name"},{"type":"OptionalParam","name":"handler","defaults":{"type":"Bool","value":{"_type":"TRUE","_value":"true","_loc":3024,"_len":4,"_meta":null,"generated":false,"newLine":true,"spaced":false,"call":false}}}],"desc":"Tell the current EventManager to intercept and handle event of a certain name.\nBy default, Imba.Events will register interceptors for: *keydown*, *keyup*, \n*keypress*, *textInput*, *input*, *change*, *submit*, *focusin*, *focusout*, \n*blur*, *contextmenu*, *dblclick*, *mousewheel*, *wheel*","scopenr":573,"loc":[2995,3301],"html":"<p>Tell the current EventManager to intercept and handle event of a certain name.\nBy default, Imba.Events will register interceptors for: <em>keydown</em>, <em>keyup</em>, \n<em>keypress</em>, <em>textInput</em>, <em>input</em>, <em>change</em>, <em>submit</em>, <em>focusin</em>, <em>focusout</em>, \n<em>blur</em>, <em>contextmenu</em>, <em>dblclick</em>, <em>mousewheel</em>, <em>wheel</em></p>\n"},"Imba.EventManager#listen":{"type":"method","name":"listen","namepath":"Imba.EventManager#listen","params":[{"type":"RequiredParam","name":"name"},{"type":"RequiredParam","name":"handler"},{"type":"OptionalParam","name":"capture","defaults":{"type":"Bool","value":{"_type":"TRUE","_value":"yes","_loc":3340,"_len":3,"_meta":null,"generated":false,"newLine":true,"spaced":false,"call":false}}}],"scopenr":575,"loc":[3304,3448]},"Imba.EventManager#delegate":{"type":"method","name":"delegate","namepath":"Imba.EventManager#delegate","params":[{"type":"RequiredParam","name":"e"}],"scopenr":579,"loc":[3451,3693]},"Imba.EventManager#create":{"type":"method","name":"create","namepath":"Imba.EventManager#create","params":[{"type":"RequiredParam","name":"type"},{"type":"RequiredParam","name":"target"},{"type":"NamedParams","nodes":[{"type":"NamedParam","name":"data","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_type":"NULL","_value":"null","_loc":3764,"_len":4,"_meta":null,"generated":false,"newLine":false,"spaced":false,"call":false}}},{"type":"NamedParam","name":"source","defaults":{"_traversed":true,"_expression":true,"_cache":null,"_raw":null,"_value":{"_type":"NULL","_value":"null","_loc":3778,"_len":4,"_meta":null,"generated":false,"newLine":true,"spaced":false,"call":false}}}]}],"desc":"Create a new Imba.Event","scopenr":582,"loc":[3733,3909],"html":"<p>Create a new Imba.Event</p>\n"},"Imba.EventManager#trigger":{"type":"method","name":"trigger","namepath":"Imba.EventManager#trigger","params":[],"desc":"Trigger / process an Imba.Event.","scopenr":583,"loc":[3958,3998],"html":"<p>Trigger / process an Imba.Event.</p>\n"},"Imba.EventManager#onenable":{"type":"method","name":"onenable","namepath":"Imba.EventManager#onenable","params":[],"scopenr":586,"loc":[4001,4175]},"Imba.EventManager#ondisable":{"type":"method","name":"ondisable","namepath":"Imba.EventManager#ondisable","params":[],"scopenr":589,"loc":[4178,4359]},"Imba.Event":{"type":"class","namepath":"Imba.Event","inherits":null,"path":"Imba.Event","desc":"Imba handles all events in the dom through a single manager,\nlistening at the root of your document. If Imba finds a tag\nthat listens to a certain event, the event will be wrapped \nin an `Imba.Event`, which normalizes some of the quirks and \nbrowser differences.","loc":[0,0],"iname":"event","html":"<p>Imba handles all events in the dom through a single manager,\nlistening at the root of your document. If Imba finds a tag\nthat listens to a certain event, the event will be wrapped \nin an <code class=\"code md imba inline\"><b class='_imtok const'>Imba</b><b class='_imop op dot'>.</b><b class='_imtok const'>Event</b></code>, which normalizes some of the quirks and \nbrowser differences.</p>\n",".":["Imba.Event.wrap"],"#":["Imba.Event#initialize","Imba.Event#type=","Imba.Event#type","Imba.Event#name","Imba.Event#bubble","Imba.Event#halt","Imba.Event#stopPropagation","Imba.Event#cancel","Imba.Event#preventDefault","Imba.Event#silence","Imba.Event#isSilenced","Imba.Event#isPrevented","Imba.Event#target","Imba.Event#responder","Imba.Event#redirect","Imba.Event#keychar","Imba.Event#keycombo","Imba.Event#process","Imba.Event#processed","Imba.Event#x","Imba.Event#y","Imba.Event#which"]},"Imba.Event.wrap":{"type":"method","name":"wrap","namepath":"Imba.Event.wrap","params":[{"type":"RequiredParam","name":"e"}],"scopenr":594,"loc":[1076,1105]},"Imba.Event#initialize":{"type":"method","name":"initialize","namepath":"Imba.Event#initialize","params":[{"type":"RequiredParam","name":"e"}],"scopenr":595,"loc":[1109,1152]},"Imba.Event#type=":{"type":"method","name":"type=","namepath":"Imba.Event#type=","params":[{"type":"RequiredParam","name":"type"}],"scopenr":596,"loc":[1155,1191]},"Imba.Event#type":{"type":"method","name":"type","namepath":"Imba.Event#type","params":[],"desc":"","scopenr":597,"loc":[1263,1293],"return":{"name":"return","value":"String","desc":"The name of the event (case-insensitive)"}},"Imba.Event#name":{"type":"method","name":"name","namepath":"Imba.Event#name","params":[],"scopenr":598,"loc":[1296,1351]},"Imba.Event#bubble":{"type":"method","name":"bubble","namepath":"Imba.Event#bubble","params":[{"type":"RequiredParam","name":"v"}],"scopenr":600,"loc":[1369,1452]},"Imba.Event#halt":{"type":"method","name":"halt","namepath":"Imba.Event#halt","params":[],"desc":"Prevents further propagation of the current event.","scopenr":601,"loc":[1533,1562],"return":{"name":"return","value":"self","desc":""},"html":"<p>Prevents further propagation of the current event.</p>\n"},"Imba.Event#stopPropagation":{"type":"method","name":"stopPropagation","namepath":"Imba.Event#stopPropagation","params":[],"scopenr":602,"loc":[1566,1592]},"Imba.Event#cancel":{"type":"method","name":"cancel","namepath":"Imba.Event#cancel","params":[],"desc":"Cancel the event (if cancelable). In the case of native events it\nwill call `preventDefault` on the wrapped event object.","scopenr":604,"loc":[1745,1825],"return":{"name":"return","value":"self","desc":""},"html":"<p>Cancel the event (if cancelable). In the case of native events it\nwill call <code class=\"code md imba inline\"><b class='_imtok _imidentifier identifier'>preventDefault</b></code> on the wrapped event object.</p>\n"},"Imba.Event#preventDefault":{"type":"method","name":"preventDefault","namepath":"Imba.Event#preventDefault","params":[],"scopenr":605,"loc":[1828,1855]},"Imba.Event#silence":{"type":"method","name":"silence","namepath":"Imba.Event#silence","params":[],"scopenr":606,"loc":[1858,1894]},"Imba.Event#isSilenced":{"type":"method","name":"isSilenced","namepath":"Imba.Event#isSilenced","params":[],"scopenr":607,"loc":[1897,1925]},"Imba.Event#isPrevented":{"type":"method","name":"isPrevented","namepath":"Imba.Event#isPrevented","params":[],"desc":"Indicates whether or not event.cancel has been called.","scopenr":608,"loc":[2014,2075],"return":{"name":"return","value":"Boolean","desc":""},"html":"<p>Indicates whether or not event.cancel has been called.</p>\n"},"Imba.Event#target":{"type":"method","name":"target","namepath":"Imba.Event#target","params":[],"desc":"A reference to the initial target of the event.","scopenr":609,"loc":[2137,2184],"html":"<p>A reference to the initial target of the event.</p>\n"},"Imba.Event#responder":{"type":"method","name":"responder","namepath":"Imba.Event#responder","params":[],"desc":"A reference to the object responding to the event.","scopenr":610,"loc":[2249,2275],"html":"<p>A reference to the object responding to the event.</p>\n"},"Imba.Event#redirect":{"type":"method","name":"redirect","namepath":"Imba.Event#redirect","params":[{"type":"RequiredParam","name":"node"}],"desc":"Redirect the event to new target","scopenr":611,"loc":[2322,2365],"html":"<p>Redirect the event to new target</p>\n"},"Imba.Event#keychar":{"type":"method","name":"keychar","namepath":"Imba.Event#keychar","params":[],"desc":"Get the normalized character for KeyboardEvent/TextEvent","scopenr":616,"loc":[2454,2812],"return":{"name":"return","value":"String","desc":""},"html":"<p>Get the normalized character for KeyboardEvent/TextEvent</p>\n"},"Imba.Event#keycombo":{"type":"method","name":"keycombo","namepath":"Imba.Event#keycombo","params":[],"desc":"","scopenr":622,"loc":[2838,3124],"deprecated":true},"Imba.Event#process":{"type":"method","name":"process","namepath":"Imba.Event#process","params":[],"scopenr":632,"loc":[3128,4220]},"Imba.Event#processed":{"type":"method","name":"processed","namepath":"Imba.Event#processed","params":[],"scopenr":635,"loc":[4224,4468]},"Imba.Event#x":{"type":"method","name":"x","namepath":"Imba.Event#x","params":[],"desc":"Return the x/left coordinate of the mouse / pointer for this event","scopenr":637,"loc":[4609,0],"return":{"name":"return","value":"Number","desc":"x coordinate of mouse / pointer for event"},"html":"<p>Return the x/left coordinate of the mouse / pointer for this event</p>\n"},"Imba.Event#y":{"type":"method","name":"y","namepath":"Imba.Event#y","params":[],"desc":"Return the y/top coordinate of the mouse / pointer for this event","scopenr":639,"loc":[4765,0],"return":{"name":"return","value":"Number","desc":"y coordinate of mouse / pointer for event"},"html":"<p>Return the y/top coordinate of the mouse / pointer for this event</p>\n"},"Imba.Event#which":{"type":"method","name":"which","namepath":"Imba.Event#which","params":[],"desc":"Returns a Number representing a system and implementation\ndependent numeric code identifying the unmodified value of the\npressed key; this is usually the same as keyCode.\n\nFor mouse-events, the returned value indicates which button was\npressed on the mouse to trigger the event.","scopenr":641,"loc":[5097,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Returns a Number representing a system and implementation\ndependent numeric code identifying the unmodified value of the\npressed key; this is usually the same as keyCode.</p>\n<p>For mouse-events, the returned value indicates which button was\npressed on the mouse to trigger the event.</p>\n"},"Imba.Touch":{"type":"class","namepath":"Imba.Touch","inherits":null,"path":"Imba.Touch","desc":"Consolidates mouse and touch events. Touch objects persist across a touch,\nfrom touchstart until end/cancel. When a touch starts, it will traverse\ndown from the innermost target, until it finds a node that responds to\nontouchstart. Unless the touch is explicitly redirected, the touch will\ncall ontouchmove and ontouchend / ontouchcancel on the responder when appropriate.\n\n\ttag draggable\n\t\t# called when a touch starts\n\t\tdef ontouchstart touch\n\t\t\tflag 'dragging'\n\t\t\tself\n\t\t\n\t\t# called when touch moves - same touch object\n\t\tdef ontouchmove touch\n\t\t\t# move the node with touch\n\t\t\tcss top: touch.dy, left: touch.dx\n\t\t\n\t\t# called when touch ends\n\t\tdef ontouchend touch\n\t\t\tunflag 'dragging'","loc":[0,0],"iname":"touch","html":"<p>Consolidates mouse and touch events. Touch objects persist across a touch,\nfrom touchstart until end/cancel. When a touch starts, it will traverse\ndown from the innermost target, until it finds a node that responds to\nontouchstart. Unless the touch is explicitly redirected, the touch will\ncall ontouchmove and ontouchend / ontouchcancel on the responder when appropriate.</p>\n<div class=\"_snippet\"><section class=\"main\"><header class=\"header\"><div class=\"title path\"></div><div class=\"tools\"><button class=\"_tool reset sym\" title=\"reset\">reset</button><button class=\"_tool js sym\" title=\"show js\">show js</button><button class=\"_tool run sym\" title=\"run\">run</button><button class=\"_tool fullscreen sym\" title=\"+\">+</button></div></header><div class=\"view\"><code class=\"imbacode\"><b class='_imtok keyword tag'>tag</b><b class='_imspace'> </b><b class='_imtok tag_type'>draggable</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_im _imcomment'># called when a touch starts</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>ontouchstart</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok paramvar lvar' eref='v0'>touch</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier access'>flag</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>'dragging'</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok keyword self'>self</b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_im _imcomment'># called when touch moves - same touch object</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>ontouchmove</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok paramvar lvar' eref='v1'>touch</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_im _imcomment'># move the node with touch</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier access'>css</b><b class='_imparens call'><b class='_imcurly curly'><b class='_imspace'> </b><b class='_imkey key'>top</b><b class='_imop op colon'>:</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v1'>touch</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>dy</b><b class='_imop op comma'>,</b><b class='_imspace'> </b><b class='_imkey key'>left</b><b class='_imop op colon'>:</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier lvar' eref='v1'>touch</b><b class='_imop op dot'>.</b><b class='_imtok _imidentifier identifier'>dx</b></b></b><b class='_imnewline'>\n</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_im _imcomment'># called when touch ends</b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtok keyword def'>def</b><b class='_imspace'> </b><b class='_imtok _imidentifier identifier'>ontouchend</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imtok paramvar lvar' eref='v2'>touch</b></b><b class='_imnewline'>\n</b><b class='_imtab'>\t</b><b class='_imtab'>\t</b><b class='_imtok _imidentifier identifier access'>unflag</b><b class='_imparens call'><b class='_imspace'> </b><b class='_imstr string'>'dragging'</b></b></code></div></section><div class=\"inspector\"></div></div>",".":["Imba.Touch.count","Imba.Touch.lookup","Imba.Touch.release","Imba.Touch.ontouchstart","Imba.Touch.ontouchmove","Imba.Touch.ontouchend","Imba.Touch.ontouchcancel","Imba.Touch.onmousedown","Imba.Touch.onmousemove","Imba.Touch.onmouseup"],"#":["Imba.Touch#initialize","Imba.Touch#capture","Imba.Touch#isCaptured","Imba.Touch#extend","Imba.Touch#redirect","Imba.Touch#suppress","Imba.Touch#suppress=","Imba.Touch#touchstart","Imba.Touch#touchmove","Imba.Touch#touchend","Imba.Touch#touchcancel","Imba.Touch#mousedown","Imba.Touch#mousemove","Imba.Touch#mouseup","Imba.Touch#idle","Imba.Touch#began","Imba.Touch#update","Imba.Touch#move","Imba.Touch#ended","Imba.Touch#cancel","Imba.Touch#cancelled","Imba.Touch#cleanup_","Imba.Touch#dr","Imba.Touch#dx","Imba.Touch#dy","Imba.Touch#x0","Imba.Touch#y0","Imba.Touch#x","Imba.Touch#y","Imba.Touch#tx","Imba.Touch#ty","Imba.Touch#button","Imba.Touch#sourceTarget","Imba.Touch#elapsed"]},"Imba.Touch.count":{"type":"method","name":"count","namepath":"Imba.Touch.count","params":[],"scopenr":647,"loc":[1187,1209]},"Imba.Touch.lookup":{"type":"method","name":"lookup","namepath":"Imba.Touch.lookup","params":[{"type":"RequiredParam","name":"item"}],"scopenr":648,"loc":[1212,1299]},"Imba.Touch.release":{"type":"method","name":"release","namepath":"Imba.Touch.release","params":[{"type":"RequiredParam","name":"item"},{"type":"RequiredParam","name":"touch"}],"scopenr":649,"loc":[1302,1400]},"Imba.Touch.ontouchstart":{"type":"method","name":"ontouchstart","namepath":"Imba.Touch.ontouchstart","params":[{"type":"RequiredParam","name":"e"}],"scopenr":652,"loc":[1403,1629]},"Imba.Touch.ontouchmove":{"type":"method","name":"ontouchmove","namepath":"Imba.Touch.ontouchmove","params":[{"type":"RequiredParam","name":"e"}],"scopenr":655,"loc":[1632,1743]},"Imba.Touch.ontouchend":{"type":"method","name":"ontouchend","namepath":"Imba.Touch.ontouchend","params":[{"type":"RequiredParam","name":"e"}],"scopenr":658,"loc":[1746,1968]},"Imba.Touch.ontouchcancel":{"type":"method","name":"ontouchcancel","namepath":"Imba.Touch.ontouchcancel","params":[{"type":"RequiredParam","name":"e"}],"scopenr":661,"loc":[1971,2118]},"Imba.Touch.onmousedown":{"type":"method","name":"onmousedown","namepath":"Imba.Touch.onmousedown","params":[{"type":"RequiredParam","name":"e"}],"scopenr":662,"loc":[2121,2150]},"Imba.Touch.onmousemove":{"type":"method","name":"onmousemove","namepath":"Imba.Touch.onmousemove","params":[{"type":"RequiredParam","name":"e"}],"scopenr":663,"loc":[2153,2182]},"Imba.Touch.onmouseup":{"type":"method","name":"onmouseup","namepath":"Imba.Touch.onmouseup","params":[{"type":"RequiredParam","name":"e"}],"scopenr":664,"loc":[2185,2212]},"Imba.Touch#initialize":{"type":"method","name":"initialize","namepath":"Imba.Touch#initialize","params":[{"type":"RequiredParam","name":"event"},{"type":"RequiredParam","name":"pointer"}],"desc":"","scopenr":665,"loc":[2430,2677],"internal":true,"constructor":true},"Imba.Touch#capture":{"type":"method","name":"capture","namepath":"Imba.Touch#capture","params":[],"scopenr":668,"loc":[2680,2879]},"Imba.Touch#isCaptured":{"type":"method","name":"isCaptured","namepath":"Imba.Touch#isCaptured","params":[],"scopenr":669,"loc":[2882,2910]},"Imba.Touch#extend":{"type":"method","name":"extend","namepath":"Imba.Touch#extend","params":[{"type":"RequiredParam","name":"plugin"}],"desc":"Extend the touch with a plugin / gesture. \nAll events (touchstart,move etc) for the touch\nwill be triggered on the plugins in the order they\nare added.","scopenr":670,"loc":[3079,3182],"html":"<p>Extend the touch with a plugin / gesture. \nAll events (touchstart,move etc) for the touch\nwill be triggered on the plugins in the order they\nare added.</p>\n"},"Imba.Touch#redirect":{"type":"method","name":"redirect","namepath":"Imba.Touch#redirect","params":[{"type":"RequiredParam","name":"target"}],"desc":"Redirect touch to specified target. ontouchstart will always be\ncalled on the new target.","scopenr":671,"loc":[3305,3352],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Redirect touch to specified target. ontouchstart will always be\ncalled on the new target.</p>\n"},"Imba.Touch#suppress":{"type":"method","name":"suppress","namepath":"Imba.Touch#suppress","params":[],"desc":"Suppress the default behaviour. Will call preventDefault for\nall native events that are part of the touch.","scopenr":672,"loc":[3474,3552],"html":"<p>Suppress the default behaviour. Will call preventDefault for\nall native events that are part of the touch.</p>\n"},"Imba.Touch#suppress=":{"type":"method","name":"suppress=","namepath":"Imba.Touch#suppress=","params":[{"type":"RequiredParam","name":"value"}],"scopenr":673,"loc":[3555,3652]},"Imba.Touch#touchstart":{"type":"method","name":"touchstart","namepath":"Imba.Touch#touchstart","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":675,"loc":[3655,3810]},"Imba.Touch#touchmove":{"type":"method","name":"touchmove","namepath":"Imba.Touch#touchmove","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":677,"loc":[3813,3932]},"Imba.Touch#touchend":{"type":"method","name":"touchend","namepath":"Imba.Touch#touchend","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":681,"loc":[3935,4222]},"Imba.Touch#touchcancel":{"type":"method","name":"touchcancel","namepath":"Imba.Touch#touchcancel","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":682,"loc":[4225,4253]},"Imba.Touch#mousedown":{"type":"method","name":"mousedown","namepath":"Imba.Touch#mousedown","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":684,"loc":[4256,4463]},"Imba.Touch#mousemove":{"type":"method","name":"mousemove","namepath":"Imba.Touch#mousemove","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":686,"loc":[4466,4586]},"Imba.Touch#mouseup":{"type":"method","name":"mouseup","namepath":"Imba.Touch#mouseup","params":[{"type":"RequiredParam","name":"e"},{"type":"RequiredParam","name":"t"}],"scopenr":687,"loc":[4589,4653]},"Imba.Touch#idle":{"type":"method","name":"idle","namepath":"Imba.Touch#idle","params":[],"scopenr":688,"loc":[4656,4673]},"Imba.Touch#began":{"type":"method","name":"began","namepath":"Imba.Touch#began","params":[],"scopenr":692,"loc":[4676,5029]},"Imba.Touch#update":{"type":"method","name":"update","namepath":"Imba.Touch#update","params":[],"scopenr":702,"loc":[5032,5564]},"Imba.Touch#move":{"type":"method","name":"move","namepath":"Imba.Touch#move","params":[],"scopenr":707,"loc":[5567,5744]},"Imba.Touch#ended":{"type":"method","name":"ended","namepath":"Imba.Touch#ended","params":[],"scopenr":711,"loc":[5747,5913]},"Imba.Touch#cancel":{"type":"method","name":"cancel","namepath":"Imba.Touch#cancel","params":[],"scopenr":713,"loc":[5916,5998]},"Imba.Touch#cancelled":{"type":"method","name":"cancelled","namepath":"Imba.Touch#cancelled","params":[],"scopenr":718,"loc":[6001,6197]},"Imba.Touch#cleanup_":{"type":"method","name":"cleanup_","namepath":"Imba.Touch#cleanup_","params":[],"scopenr":721,"loc":[6202,6436]},"Imba.Touch#dr":{"type":"method","name":"dr","namepath":"Imba.Touch#dr","params":[],"desc":"The absolute distance the touch has moved from starting position ","scopenr":723,"loc":[6534,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>The absolute distance the touch has moved from starting position </p>\n"},"Imba.Touch#dx":{"type":"method","name":"dx","namepath":"Imba.Touch#dx","params":[],"desc":"The distance the touch has moved horizontally","scopenr":725,"loc":[6625,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>The distance the touch has moved horizontally</p>\n"},"Imba.Touch#dy":{"type":"method","name":"dy","namepath":"Imba.Touch#dy","params":[],"desc":"The distance the touch has moved vertically","scopenr":727,"loc":[6719,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>The distance the touch has moved vertically</p>\n"},"Imba.Touch#x0":{"type":"method","name":"x0","namepath":"Imba.Touch#x0","params":[],"desc":"Initial horizontal position of touch","scopenr":729,"loc":[6806,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Initial horizontal position of touch</p>\n"},"Imba.Touch#y0":{"type":"method","name":"y0","namepath":"Imba.Touch#y0","params":[],"desc":"Initial vertical position of touch","scopenr":731,"loc":[6886,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Initial vertical position of touch</p>\n"},"Imba.Touch#x":{"type":"method","name":"x","namepath":"Imba.Touch#x","params":[],"desc":"Horizontal position of touch","scopenr":733,"loc":[6960,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Horizontal position of touch</p>\n"},"Imba.Touch#y":{"type":"method","name":"y","namepath":"Imba.Touch#y","params":[],"desc":"Vertical position of touch","scopenr":735,"loc":[7030,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Vertical position of touch</p>\n"},"Imba.Touch#tx":{"type":"method","name":"tx","namepath":"Imba.Touch#tx","params":[],"desc":"Horizontal position of touch relative to target","scopenr":737,"loc":[7121,7204],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Horizontal position of touch relative to target</p>\n"},"Imba.Touch#ty":{"type":"method","name":"ty","namepath":"Imba.Touch#ty","params":[],"desc":"Vertical position of touch relative to target","scopenr":738,"loc":[7282,7361],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Vertical position of touch relative to target</p>\n"},"Imba.Touch#button":{"type":"method","name":"button","namepath":"Imba.Touch#button","params":[],"desc":"Button pressed in this touch. Native touches defaults to left-click (0)","scopenr":740,"loc":[7465,0],"return":{"name":"return","value":"Number","desc":""},"html":"<p>Button pressed in this touch. Native touches defaults to left-click (0)</p>\n"},"Imba.Touch#sourceTarget":{"type":"method","name":"sourceTarget","namepath":"Imba.Touch#sourceTarget","params":[],"scopenr":741,"loc":[7522,7554]},"Imba.Touch#elapsed":{"type":"method","name":"elapsed","namepath":"Imba.Touch#elapsed","params":[],"scopenr":742,"loc":[7557,7592]},"Imba.TouchGesture":{"type":"class","namepath":"Imba.TouchGesture","inherits":null,"path":"Imba.TouchGesture","loc":[0,0],"#":["Imba.TouchGesture#ontouchstart","Imba.TouchGesture#ontouchupdate","Imba.TouchGesture#ontouchend"]},"Imba.TouchGesture#ontouchstart":{"type":"method","name":"ontouchstart","namepath":"Imba.TouchGesture#ontouchstart","params":[{"type":"RequiredParam","name":"e"}],"scopenr":744,"loc":[7647,7672]},"Imba.TouchGesture#ontouchupdate":{"type":"method","name":"ontouchupdate","namepath":"Imba.TouchGesture#ontouchupdate","params":[{"type":"RequiredParam","name":"e"}],"scopenr":745,"loc":[7675,7701]},"Imba.TouchGesture#ontouchend":{"type":"method","name":"ontouchend","namepath":"Imba.TouchGesture#ontouchend","params":[{"type":"RequiredParam","name":"e"}],"scopenr":746,"loc":[7704,7727]},"Imba.Pointer":{"type":"class","namepath":"Imba.Pointer","inherits":null,"path":"Imba.Pointer","loc":[0,0],"#":["Imba.Pointer#initialize","Imba.Pointer#update","Imba.Pointer#process","Imba.Pointer#x","Imba.Pointer#y"]},"Imba.Pointer#initialize":{"type":"method","name":"initialize","namepath":"Imba.Pointer#initialize","params":[],"scopenr":754,"loc":[143,231]},"Imba.Pointer#update":{"type":"method","name":"update","namepath":"Imba.Pointer#update","params":[{"type":"RequiredParam","name":"e"}],"scopenr":755,"loc":[234,279]},"Imba.Pointer#process":{"type":"method","name":"process","namepath":"Imba.Pointer#process","params":[],"scopenr":765,"loc":[320,979]},"Imba.Pointer#x":{"type":"method","name":"x","namepath":"Imba.Pointer#x","params":[],"scopenr":766,"loc":[982,997]},"Imba.Pointer#y":{"type":"method","name":"y","namepath":"Imba.Pointer#y","params":[],"scopenr":767,"loc":[1000,1015]}}}